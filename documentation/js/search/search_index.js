var COMPODOC_SEARCH_INDEX = {
  'index': {
    'version': '2.3.8',
    'fields': ['title', 'body'],
    'fieldVectors': [['title/classes/Account.html', [0, 0.212, 1, 1.325]], ['body/classes/Account.html', [0, 0.121, 1, 2.536, 2, 0.48, 3, 0.076, 4, 0.065, 5, 0.065, 6, 1.84, 7, 0.312, 8, 1.54, 9, 1.089, 10, 1.041, 11, 0.195, 12, 0.796, 13, 4.021, 14, 4.021, 15, 3.15, 16, 3.09, 17, 4.123, 18, 4.782, 19, 1.082, 20, 4.123, 21, 1.493, 22, 3.624, 23, 2.579, 24, 4.782, 25, 1.91, 26, 1.089, 27, 3.624, 28, 3.624, 29, 3.689, 30, 3.689, 31, 0.794, 32, 0.018, 33, 1.296, 34, 1.44, 35, 1.999, 36, 0.713, 37, 2.135, 38, 4.782, 39, 4.782, 40, 3.384, 41, 2.135, 42, 1.126, 43, 1.312, 44, 2.544, 45, 2.135, 46, 2.38, 47, 2.38, 48, 2.61, 49, 1.524, 50, 2.149, 51, 2.135, 52, 3.105, 53, 2.949, 54, 2.135, 55, 3.364, 56, 2.135, 57, 1.416, 58, 2.135, 59, 0.871, 60, 2.89, 61, 2.135, 62, 2.135, 63, 2.135, 64, 3.384, 65, 2.271, 66, 2.135, 67, 3.364, 68, 2.135, 69, 2.135, 70, 2.135, 71, 3.624, 72, 2.89, 73, 2.135, 74, 0.657, 75, 0.601, 76, 1.089, 77, 2.135, 78, 2.54, 79, 0.258, 80, 1.893, 81, 3.137, 82, 0.502, 83, 2.135, 84, 2.135, 85, 1.647, 86, 1.84, 87, 1.071, 88, 2.135, 89, 1.647, 90, 1.647, 91, 1.647, 92, 0.076, 93, 1.312, 94, 2.135, 95, 2.135, 96, 1.84, 97, 2.135, 98, 1.84, 99, 1.647, 100, 1.84, 101, 0.961, 102, 1.607, 103, 1.84, 104, 2.135, 105, 1.84, 106, 2.135, 107, 2.135, 108, 2.135, 109, 2.135, 110, 1.84, 111, 1.14, 112, 2.135, 113, 0.005, 114, 0.008, 115, 0.005]], ['title/controllers/AccountController.html', [116, 1.265, 117, 2.642]], ['body/controllers/AccountController.html', [0, 0.155, 1, 2.63, 3, 0.097, 4, 0.083, 5, 0.083, 7, 0.798, 11, 0.25, 16, 2.459, 21, 1.324, 23, 1.757, 26, 1.322, 31, 0.544, 32, 0.017, 33, 1.549, 34, 1.058, 36, 0.512, 59, 1.753, 72, 4.414, 74, 1.514, 75, 1.385, 76, 1.584, 78, 1.659, 79, 0.237, 90, 2.117, 91, 2.117, 92, 0.097, 111, 1.971, 113, 0.006, 114, 0.009, 115, 0.006, 116, 1.658, 117, 2.889, 118, 0.925, 119, 2.366, 120, 1.782, 121, 1.849, 122, 2.184, 123, 2.216, 124, 4.242, 125, 3.541, 126, 4.242, 127, 2.366, 128, 5.871, 129, 4.107, 130, 2.745, 131, 3.708, 132, 3.168, 133, 5.401, 134, 3.195, 135, 2.741, 136, 2.905, 137, 2.741, 138, 2.741, 139, 2.741, 140, 3.547, 141, 2.366, 142, 4.107, 143, 2.745, 144, 4.107, 145, 5.291, 146, 2.366, 147, 4.107, 148, 2.745, 149, 4.107, 150, 3.195, 151, 2.745, 152, 3.479, 153, 1.931, 154, 1.782, 155, 0.538, 156, 2.973, 157, 2.366, 158, 1.782, 159, 1.553, 160, 2.745, 161, 1.931, 162, 1.553, 163, 1.117, 164, 4.107, 165, 2.745, 166, 2.745, 167, 2.745, 168, 2.745, 169, 2.745, 170, 2.745]], ['title/classes/AccountDto.html', [0, 0.212, 72, 2.269]], ['body/classes/AccountDto.html', [0, 0.312, 1, 2.628, 2, 0.942, 3, 0.148, 4, 0.127, 5, 0.127, 7, 0.612, 11, 0.382, 12, 1.302, 13, 5.286, 14, 5.286, 15, 4.141, 21, 1.845, 31, 0.729, 32, 0.017, 33, 1.417, 34, 1.189, 36, 0.685, 42, 1.551, 72, 3.343, 79, 0.17, 92, 0.148, 113, 0.009, 114, 0.012, 115, 0.009, 135, 2.776, 136, 2.942, 137, 2.776, 138, 2.776, 139, 2.776, 171, 3.609, 172, 4.186, 173, 6.196, 174, 4.186, 175, 4.186, 176, 4.267, 177, 3.609, 178, 4.186, 179, 4.769, 180, 4.267, 181, 2.718]], ['title/classes/AccountModel.html', [0, 0.212, 78, 2.269]], ['body/classes/AccountModel.html', [0, 0.29, 1, 2.574, 2, 1.155, 3, 0.182, 4, 0.156, 5, 0.156, 11, 0.468, 12, 1.483, 19, 1.754, 21, 1.381, 31, 0.696, 32, 0.017, 33, 1.354, 36, 0.655, 74, 1.58, 75, 1.444, 78, 3.806, 79, 0.208, 92, 0.182, 113, 0.011, 114, 0.014, 115, 0.011, 182, 4.425, 183, 2.196, 184, 6.299, 185, 6.299, 186, 3.959, 187, 3.611, 188, 3.101]], ['title/modules/AccountModule.html', [189, 1.156, 190, 2.438]], ['body/modules/AccountModule.html', [0, 0.259, 1, 1.617, 3, 0.162, 4, 0.139, 5, 0.139, 16, 2.642, 25, 1.651, 32, 0.017, 79, 0.297, 85, 3.535, 87, 2.3, 92, 0.162, 113, 0.01, 114, 0.013, 115, 0.01, 117, 4.553, 118, 1.977, 155, 0.899, 156, 4.36, 157, 3.951, 186, 3.535, 189, 1.992, 190, 4.685, 191, 1.961, 192, 1.961, 193, 2.176, 194, 2.176, 195, 1.961, 196, 3.073, 197, 2.786, 198, 3.951, 199, 3.951, 200, 2.786, 201, 2.176, 202, 2.176, 203, 4.583, 204, 2.438, 205, 1.695, 206, 4.583, 207, 2.3, 208, 4.583]], ['title/injectables/AccountService.html', [156, 2.269, 209, 1.057]], ['body/injectables/AccountService.html', [0, 0.14, 1, 2.516, 3, 0.088, 4, 0.075, 5, 0.141, 7, 0.362, 11, 0.226, 16, 2.334, 19, 0.638, 21, 1.395, 23, 1.625, 25, 1.301, 26, 1.223, 31, 0.573, 32, 0.018, 33, 1.52, 36, 0.539, 72, 4.008, 74, 1.595, 75, 1.459, 76, 1.488, 78, 1.497, 79, 0.257, 82, 0.583, 85, 1.911, 87, 1.243, 90, 1.911, 91, 1.911, 92, 0.088, 101, 2.517, 102, 2.655, 103, 2.136, 105, 2.136, 110, 2.136, 111, 1.28, 113, 0.006, 114, 0.008, 115, 0.006, 121, 2.656, 122, 2.021, 123, 2.926, 124, 3.985, 125, 3.276, 126, 3.985, 127, 2.136, 128, 5.295, 134, 2.467, 138, 1.907, 140, 3.366, 141, 3.276, 145, 3.985, 146, 2.136, 155, 0.486, 156, 2.296, 163, 1.881, 183, 1.625, 186, 1.911, 205, 0.916, 209, 1.069, 210, 1.115, 211, 2.136, 212, 4.115, 213, 3.276, 214, 2.477, 215, 3.752, 216, 3.985, 217, 3.985, 218, 2.477, 219, 3.8, 220, 2.477, 221, 3.8, 222, 2.477, 223, 3.8, 224, 2.477, 225, 3.8, 226, 2.477, 227, 3.831, 228, 1.743, 229, 1.497, 230, 2.477, 231, 2.458, 232, 2.136, 233, 2.136, 234, 3.009, 235, 2.477, 236, 2.477, 237, 5.59, 238, 3.933, 239, 5.59, 240, 2.477, 241, 4.312, 242, 3.8, 243, 3.8, 244, 2.477, 245, 2.477, 246, 2.477, 247, 2.477, 248, 2.477, 249, 3.8, 250, 3.8, 251, 3.8, 252, 3.8, 253, 2.477, 254, 2.477, 255, 2.477, 256, 2.477, 257, 2.477, 258, 2.477]], ['title/classes/Achievement.html', [0, 0.212, 259, 2.642]], ['body/classes/Achievement.html', [0, 0.213, 2, 0.847, 3, 0.133, 4, 0.114, 5, 0.114, 7, 0.997, 8, 2.033, 9, 1.659, 10, 1.586, 11, 0.344, 12, 1.213, 19, 1.512, 25, 1.861, 31, 0.755, 32, 0.018, 33, 1.357, 34, 1.422, 35, 2.129, 36, 0.687, 42, 1.486, 43, 1.997, 44, 2.74, 57, 1.979, 59, 1.326, 79, 0.209, 82, 0.886, 87, 1.89, 92, 0.133, 93, 1.997, 113, 0.008, 114, 0.011, 115, 0.008, 259, 5.227, 260, 3.246, 261, 5.1, 262, 2.828, 263, 5.872, 264, 3.973, 265, 3.765, 266, 3.765, 267, 5.151, 268, 3.765, 269, 3.765, 270, 3.246, 271, 3.765, 272, 3.765, 273, 5.151, 274, 4.441, 275, 3.765]], ['title/controllers/AppController.html', [116, 1.265, 276, 2.642]], ['body/controllers/AppController.html', [0, 0.324, 3, 0.203, 4, 0.175, 5, 0.175, 32, 0.017, 79, 0.233, 92, 0.203, 113, 0.013, 114, 0.015, 115, 0.013, 116, 2.271, 118, 1.935, 155, 1.126, 276, 4.74, 277, 4.95]], ['title/modules/AppModule.html', [189, 1.156, 278, 2.642]], ['body/modules/AppModule.html', [0, 0.2, 3, 0.125, 4, 0.108, 5, 0.108, 32, 0.018, 79, 0.3, 92, 0.125, 113, 0.008, 114, 0.011, 115, 0.008, 118, 1.664, 155, 0.695, 189, 1.75, 190, 4.35, 191, 1.516, 192, 1.516, 193, 1.682, 194, 1.682, 195, 1.516, 196, 2.7, 197, 1.682, 200, 2.345, 201, 1.682, 202, 1.682, 204, 1.884, 205, 1.31, 207, 2.479, 276, 4, 278, 5.385, 279, 3.054, 280, 3.054, 281, 3.054, 282, 4.35, 283, 4.35, 284, 4.35, 285, 4.35, 286, 4.048, 287, 4.35, 288, 4.35, 289, 3.543, 290, 3.543, 291, 3.543, 292, 3.543, 293, 3.543, 294, 3.054, 295, 3.543, 296, 3.543, 297, 4.939, 298, 3.054, 299, 3.475, 300, 3.543, 301, 2.733, 302, 3.543, 303, 3.543, 304, 3.543, 305, 3.543, 306, 3.543, 307, 3.543]], ['title/injectables/AppService.html', [209, 1.057, 288, 2.438]], ['body/injectables/AppService.html', [0, 0.3, 3, 0.188, 4, 0.162, 5, 0.162, 11, 0.485, 26, 2.072, 32, 0.017, 36, 0.552, 42, 1.515, 76, 1.711, 79, 0.215, 92, 0.188, 111, 1.791, 113, 0.012, 114, 0.014, 115, 0.012, 155, 1.042, 209, 1.811, 210, 2.393, 288, 4.178, 308, 4.582, 309, 7.192, 310, 5.314, 311, 5.314, 312, 5.314, 313, 5.314, 314, 4.582]], ['title/controllers/AuthController.html', [116, 1.265, 315, 2.642]], ['body/controllers/AuthController.html', [0, 0.173, 3, 0.109, 4, 0.093, 5, 0.093, 7, 0.448, 11, 0.28, 21, 1.199, 23, 1.906, 25, 2.101, 26, 1.434, 31, 0.492, 32, 0.018, 34, 0.958, 36, 0.463, 59, 1.738, 74, 1.371, 75, 1.254, 76, 1.434, 79, 0.248, 92, 0.109, 101, 2.875, 111, 1.941, 113, 0.007, 114, 0.01, 115, 0.007, 116, 1.941, 118, 1.033, 121, 2.006, 123, 2.875, 131, 3.481, 135, 2.236, 136, 2.369, 137, 2.236, 138, 2.236, 140, 3.741, 150, 1.99, 152, 2.369, 153, 2.156, 154, 1.99, 155, 0.601, 158, 1.99, 159, 1.734, 163, 1.813, 183, 1.311, 231, 2.369, 234, 2.736, 315, 3.134, 316, 2.642, 317, 4.967, 318, 5.761, 319, 3.065, 320, 3.982, 321, 4.455, 322, 3.065, 323, 4.444, 324, 5.761, 325, 6.174, 326, 4.455, 327, 3.481, 328, 5.761, 329, 3.065, 330, 4.455, 331, 3.065, 332, 4.455, 333, 4.455, 334, 2.634, 335, 2.364, 336, 2.969, 337, 2.364, 338, 3.065, 339, 3.436, 340, 3.065, 341, 3.065, 342, 3.134, 343, 3.134, 344, 4.455, 345, 3.065, 346, 3.065]], ['title/modules/AuthModule.html', [189, 1.156, 282, 2.438]], ['body/modules/AuthModule.html', [0, 0.256, 3, 0.161, 4, 0.138, 5, 0.138, 32, 0.017, 79, 0.285, 92, 0.161, 113, 0.01, 114, 0.013, 115, 0.01, 118, 1.966, 155, 0.89, 189, 1.983, 191, 1.943, 192, 1.943, 193, 2.156, 194, 2.156, 195, 1.943, 196, 3.06, 197, 2.156, 200, 2.77, 201, 2.156, 202, 2.156, 207, 2.927, 282, 4.904, 286, 4.35, 294, 3.915, 315, 4.534, 336, 4.072, 337, 3.503, 347, 3.915, 348, 4.541, 349, 3.915, 350, 4.674, 351, 4.541, 352, 4.541, 353, 4.541]], ['title/injectables/AuthService.html', [209, 1.057, 336, 2.124]], ['body/injectables/AuthService.html', [0, 0.218, 3, 0.136, 4, 0.117, 5, 0.117, 7, 0.563, 11, 0.352, 21, 1.599, 26, 1.685, 31, 0.657, 32, 0.018, 36, 0.618, 74, 1.829, 75, 1.672, 76, 1.685, 79, 0.241, 92, 0.136, 111, 1.763, 113, 0.009, 114, 0.012, 115, 0.009, 123, 3.095, 152, 2.783, 155, 0.755, 162, 2.179, 183, 1.648, 209, 1.473, 210, 1.735, 234, 1.829, 334, 3.449, 335, 2.972, 336, 2.96, 342, 4.484, 354, 3.321, 355, 5.232, 356, 5.232, 357, 5.232, 358, 5.232, 359, 5.232, 360, 6.873, 361, 5.232, 362, 5.232, 363, 5.232, 364, 5.232, 365, 3.853, 366, 3.853, 367, 5.232, 368, 3.853, 369, 6.374, 370, 6.374, 371, 5.232, 372, 3.853, 373, 3.853, 374, 3.321, 375, 3.853, 376, 3.853, 377, 3.321, 378, 3.853, 379, 3.853]], ['title/classes/Category.html', [0, 0.212, 380, 2.124]], ['body/classes/Category.html', [0, 0.208, 2, 0.831, 3, 0.131, 4, 0.112, 5, 0.112, 7, 0.539, 8, 2.016, 9, 1.636, 10, 1.564, 11, 0.337, 12, 1.196, 15, 3.967, 19, 1.496, 25, 1.43, 31, 0.75, 32, 0.018, 33, 1.346, 34, 1.412, 35, 2.114, 36, 0.682, 42, 1.474, 43, 1.97, 44, 2.703, 46, 3.575, 47, 3.575, 48, 3.92, 50, 1.365, 53, 2.088, 57, 1.958, 59, 1.308, 79, 0.206, 81, 2.874, 82, 0.869, 92, 0.131, 93, 1.97, 113, 0.008, 114, 0.011, 115, 0.008, 176, 3.92, 262, 2.809, 380, 4.189, 381, 3.182, 382, 6.565, 383, 6.261, 384, 3.92, 385, 3.691, 386, 3.691, 387, 3.691, 388, 5.082, 389, 3.33, 390, 3.691, 391, 3.691, 392, 2.397, 393, 3.691]], ['title/controllers/CategoryController.html', [116, 1.265, 394, 2.642]], ['body/controllers/CategoryController.html', [0, 0.227, 3, 0.142, 4, 0.122, 5, 0.122, 7, 0.786, 11, 0.367, 21, 1.081, 23, 2.303, 26, 1.733, 31, 0.444, 32, 0.018, 34, 0.864, 36, 0.418, 74, 1.237, 75, 1.131, 76, 1.294, 79, 0.263, 92, 0.142, 101, 1.809, 102, 2.556, 111, 1.814, 113, 0.009, 114, 0.012, 115, 0.009, 116, 2.046, 118, 1.354, 120, 2.609, 121, 2.424, 122, 2.863, 123, 2.733, 131, 3.253, 132, 4.152, 135, 2.701, 136, 2.863, 137, 2.701, 138, 2.701, 139, 2.701, 150, 2.609, 152, 2.137, 153, 2.827, 154, 2.609, 155, 0.788, 158, 2.609, 159, 2.273, 161, 2.827, 162, 2.273, 163, 1.635, 234, 1.908, 380, 4.138, 394, 3.787, 395, 3.464, 396, 5.383, 397, 5.383, 398, 4.018, 399, 4.615, 400, 4.018, 401, 4.018, 402, 3.464, 403, 3.668, 404, 3.464, 405, 4.018, 406, 4.018, 407, 4.018, 408, 4.018]], ['title/interfaces/CategoryDTO.html', [399, 2.438, 409, 2.642]], ['body/interfaces/CategoryDTO.html', [3, 0.192, 4, 0.165, 5, 0.165, 11, 0.494, 12, 1.531, 15, 4.372, 31, 0.719, 32, 0.017, 42, 1.769, 92, 0.192, 113, 0.012, 114, 0.014, 115, 0.012, 262, 3.095, 399, 4.223, 409, 3.806, 410, 5.41, 411, 4.665]], ['title/modules/CategoryModule.html', [189, 1.156, 283, 2.438]], ['body/modules/CategoryModule.html', [0, 0.27, 3, 0.17, 4, 0.146, 5, 0.146, 32, 0.017, 79, 0.289, 92, 0.17, 113, 0.011, 114, 0.013, 115, 0.011, 118, 2.033, 155, 0.939, 189, 2.033, 191, 2.048, 192, 2.048, 193, 2.274, 194, 2.274, 195, 2.048, 196, 3.136, 197, 2.274, 200, 2.865, 201, 2.274, 202, 2.274, 204, 2.547, 205, 1.77, 207, 2.403, 283, 4.739, 380, 2.708, 394, 4.647, 403, 4.41, 404, 4.128, 412, 4.128, 413, 4.128, 414, 4.788, 415, 4.788, 416, 4.128, 417, 4.788]], ['title/injectables/CategoryService.html', [209, 1.057, 403, 2.269]], ['body/injectables/CategoryService.html', [0, 0.253, 3, 0.158, 4, 0.136, 5, 0.136, 11, 0.408, 21, 1.555, 26, 1.86, 31, 0.639, 32, 0.017, 36, 0.601, 74, 1.778, 75, 1.626, 76, 1.44, 79, 0.284, 82, 1.053, 92, 0.158, 101, 2.014, 111, 1.508, 113, 0.01, 114, 0.013, 115, 0.01, 123, 2.881, 155, 0.877, 163, 1.821, 183, 2.471, 205, 1.654, 209, 1.626, 210, 2.014, 215, 3.825, 229, 2.703, 231, 2.379, 234, 2.124, 380, 3.268, 399, 4.546, 402, 3.857, 403, 3.491, 416, 3.857, 418, 3.857, 419, 5.777, 420, 4.474, 421, 4.474, 422, 5.777, 423, 5.777, 424, 4.474, 425, 4.474, 426, 4.474, 427, 3.857]], ['title/classes/Currency.html', [0, 0.212, 16, 1.691]], ['body/classes/Currency.html', [0, 0.196, 1, 2.153, 2, 0.782, 3, 0.123, 4, 0.106, 5, 0.106, 7, 0.508, 8, 1.965, 9, 1.57, 10, 1.5, 11, 0.317, 12, 1.147, 16, 3.301, 19, 1.449, 21, 1.729, 26, 1.57, 29, 4.342, 30, 4.706, 31, 0.736, 32, 0.018, 33, 1.048, 34, 1.381, 35, 1.965, 36, 0.692, 42, 1.568, 43, 2.183, 50, 1.286, 53, 1.967, 57, 1.897, 59, 1.255, 76, 1.12, 79, 0.228, 81, 2.758, 82, 0.818, 92, 0.123, 93, 2.183, 102, 1.651, 111, 1.172, 113, 0.008, 114, 0.011, 115, 0.008, 384, 3.76, 428, 2.998, 429, 5.26, 430, 4.955, 431, 6.424, 432, 3.477, 433, 4.875, 434, 3.477, 435, 6.101, 436, 3.477, 437, 3.477, 438, 4.203, 439, 4.203, 440, 3.76, 441, 3.477, 442, 3.477, 443, 3.96, 444, 1.967, 445, 3.477, 446, 2.998, 447, 3.477]], ['title/controllers/CurrencyController.html', [116, 1.265, 448, 2.642]], ['body/controllers/CurrencyController.html', [0, 0.268, 3, 0.168, 4, 0.144, 5, 0.144, 7, 0.693, 11, 0.433, 16, 2.961, 23, 2.565, 26, 1.931, 32, 0.017, 34, 1.02, 36, 0.493, 76, 1.527, 79, 0.243, 92, 0.168, 111, 1.598, 113, 0.011, 114, 0.013, 115, 0.011, 116, 2.216, 118, 1.598, 120, 3.08, 121, 2.7, 122, 3.189, 131, 3.624, 155, 0.93, 162, 2.683, 163, 1.93, 323, 4.625, 448, 4.219, 449, 4.089, 450, 6.91, 451, 5.997, 452, 4.743, 453, 5.17, 454, 3.974, 455, 4.089, 456, 4.743, 457, 4.743]], ['title/classes/CurrencyModel.html', [0, 0.212, 443, 2.642]], ['body/classes/CurrencyModel.html', [0, 0.268, 2, 1.067, 3, 0.168, 4, 0.144, 5, 0.144, 11, 0.433, 12, 1.411, 16, 3.209, 19, 1.693, 21, 1.86, 31, 0.764, 32, 0.017, 33, 1.289, 36, 0.718, 42, 1.627, 74, 1.46, 75, 1.335, 79, 0.192, 92, 0.168, 98, 4.089, 113, 0.011, 114, 0.013, 115, 0.011, 183, 2.029, 187, 3.336, 430, 5.072, 443, 4.219, 458, 4.089, 459, 5.997, 460, 5.997, 461, 4.743, 462, 4.743, 463, 3.658, 464, 4.743, 465, 4.743, 466, 4.743, 467, 4.743]], ['title/modules/CurrencyModule.html', [189, 1.156, 284, 2.438]], ['body/modules/CurrencyModule.html', [0, 0.27, 3, 0.17, 4, 0.146, 5, 0.146, 16, 2.156, 32, 0.017, 79, 0.289, 92, 0.17, 113, 0.011, 114, 0.013, 115, 0.011, 118, 2.033, 155, 0.939, 189, 2.033, 191, 2.048, 192, 2.048, 193, 2.274, 194, 2.274, 195, 2.048, 196, 3.136, 197, 2.274, 200, 2.865, 201, 2.274, 202, 2.274, 204, 2.547, 205, 1.77, 207, 2.403, 284, 4.739, 448, 4.647, 454, 4.41, 455, 4.128, 463, 3.693, 468, 4.128, 469, 4.128, 470, 4.788, 471, 4.788, 472, 4.788]], ['title/injectables/CurrencyService.html', [209, 1.057, 454, 2.269]], ['body/injectables/CurrencyService.html', [0, 0.26, 3, 0.163, 4, 0.14, 5, 0.14, 11, 0.421, 16, 2.923, 21, 1.241, 26, 1.897, 31, 0.51, 32, 0.017, 36, 0.612, 74, 1.419, 75, 1.298, 76, 1.485, 79, 0.277, 82, 1.085, 92, 0.163, 101, 2.076, 111, 1.554, 113, 0.01, 114, 0.013, 115, 0.01, 123, 2.923, 155, 0.904, 163, 1.877, 183, 2.52, 205, 1.705, 209, 1.658, 210, 2.076, 215, 3.869, 217, 5.078, 229, 2.786, 231, 2.453, 233, 3.976, 234, 2.19, 453, 3.976, 454, 3.559, 463, 3.557, 473, 3.976, 474, 6.839, 475, 4.611, 476, 4.611, 477, 4.611, 478, 4.611, 479, 4.611, 480, 4.611]], ['title/classes/Cyclic.html', [0, 0.212, 52, 2.438]], ['body/classes/Cyclic.html', [0, 0.148, 1, 2.278, 2, 0.592, 3, 0.093, 4, 0.08, 5, 0.08, 7, 0.882, 8, 1.721, 9, 1.28, 10, 1.224, 11, 0.24, 12, 0.936, 19, 1.234, 23, 1.701, 31, 0.811, 32, 0.018, 33, 1.388, 34, 1.492, 35, 2.364, 36, 0.721, 42, 1.258, 49, 1.79, 50, 1.47, 52, 4.74, 57, 1.616, 59, 1.024, 65, 3.422, 79, 0.194, 80, 2.159, 82, 0.619, 92, 0.093, 113, 0.006, 114, 0.009, 115, 0.006, 188, 1.589, 262, 2.456, 389, 3.434, 392, 1.707, 444, 1.487, 481, 2.267, 482, 3.373, 483, 3.373, 484, 4.134, 485, 3.113, 486, 4.795, 487, 3.053, 488, 2.629, 489, 3.124, 490, 2.629, 491, 2.582, 492, 2.629, 493, 2.582, 494, 2.629, 495, 2.629, 496, 2.797, 497, 3.976, 498, 3.976, 499, 2.629, 500, 2.407, 501, 2.629, 502, 1.701, 503, 1.701, 504, 2.582, 505, 2.797, 506, 2.629, 507, 3.428, 508, 3.976, 509, 3.428, 510, 3.067, 511, 2.629, 512, 2.629, 513, 2.629, 514, 3.067, 515, 2.629, 516, 2.267]], ['title/classes/Event.html', [0, 0.212, 55, 2.642]], ['body/classes/Event.html', [0, 0.146, 1, 2.266, 2, 0.581, 3, 0.091, 4, 0.079, 5, 0.079, 7, 0.876, 8, 1.706, 9, 1.263, 10, 1.208, 11, 0.236, 12, 0.924, 19, 1.221, 31, 0.773, 32, 0.018, 33, 1.442, 34, 1.486, 35, 2.344, 36, 0.718, 42, 1.412, 43, 1.839, 44, 2.818, 49, 1.163, 50, 0.955, 55, 5.296, 57, 1.599, 59, 1.01, 79, 0.159, 80, 1.767, 82, 0.608, 92, 0.091, 93, 1.839, 113, 0.006, 114, 0.009, 115, 0.006, 188, 1.561, 262, 2.437, 264, 3.027, 444, 1.462, 482, 3.338, 483, 3.338, 484, 4.09, 485, 3.081, 487, 3.03, 489, 2.892, 491, 2.548, 493, 2.548, 496, 3.727, 500, 2.701, 502, 2.566, 503, 2.566, 504, 2.548, 505, 2.761, 507, 3.383, 517, 2.228, 518, 4.744, 519, 4.744, 520, 4.744, 521, 2.584, 522, 2.584, 523, 2.584, 524, 2.584, 525, 2.584, 526, 3.924, 527, 3.924, 528, 2.584, 529, 3.027, 530, 5.298, 531, 2.584, 532, 2.584, 533, 2.584, 534, 3.924, 535, 3.027, 536, 2.584, 537, 3.924, 538, 3.924, 539, 2.584, 540, 2.584, 541, 3.924, 542, 3.383]], ['title/classes/HttpErrorFilter.html', [0, 0.212, 299, 2.642]], ['body/classes/HttpErrorFilter.html', [0, 0.24, 2, 0.955, 3, 0.15, 4, 0.129, 5, 0.19, 7, 0.62, 11, 0.387, 21, 1.143, 26, 1.798, 31, 0.469, 32, 0.017, 36, 0.441, 74, 1.307, 75, 1.195, 76, 1.367, 79, 0.172, 92, 0.15, 101, 3.1, 102, 2.016, 113, 0.009, 114, 0.012, 115, 0.009, 121, 2.514, 155, 0.832, 212, 2.757, 227, 4.304, 299, 3.928, 301, 4.307, 430, 3.275, 543, 4.814, 544, 3.66, 545, 5.583, 546, 5.583, 547, 4.814, 548, 4.814, 549, 6.238, 550, 5.112, 551, 5.583, 552, 6.238, 553, 6.627, 554, 4.246, 555, 4.246, 556, 4.246, 557, 4.246, 558, 4.246, 559, 4.246, 560, 4.246, 561, 4.246, 562, 4.246, 563, 5.583, 564, 4.246, 565, 4.246, 566, 4.246, 567, 4.246, 568, 4.246, 569, 4.246, 570, 4.246, 571, 2.987, 572, 4.246, 573, 4.246, 574, 4.246, 575, 4.246]], ['title/classes/Instalment.html', [0, 0.212, 60, 2.269]], ['body/classes/Instalment.html', [0, 0.149, 1, 2.378, 2, 0.593, 3, 0.093, 4, 0.08, 5, 0.163, 7, 0.883, 8, 1.723, 9, 1.282, 10, 1.225, 11, 0.24, 12, 0.937, 19, 1.236, 31, 0.797, 32, 0.018, 33, 1.299, 34, 1.492, 35, 2.283, 36, 0.721, 42, 1.422, 43, 1.544, 49, 1.793, 50, 1.775, 53, 1.49, 57, 1.617, 59, 1.377, 60, 4.459, 75, 1.12, 79, 0.217, 80, 2.161, 81, 2.252, 82, 0.62, 92, 0.093, 93, 1.544, 113, 0.006, 114, 0.009, 115, 0.006, 188, 1.592, 262, 2.458, 389, 3.436, 392, 1.71, 444, 1.49, 482, 3.377, 483, 3.377, 485, 3.117, 487, 3.055, 489, 2.909, 491, 2.585, 493, 2.585, 500, 1.793, 502, 1.703, 503, 1.703, 504, 2.585, 509, 3.432, 510, 3.071, 516, 2.271, 576, 2.271, 577, 5.35, 578, 4.8, 579, 2.634, 580, 2.634, 581, 2.634, 582, 3.071, 583, 2.634, 584, 2.032, 585, 3.432, 586, 2.634, 587, 3.432, 588, 3.432, 589, 3.432, 590, 2.634, 591, 3.764, 592, 2.634, 593, 2.634, 594, 2.634, 595, 2.634, 596, 3.071, 597, 2.634, 598, 2.634, 599, 2.634, 600, 2.634]], ['title/classes/InstalmentDate.html', [0, 0.212, 591, 2.642]], ['body/classes/InstalmentDate.html', [0, 0.21, 2, 0.839, 3, 0.132, 4, 0.113, 5, 0.113, 7, 0.545, 8, 2.024, 9, 1.647, 10, 1.575, 11, 0.34, 12, 1.204, 19, 1.504, 31, 0.752, 32, 0.018, 33, 1.352, 34, 1.417, 35, 2.244, 36, 0.685, 49, 1.679, 50, 1.378, 57, 1.968, 59, 1.317, 60, 4.621, 79, 0.207, 80, 2.304, 82, 0.878, 89, 2.876, 92, 0.132, 113, 0.008, 114, 0.011, 115, 0.008, 487, 3.504, 489, 3.243, 500, 2.304, 502, 2.189, 503, 2.189, 510, 3.946, 591, 3.599, 601, 3.214, 602, 6.588, 603, 3.728, 604, 6.12, 605, 3.728, 606, 3.728, 607, 3.728, 608, 3.728, 609, 3.728]], ['title/injectables/JwtStrategy.html', [209, 1.057, 350, 2.438]], ['body/injectables/JwtStrategy.html', [0, 0.208, 3, 0.13, 4, 0.112, 5, 0.176, 7, 0.741, 11, 0.336, 21, 1.365, 25, 1.955, 26, 1.633, 31, 0.561, 32, 0.017, 36, 0.527, 74, 1.561, 75, 1.428, 76, 1.186, 79, 0.253, 92, 0.13, 101, 1.658, 102, 1.748, 111, 1.956, 113, 0.008, 114, 0.011, 115, 0.008, 121, 2.816, 123, 2.613, 139, 2.546, 152, 2.698, 155, 0.722, 159, 2.083, 162, 2.083, 163, 1.499, 183, 1.575, 209, 1.428, 210, 1.658, 212, 3.294, 227, 2.391, 228, 2.59, 234, 1.748, 325, 5.845, 336, 3.835, 337, 2.84, 342, 3.569, 350, 3.294, 377, 3.175, 610, 3.175, 611, 5.392, 612, 5.655, 613, 4.374, 614, 3.682, 615, 3.682, 616, 5.073, 617, 6.559, 618, 6.254, 619, 3.682, 620, 4.374, 621, 5.073, 622, 5.073, 623, 3.682, 624, 3.682, 625, 3.682, 626, 3.175, 627, 3.682, 628, 3.682, 629, 3.682, 630, 3.682, 631, 3.682, 632, 3.682, 633, 3.682, 634, 3.682, 635, 3.682, 636, 3.175, 637, 2.59, 638, 3.682, 639, 3.682]], ['title/classes/LoginRegisterDTO.html', [0, 0.212, 320, 2.269]], ['body/classes/LoginRegisterDTO.html', [0, 0.329, 2, 1.022, 3, 0.161, 4, 0.138, 5, 0.138, 7, 0.663, 11, 0.414, 12, 1.373, 25, 2.026, 31, 0.645, 32, 0.017, 34, 1.254, 36, 0.606, 42, 1.601, 79, 0.184, 92, 0.161, 113, 0.01, 114, 0.013, 115, 0.01, 135, 2.927, 136, 3.103, 137, 2.927, 138, 2.927, 139, 2.927, 177, 3.915, 179, 5.029, 180, 4.499, 181, 2.949, 320, 3.525, 339, 4.499, 343, 4.534, 640, 3.915, 641, 5.425, 642, 6.444, 643, 4.541, 644, 5.029, 645, 5.029, 646, 4.499, 647, 4.541]], ['title/classes/Message.html', [0, 0.212, 571, 2.642]], ['body/classes/Message.html', [0, 0.214, 2, 0.854, 3, 0.134, 4, 0.115, 5, 0.115, 7, 1, 8, 2.039, 9, 1.667, 10, 1.594, 11, 0.346, 12, 1.219, 19, 1.518, 31, 0.733, 32, 0.018, 33, 1.113, 34, 1.425, 35, 2.203, 36, 0.689, 42, 1.491, 43, 2.008, 44, 2.754, 57, 1.987, 59, 1.333, 79, 0.154, 82, 0.893, 92, 0.134, 93, 2.008, 113, 0.008, 114, 0.012, 115, 0.008, 262, 2.836, 489, 3.153, 500, 2.332, 502, 2.215, 503, 2.215, 571, 5.3, 637, 3.643, 648, 3.271, 649, 5.715, 650, 3.794, 651, 5.178, 652, 3.794, 653, 3.794, 654, 3.271, 655, 3.794, 656, 3.794, 657, 3.271]], ['title/classes/Notification.html', [0, 0.212, 658, 2.642]], ['body/classes/Notification.html', [0, 0.202, 2, 0.807, 3, 0.127, 4, 0.109, 5, 0.109, 7, 0.982, 8, 1.991, 9, 1.604, 10, 1.533, 11, 0.327, 12, 1.172, 19, 1.473, 25, 1.979, 31, 0.762, 32, 0.018, 33, 1.071, 34, 1.446, 35, 2.221, 36, 0.699, 42, 1.455, 43, 1.931, 49, 1.614, 50, 1.326, 57, 1.928, 59, 1.282, 79, 0.202, 80, 2.243, 82, 0.844, 87, 1.799, 92, 0.127, 93, 1.931, 113, 0.008, 114, 0.011, 115, 0.008, 262, 2.779, 489, 3.106, 500, 2.243, 502, 2.131, 503, 2.131, 658, 5.257, 659, 3.091, 660, 6.497, 661, 3.585, 662, 4.98, 663, 3.585, 664, 3.585, 665, 3.585, 666, 3.841, 667, 3.585, 668, 3.585, 669, 3.585]], ['title/classes/Operation.html', [0, 0.212, 65, 1.783]], ['body/classes/Operation.html', [0, 0.156, 1, 2.312, 2, 0.621, 3, 0.098, 4, 0.084, 5, 0.167, 7, 0.898, 8, 1.764, 9, 1.328, 10, 1.269, 11, 0.252, 12, 0.971, 19, 1.271, 31, 0.813, 32, 0.018, 33, 1.322, 34, 1.488, 35, 2.303, 36, 0.72, 42, 1.448, 43, 1.599, 49, 1.243, 50, 1.02, 57, 1.664, 59, 1.062, 65, 3.526, 75, 1.161, 79, 0.2, 80, 1.857, 82, 0.65, 92, 0.098, 93, 1.599, 113, 0.006, 114, 0.009, 115, 0.006, 188, 1.668, 262, 2.508, 389, 3.39, 392, 1.792, 444, 1.561, 485, 3.206, 487, 3.118, 489, 2.87, 496, 2.901, 500, 2.466, 502, 2.343, 503, 2.343, 504, 2.678, 505, 2.901, 514, 3.181, 529, 3.181, 582, 3.181, 584, 2.129, 585, 3.555, 587, 3.555, 588, 3.555, 589, 3.555, 596, 3.181, 670, 2.379, 671, 4.937, 672, 2.76, 673, 2.76, 674, 2.76, 675, 2.76, 676, 2.76, 677, 4.124, 678, 4.124, 679, 2.76, 680, 2.76, 681, 2.129, 682, 2.76, 683, 2.76, 684, 2.76, 685, 2.76, 686, 3.181, 687, 2.129, 688, 2.129]], ['title/controllers/OperationController.html', [116, 1.265, 689, 2.642]], ['body/controllers/OperationController.html', [0, 0.261, 3, 0.164, 4, 0.141, 5, 0.141, 7, 0.676, 11, 0.422, 23, 2.929, 26, 1.9, 32, 0.017, 34, 0.995, 36, 0.481, 42, 1.089, 65, 3.087, 76, 1.489, 79, 0.263, 92, 0.164, 111, 1.559, 113, 0.01, 114, 0.013, 115, 0.01, 116, 2.19, 118, 1.559, 120, 3.004, 121, 2.658, 122, 3.139, 131, 3.566, 132, 4.552, 154, 3.004, 155, 0.907, 158, 3.004, 159, 2.616, 161, 3.254, 162, 2.616, 163, 1.883, 689, 4.152, 690, 3.988, 691, 6.847, 692, 4.626, 693, 4.626, 694, 3.928, 695, 3.988, 696, 4.626, 697, 4.626, 698, 4.626]], ['title/modules/OperationModule.html', [189, 1.156, 285, 2.438]], ['body/modules/OperationModule.html', [0, 0.27, 3, 0.17, 4, 0.146, 5, 0.146, 32, 0.017, 65, 2.274, 79, 0.289, 92, 0.17, 113, 0.011, 114, 0.013, 115, 0.011, 118, 2.033, 155, 0.939, 189, 2.033, 191, 2.048, 192, 2.048, 193, 2.274, 194, 2.274, 195, 2.048, 196, 3.136, 197, 2.274, 200, 2.865, 201, 2.274, 202, 2.274, 204, 2.547, 205, 1.77, 207, 2.403, 285, 4.739, 689, 4.647, 694, 4.41, 695, 4.128, 699, 4.128, 700, 4.128, 701, 4.788, 702, 4.128, 703, 4.788, 704, 4.788]], ['title/injectables/OperationService.html', [209, 1.057, 694, 2.269]], ['body/injectables/OperationService.html', [0, 0.285, 3, 0.179, 4, 0.153, 5, 0.153, 21, 1.358, 31, 0.558, 32, 0.017, 36, 0.525, 65, 2.396, 74, 1.553, 75, 1.42, 79, 0.286, 82, 1.188, 92, 0.179, 113, 0.011, 114, 0.014, 115, 0.011, 155, 0.989, 163, 2.054, 183, 2.667, 205, 1.866, 209, 1.754, 210, 2.272, 215, 3.996, 229, 3.049, 231, 2.684, 694, 3.767, 702, 4.35, 705, 4.35, 706, 5.046, 707, 5.046, 708, 6.234, 709, 5.046]], ['title/classes/Report.html', [0, 0.212, 67, 2.642]], ['body/classes/Report.html', [0, 0.131, 1, 2.191, 2, 0.524, 3, 0.082, 4, 0.071, 5, 0.071, 7, 0.34, 8, 1.615, 9, 1.166, 10, 1.114, 11, 0.212, 12, 0.852, 13, 4.19, 14, 4.19, 19, 1.144, 22, 3.831, 23, 2.461, 31, 0.764, 32, 0.018, 33, 1.558, 34, 1.47, 35, 2.367, 36, 0.711, 42, 0.852, 49, 1.048, 50, 0.86, 57, 1.498, 59, 0.932, 65, 2.731, 67, 5.149, 79, 0.147, 80, 1.63, 82, 0.548, 92, 0.082, 113, 0.005, 114, 0.008, 115, 0.005, 188, 1.406, 444, 1.316, 482, 3.126, 483, 3.126, 489, 2.936, 491, 2.351, 493, 2.351, 502, 2.461, 503, 2.461, 542, 4.959, 604, 6.364, 710, 2.006, 711, 4.444, 712, 4.444, 713, 4.444, 714, 7.46, 715, 4.444, 716, 4.444, 717, 2.327, 718, 2.327, 719, 3.621, 720, 4.959, 721, 6.209, 722, 2.327, 723, 2.327, 724, 2.327, 725, 2.327, 726, 2.327, 727, 2.327, 728, 3.621, 729, 2.327, 730, 3.621, 731, 2.327, 732, 2.327, 733, 5.752, 734, 2.327, 735, 5.014, 736, 2.327, 737, 3.621]], ['title/classes/Setting.html', [0, 0.212, 738, 2.438]], ['body/classes/Setting.html', [0, 0.189, 1, 2.116, 2, 0.753, 3, 0.118, 4, 0.102, 5, 0.102, 7, 0.489, 8, 1.931, 9, 1.527, 10, 1.46, 11, 0.305, 12, 1.117, 19, 1.419, 25, 1.903, 31, 0.727, 32, 0.017, 33, 1.486, 34, 1.414, 35, 2.225, 36, 0.684, 42, 1.117, 43, 1.297, 46, 3.337, 47, 3.337, 57, 1.857, 59, 1.221, 79, 0.192, 82, 0.787, 87, 1.679, 92, 0.118, 93, 2.137, 113, 0.007, 114, 0.011, 115, 0.007, 314, 4.09, 489, 2.701, 491, 3.08, 493, 3.08, 496, 3.337, 502, 2.029, 503, 2.029, 681, 2.58, 686, 3.659, 687, 2.58, 688, 2.58, 738, 4.271, 739, 2.884, 740, 5.512, 741, 5.512, 742, 5.512, 743, 5.512, 744, 3.345, 745, 6.577, 746, 6.577, 747, 5.997, 748, 5.997, 749, 5.997, 750, 3.345, 751, 3.345, 752, 3.345, 753, 3.345, 754, 4.744, 755, 3.345, 756, 4.744, 757, 4.09, 758, 4.744, 759, 4.744]], ['title/controllers/SettingController.html', [116, 1.265, 760, 2.642]], ['body/controllers/SettingController.html', [0, 0.308, 3, 0.193, 4, 0.166, 5, 0.166, 7, 0.796, 23, 2.795, 32, 0.017, 79, 0.221, 92, 0.193, 113, 0.012, 114, 0.015, 115, 0.012, 116, 2.444, 118, 1.836, 121, 2.942, 122, 3.474, 155, 1.068, 760, 4.596, 761, 4.698, 762, 6.532]], ['title/modules/SettingModule.html', [189, 1.156, 763, 2.642]], ['body/modules/SettingModule.html', [0, 0.27, 3, 0.17, 4, 0.146, 5, 0.146, 32, 0.017, 79, 0.289, 92, 0.17, 113, 0.011, 114, 0.013, 115, 0.011, 118, 2.033, 155, 0.939, 189, 2.033, 191, 2.048, 192, 2.048, 193, 2.274, 194, 2.274, 195, 2.048, 196, 3.136, 197, 2.274, 200, 2.865, 201, 2.274, 202, 2.274, 204, 2.547, 205, 1.77, 207, 2.403, 738, 3.109, 760, 4.647, 763, 5.134, 764, 4.128, 765, 4.128, 766, 4.739, 767, 4.788, 768, 4.128, 769, 4.788, 770, 4.788, 771, 4.788]], ['title/injectables/SettingService.html', [209, 1.057, 766, 2.438]], ['body/injectables/SettingService.html', [0, 0.285, 3, 0.179, 4, 0.153, 5, 0.153, 21, 1.358, 31, 0.558, 32, 0.017, 36, 0.525, 74, 1.553, 75, 1.42, 79, 0.286, 82, 1.188, 92, 0.179, 113, 0.011, 114, 0.014, 115, 0.011, 155, 0.989, 163, 2.054, 183, 2.667, 205, 1.866, 209, 1.754, 210, 2.272, 215, 3.996, 229, 3.049, 231, 2.684, 738, 3.277, 766, 4.048, 768, 4.35, 772, 4.35, 773, 5.046, 774, 5.046, 775, 6.234, 776, 5.046]], ['title/modules/SharedModule.html', [189, 1.156, 286, 2.269]], ['body/modules/SharedModule.html', [0, 0.269, 3, 0.168, 4, 0.145, 5, 0.145, 25, 1.339, 32, 0.017, 79, 0.28, 87, 2.388, 92, 0.168, 113, 0.011, 114, 0.013, 115, 0.011, 155, 0.933, 189, 2.027, 191, 2.035, 192, 2.035, 193, 2.259, 194, 2.259, 195, 2.035, 196, 3.127, 197, 3.127, 200, 2.853, 201, 2.259, 202, 2.259, 204, 2.53, 205, 1.759, 207, 2.388, 286, 4.47, 334, 3.862, 335, 3.67, 777, 4.102, 778, 4.102, 779, 4.102, 780, 4.758, 781, 4.102]], ['title/classes/Subcategory.html', [0, 0.212, 389, 1.997]], ['body/classes/Subcategory.html', [0, 0.195, 2, 0.775, 3, 0.122, 4, 0.105, 5, 0.105, 7, 0.503, 8, 1.957, 9, 1.56, 10, 1.491, 11, 0.314, 12, 1.14, 15, 3.869, 17, 5.239, 19, 1.442, 20, 5.239, 31, 0.782, 32, 0.018, 33, 1.041, 34, 1.428, 35, 1.804, 36, 0.69, 42, 1.43, 43, 1.878, 44, 2.576, 46, 3.407, 47, 3.407, 48, 3.736, 49, 1.551, 50, 2.071, 52, 3.946, 53, 2.74, 57, 1.888, 59, 1.247, 60, 3.672, 79, 0.246, 80, 2.181, 81, 3.168, 82, 0.811, 86, 2.97, 89, 2.657, 92, 0.122, 93, 1.878, 96, 2.97, 100, 2.97, 113, 0.008, 114, 0.011, 115, 0.008, 176, 3.736, 262, 2.739, 380, 3.939, 384, 3.736, 389, 3.815, 427, 2.97, 782, 2.97, 783, 3.445, 784, 3.445, 785, 3.445, 786, 3.445, 787, 3.445, 788, 3.445, 789, 3.445]], ['title/classes/Task.html', [0, 0.212, 790, 2.642]], ['body/classes/Task.html', [0, 0.2, 2, 0.795, 3, 0.125, 4, 0.107, 5, 0.107, 7, 0.978, 8, 1.979, 9, 1.588, 10, 1.518, 11, 0.323, 12, 1.161, 19, 1.462, 31, 0.759, 32, 0.018, 33, 1.507, 34, 1.439, 35, 2.212, 36, 0.696, 42, 1.446, 43, 1.912, 44, 2.623, 50, 1.307, 53, 1.999, 57, 1.914, 59, 1.269, 79, 0.2, 81, 2.789, 82, 0.832, 92, 0.125, 93, 1.912, 113, 0.008, 114, 0.011, 115, 0.008, 261, 4.985, 262, 2.765, 264, 3.803, 790, 5.245, 791, 3.047, 792, 5.679, 793, 4.55, 794, 3.535, 795, 3.535, 796, 4.931, 797, 4.251, 798, 3.535, 799, 3.535, 800, 4.251, 801, 4.251, 802, 4.251, 803, 3.535, 804, 3.535, 805, 3.047, 806, 3.535]], ['title/classes/Template.html', [0, 0.212, 807, 2.642]], ['body/classes/Template.html', [0, 0.177, 2, 0.707, 3, 0.111, 4, 0.096, 5, 0.096, 7, 0.941, 8, 1.877, 9, 1.46, 10, 1.396, 11, 0.287, 12, 1.068, 19, 1.37, 25, 1.913, 31, 0.809, 32, 0.018, 33, 1.253, 34, 1.461, 35, 2.23, 36, 0.707, 42, 1.372, 43, 1.759, 49, 1.415, 50, 1.162, 57, 1.794, 59, 1.168, 65, 3.417, 79, 0.216, 80, 2.042, 82, 0.74, 87, 1.577, 92, 0.111, 93, 1.759, 99, 2.423, 113, 0.007, 114, 0.01, 115, 0.007, 262, 2.644, 389, 3.531, 392, 2.04, 485, 3.456, 487, 3.287, 500, 2.624, 502, 1.94, 503, 1.94, 504, 2.945, 505, 3.191, 514, 3.498, 582, 3.498, 596, 3.498, 681, 2.423, 686, 3.498, 687, 2.423, 688, 2.423, 807, 5.215, 808, 2.709, 809, 3.142, 810, 3.142, 811, 3.142, 812, 3.142, 813, 3.142, 814, 3.142, 815, 3.142, 816, 3.142]], ['title/classes/User.html', [0, 0.212, 25, 1.057]], ['body/classes/User.html', [0, 0.093, 1, 1.922, 2, 0.369, 3, 0.058, 4, 0.05, 5, 0.107, 7, 0.24, 8, 1.317, 9, 0.879, 10, 0.84, 11, 0.15, 12, 0.643, 19, 0.903, 21, 1.223, 25, 2.054, 26, 0.879, 27, 3.024, 28, 2.354, 29, 3.155, 30, 3.155, 31, 0.786, 32, 0.018, 33, 1.254, 34, 1.45, 35, 1.754, 36, 0.723, 42, 1.442, 43, 1.586, 44, 2.609, 50, 1.68, 53, 2.314, 57, 1.182, 59, 0.703, 74, 0.505, 75, 0.461, 76, 1.463, 79, 0.236, 81, 2.57, 82, 0.386, 92, 0.058, 93, 1.586, 101, 0.738, 102, 1.666, 111, 1.378, 113, 0.004, 114, 0.006, 115, 0.004, 123, 1.58, 187, 1.153, 234, 0.779, 238, 1.153, 259, 3.196, 261, 3.504, 270, 1.414, 274, 2.354, 320, 2.472, 343, 2.468, 429, 3.526, 439, 5.03, 440, 4.5, 444, 0.927, 446, 1.414, 489, 2.453, 500, 1.842, 502, 1.75, 503, 2.098, 535, 2.106, 550, 1.265, 584, 1.265, 637, 2.878, 641, 3.783, 644, 3.024, 645, 2.354, 646, 2.106, 654, 2.354, 657, 4.229, 658, 2.878, 666, 2.106, 720, 2.354, 793, 3.537, 805, 1.414, 807, 2.878, 817, 1.414, 818, 3.508, 819, 4.543, 820, 3.024, 821, 3.024, 822, 3.508, 823, 3.508, 824, 3.024, 825, 4.543, 826, 4.09, 827, 3.508, 828, 4.5, 829, 4.09, 830, 4.09, 831, 4.09, 832, 4.09, 833, 1.64, 834, 1.64, 835, 2.73, 836, 1.64, 837, 2.354, 838, 2.73, 839, 1.64, 840, 2.354, 841, 1.64, 842, 4.09, 843, 1.64, 844, 1.64, 845, 2.354, 846, 1.64, 847, 1.64, 848, 2.73, 849, 1.64, 850, 2.73, 851, 1.64, 852, 2.354, 853, 1.64, 854, 1.64, 855, 2.73, 856, 1.64, 857, 3.508, 858, 1.64, 859, 2.73, 860, 4.09, 861, 1.64, 862, 1.64, 863, 1.64, 864, 2.73, 865, 1.64, 866, 1.64, 867, 1.64, 868, 1.64, 869, 3.508, 870, 1.64, 871, 1.64, 872, 2.12, 873, 1.64, 874, 1.64, 875, 1.64, 876, 1.265, 877, 2.106, 878, 1.414, 879, 1.414, 880, 1.64, 881, 1.64, 882, 1.64, 883, 1.64, 884, 2.73, 885, 1.414, 886, 1.64, 887, 1.64, 888, 1.64, 889, 1.64, 890, 1.64, 891, 1.64, 892, 1.64, 893, 1.64]], ['title/controllers/UserController.html', [116, 1.265, 894, 2.642]], ['body/controllers/UserController.html', [0, 0.222, 3, 0.139, 4, 0.12, 5, 0.12, 7, 0.775, 11, 0.359, 21, 1.059, 23, 2.27, 25, 1.989, 26, 1.709, 31, 0.435, 32, 0.017, 33, 1.291, 34, 0.846, 36, 0.409, 59, 1.366, 74, 1.211, 75, 1.107, 76, 1.267, 79, 0.272, 92, 0.139, 111, 1.326, 113, 0.009, 114, 0.012, 115, 0.009, 116, 2.024, 118, 1.326, 120, 2.554, 121, 2.389, 122, 2.822, 131, 3.207, 133, 4.093, 134, 3.899, 135, 2.663, 136, 2.822, 137, 2.663, 138, 2.663, 139, 3.226, 140, 3.446, 150, 3.446, 152, 3.194, 153, 2.767, 154, 2.554, 155, 0.771, 158, 2.554, 159, 2.225, 161, 2.767, 162, 2.225, 163, 1.601, 327, 4.401, 334, 3.014, 872, 2.377, 876, 3.034, 894, 3.733, 895, 3.391, 896, 4.575, 897, 3.391, 898, 5.306, 899, 3.933, 900, 4.575, 901, 3.391, 902, 3.391, 903, 3.933, 904, 3.933, 905, 3.933]], ['title/classes/UserDto.html', [0, 0.212, 327, 2.269]], ['body/classes/UserDto.html', [0, 0.337, 2, 0.874, 3, 0.137, 4, 0.118, 5, 0.118, 7, 0.567, 11, 0.354, 12, 1.238, 21, 1.721, 25, 2.067, 31, 0.761, 32, 0.018, 34, 1.375, 36, 0.665, 42, 1.505, 79, 0.242, 92, 0.137, 113, 0.009, 114, 0.012, 115, 0.009, 135, 2.64, 136, 2.798, 137, 2.64, 138, 2.64, 139, 2.64, 180, 5.154, 181, 2.521, 327, 3.178, 489, 3.009, 820, 5.143, 821, 5.143, 824, 5.143, 828, 5.528, 840, 4.535, 845, 4.535, 852, 4.535, 879, 3.347, 906, 3.347, 907, 3.883, 908, 3.883, 909, 3.883, 910, 3.883, 911, 3.883, 912, 3.883, 913, 5.26, 914, 3.883, 915, 5.965, 916, 2.995, 917, 3.883]], ['title/classes/UserModel.html', [0, 0.212, 872, 2.269]], ['body/classes/UserModel.html', [0, 0.29, 2, 1.155, 3, 0.182, 4, 0.156, 5, 0.156, 11, 0.468, 12, 1.483, 19, 1.754, 21, 1.381, 25, 2.053, 31, 0.696, 32, 0.017, 33, 1.354, 36, 0.655, 74, 1.58, 75, 1.444, 79, 0.208, 92, 0.182, 99, 3.959, 113, 0.011, 114, 0.014, 115, 0.011, 183, 2.196, 187, 3.611, 872, 3.806, 918, 4.425, 919, 6.299, 920, 6.299, 921, 3.959]], ['title/modules/UserModule.html', [189, 1.156, 287, 2.438]], ['body/modules/UserModule.html', [0, 0.267, 3, 0.167, 4, 0.144, 5, 0.144, 25, 1.331, 32, 0.017, 79, 0.288, 92, 0.167, 113, 0.011, 114, 0.013, 115, 0.011, 118, 2.017, 155, 0.927, 189, 2.021, 191, 2.022, 192, 2.022, 193, 2.245, 194, 2.245, 195, 2.022, 196, 3.118, 197, 2.842, 200, 2.842, 201, 2.245, 202, 2.245, 204, 2.515, 205, 1.748, 207, 2.373, 287, 4.723, 334, 3.65, 781, 4.076, 894, 4.62, 901, 4.076, 921, 3.647, 922, 4.728, 923, 4.728, 924, 4.728, 925, 5.985, 926, 4.728]], ['title/injectables/UserService.html', [209, 1.057, 334, 1.884]], ['body/injectables/UserService.html', [0, 0.115, 3, 0.072, 4, 0.062, 5, 0.124, 7, 0.744, 11, 0.186, 19, 0.839, 21, 1.462, 23, 1.394, 25, 2.103, 26, 1.049, 31, 0.6, 32, 0.018, 33, 0.876, 36, 0.565, 42, 1.279, 59, 0.839, 74, 1.672, 75, 1.529, 76, 1.64, 79, 0.231, 82, 0.479, 92, 0.072, 101, 2.669, 102, 2.58, 111, 1.716, 113, 0.005, 114, 0.007, 115, 0.005, 122, 1.733, 123, 3.058, 134, 2.116, 135, 2.726, 136, 2.889, 137, 2.726, 138, 1.635, 139, 2.337, 140, 3.849, 152, 3.034, 155, 0.399, 163, 0.829, 183, 1.394, 205, 0.753, 209, 0.917, 210, 0.917, 212, 4.071, 213, 2.809, 215, 2.634, 216, 2.809, 227, 2.645, 228, 1.432, 229, 1.23, 231, 1.083, 232, 1.755, 234, 2.814, 238, 3.275, 241, 1.571, 317, 2.809, 320, 3.447, 327, 4.056, 334, 1.635, 339, 3.591, 342, 2.866, 343, 4.013, 550, 1.571, 636, 2.809, 641, 5.108, 646, 2.513, 837, 4.684, 872, 1.23, 876, 1.571, 877, 1.571, 878, 1.755, 885, 1.755, 896, 2.809, 897, 2.809, 900, 2.809, 902, 1.755, 921, 1.571, 927, 1.755, 928, 3.258, 929, 3.258, 930, 3.258, 931, 3.258, 932, 2.036, 933, 2.036, 934, 3.258, 935, 2.036, 936, 3.258, 937, 4.656, 938, 3.258, 939, 4.656, 940, 3.258, 941, 3.258, 942, 3.258, 943, 3.258, 944, 2.036, 945, 3.258, 946, 2.036, 947, 3.258, 948, 3.258, 949, 2.036, 950, 3.258, 951, 3.258, 952, 2.036, 953, 3.258, 954, 4.074, 955, 3.258, 956, 3.258, 957, 3.258, 958, 2.036, 959, 3.258, 960, 2.036, 961, 2.036, 962, 2.036, 963, 2.036, 964, 2.036, 965, 2.036, 966, 2.036, 967, 2.036, 968, 2.036, 969, 2.036, 970, 2.036, 971, 2.036, 972, 2.036, 973, 2.036, 974, 2.036, 975, 2.036, 976, 2.036, 977, 2.036, 978, 2.036, 979, 2.036, 980, 2.036, 981, 2.036]], ['title/classes/Userstasks.html', [0, 0.212, 793, 2.438]], ['body/classes/Userstasks.html', [0, 0.206, 2, 0.822, 3, 0.129, 4, 0.111, 5, 0.111, 7, 0.534, 8, 2.007, 9, 1.625, 10, 1.553, 11, 0.334, 12, 1.188, 19, 1.488, 25, 1.988, 31, 0.766, 32, 0.018, 33, 1.34, 34, 1.407, 35, 2.107, 36, 0.68, 49, 2.273, 50, 1.866, 59, 1.299, 79, 0.234, 80, 2.603, 82, 0.86, 87, 1.834, 92, 0.129, 113, 0.008, 114, 0.011, 115, 0.008, 134, 3.754, 500, 2.273, 502, 2.667, 503, 2.667, 529, 3.893, 790, 5.107, 793, 3.278, 797, 5.64, 800, 4.351, 801, 4.351, 802, 4.351, 982, 3.151, 983, 5.047, 984, 5.781, 985, 5.781, 986, 3.655, 987, 5.781, 988, 3.655, 989, 3.655, 990, 3.655, 991, 3.655, 992, 3.655, 993, 3.655, 994, 3.655, 995, 3.655, 996, 3.655]], ['title/injectables/ValidationPipe.html', [209, 1.057, 997, 2.896]], ['body/injectables/ValidationPipe.html', [0, 0.289, 3, 0.104, 4, 0.089, 5, 0.156, 7, 0.748, 11, 0.268, 21, 1.519, 26, 1.389, 31, 0.566, 32, 0.018, 33, 0.631, 36, 0.586, 42, 0.69, 74, 1.736, 75, 1.588, 76, 2.024, 79, 0.207, 92, 0.104, 101, 2.54, 102, 2.048, 111, 2.19, 113, 0.007, 114, 0.01, 115, 0.007, 121, 1.942, 123, 2.304, 133, 3.327, 135, 2.165, 137, 2.568, 139, 2.165, 150, 1.904, 152, 2.294, 155, 0.575, 181, 1.904, 209, 1.214, 210, 1.321, 212, 3.664, 227, 3.323, 228, 2.063, 231, 3.62, 234, 1.393, 238, 3.035, 241, 3.327, 323, 3.327, 440, 3.947, 487, 3.457, 500, 2.54, 547, 5.42, 548, 2.528, 611, 3.719, 613, 2.528, 620, 3.719, 637, 3.6, 916, 2.262, 997, 3.327, 998, 2.528, 999, 4.314, 1000, 4.314, 1001, 4.314, 1002, 4.314, 1003, 4.314, 1004, 4.314, 1005, 2.933, 1006, 4.314, 1007, 4.314, 1008, 5.117, 1009, 4.314, 1010, 2.933, 1011, 4.314, 1012, 4.314, 1013, 4.314, 1014, 2.933, 1015, 5.117, 1016, 4.314, 1017, 4.864, 1018, 5.642, 1019, 2.933, 1020, 4.314, 1021, 2.933, 1022, 2.933, 1023, 2.933, 1024, 4.314, 1025, 2.933, 1026, 2.933, 1027, 2.933, 1028, 2.933, 1029, 2.933, 1030, 3.719, 1031, 2.933, 1032, 2.933, 1033, 2.933, 1034, 2.933, 1035, 2.933, 1036, 2.933, 1037, 2.933, 1038, 2.528, 1039, 2.933]], ['title/coverage.html', [1040, 3.966]], ['body/coverage.html', [0, 0.428, 1, 1.005, 5, 0.087, 6, 2.456, 10, 0.877, 16, 1.283, 25, 0.802, 31, 0.315, 32, 0.017, 52, 1.85, 55, 2.004, 59, 0.733, 60, 1.722, 65, 1.353, 67, 2.004, 72, 1.722, 78, 1.722, 102, 1.353, 113, 0.006, 114, 0.009, 115, 0.006, 116, 2.229, 117, 2.004, 119, 2.456, 156, 1.722, 171, 2.456, 182, 2.456, 195, 1.219, 209, 1.934, 211, 2.456, 259, 2.004, 260, 2.456, 276, 2.004, 277, 2.456, 288, 1.85, 299, 2.004, 301, 2.198, 308, 2.456, 315, 2.004, 316, 2.456, 320, 1.722, 327, 1.722, 334, 1.43, 336, 1.612, 350, 1.85, 354, 2.456, 380, 1.612, 381, 2.456, 389, 1.515, 394, 2.004, 395, 2.456, 399, 1.85, 403, 1.722, 409, 2.004, 411, 2.456, 418, 2.456, 428, 2.456, 443, 2.004, 448, 2.004, 449, 2.456, 454, 1.722, 458, 2.456, 473, 2.456, 481, 2.456, 517, 2.456, 543, 2.456, 544, 2.456, 571, 2.004, 576, 2.456, 591, 2.004, 601, 2.456, 610, 2.456, 640, 2.456, 648, 2.456, 658, 2.004, 659, 2.456, 666, 5.378, 670, 2.456, 689, 2.004, 690, 2.456, 694, 1.722, 705, 2.456, 710, 2.456, 738, 1.85, 739, 2.456, 760, 2.004, 761, 2.456, 766, 1.85, 772, 2.456, 782, 2.456, 790, 2.004, 791, 2.456, 793, 1.85, 807, 2.004, 808, 2.456, 817, 2.456, 872, 1.722, 894, 2.004, 895, 2.456, 906, 2.456, 918, 2.456, 927, 2.456, 982, 2.456, 997, 2.198, 998, 2.456, 1030, 6.011, 1040, 2.198, 1041, 2.849, 1042, 2.849, 1043, 2.849, 1044, 4.222, 1045, 2.849, 1046, 2.849, 1047, 5.941, 1048, 2.849, 1049, 2.849, 1050, 5.563, 1051, 5.031, 1052, 4.222, 1053, 5.031, 1054, 4.222, 1055, 2.849, 1056, 2.849, 1057, 4.222, 1058, 2.849, 1059, 5.563, 1060, 2.849, 1061, 2.849, 1062, 2.849, 1063, 2.849, 1064, 2.849, 1065, 4.222, 1066, 2.849, 1067, 2.849, 1068, 2.849, 1069, 2.456, 1070, 2.849, 1071, 2.849, 1072, 5.563, 1073, 5.563, 1074, 2.849, 1075, 2.849, 1076, 2.849, 1077, 2.849, 1078, 2.849, 1079, 2.849, 1080, 2.849, 1081, 2.849, 1082, 2.849, 1083, 2.849, 1084, 2.849, 1085, 2.849, 1086, 2.849, 1087, 2.849, 1088, 2.849]], ['title/dependencies.html', [192, 1.934, 1089, 3.128]], ['body/dependencies.html', [0, 0.348, 32, 0.018, 82, 1.168, 113, 0.011, 114, 0.014, 115, 0.011, 155, 0.973, 159, 2.807, 181, 3.222, 192, 2.123, 205, 1.835, 298, 4.278, 374, 4.278, 612, 4.278, 626, 5.319, 877, 3.828, 916, 3.828, 1017, 4.278, 1090, 6.714, 1091, 4.962, 1092, 4.962, 1093, 4.962, 1094, 4.962, 1095, 4.962, 1096, 4.962, 1097, 4.962, 1098, 4.962, 1099, 4.962, 1100, 4.962, 1101, 4.962, 1102, 4.962, 1103, 4.962, 1104, 4.962, 1105, 4.962, 1106, 4.962, 1107, 4.962, 1108, 4.962, 1109, 4.962, 1110, 4.962, 1111, 4.962]], ['title/miscellaneous/enumerations.html', [1112, 2.2, 1113, 3.898]], ['body/miscellaneous/enumerations.html', [11, 0.501, 15, 4.24, 32, 0.017, 71, 5.657, 113, 0.012, 114, 0.015, 115, 0.012, 487, 3.732, 828, 5.061, 1112, 3.862, 1113, 4.733, 1114, 6.561, 1115, 5.49, 1116, 6.561, 1117, 6.561, 1118, 6.561, 1119, 5.49, 1120, 5.49, 1121, 5.49]], ['title/miscellaneous/functions.html', [1112, 2.2, 1122, 3.898]], ['body/miscellaneous/functions.html', [11, 0.541, 32, 0.015, 113, 0.013, 114, 0.015, 115, 0.013, 195, 3.099, 1069, 5.107, 1112, 4.167, 1122, 5.107, 1123, 5.924]], ['title/index.html', [11, 0.285, 1124, 3.128, 1125, 3.128]], ['body/index.html', [4, 0.134, 7, 0.644, 32, 0.017, 113, 0.01, 114, 0.013, 115, 0.01, 215, 2.493, 649, 3.8, 757, 4.933, 1038, 3.8, 1040, 3.4, 1126, 4.408, 1127, 4.408, 1128, 5.722, 1129, 4.408, 1130, 4.408, 1131, 4.408, 1132, 4.408, 1133, 4.408, 1134, 4.408, 1135, 4.408, 1136, 4.408, 1137, 4.408, 1138, 6.353, 1139, 4.408, 1140, 4.408, 1141, 4.408, 1142, 7.27, 1143, 4.408, 1144, 4.408, 1145, 4.408, 1146, 7.141, 1147, 4.408, 1148, 4.408, 1149, 4.408, 1150, 4.408, 1151, 4.408, 1152, 4.408, 1153, 5.722, 1154, 5.722, 1155, 4.408, 1156, 4.408, 1157, 4.408, 1158, 5.722, 1159, 5.722, 1160, 4.408, 1161, 4.408, 1162, 4.408, 1163, 4.408, 1164, 4.408, 1165, 3.8, 1166, 4.408, 1167, 4.408, 1168, 4.408, 1169, 4.408, 1170, 4.408, 1171, 4.408, 1172, 4.408, 1173, 4.408, 1174, 4.408, 1175, 4.408, 1176, 4.408, 1177, 4.408, 1178, 4.408, 1179, 4.408, 1180, 4.408, 1181, 4.408]], ['title/modules.html', [191, 2.2]], ['body/modules.html', [32, 0.014, 113, 0.011, 114, 0.014, 115, 0.011, 190, 3.344, 191, 2.203, 278, 3.623, 282, 3.344, 283, 3.344, 284, 3.344, 285, 3.344, 286, 3.112, 287, 3.344, 763, 3.623, 1165, 6.601, 1182, 7.656, 1183, 7.656, 1184, 7.656]], ['title/overview.html', [1185, 4.433]], ['body/overview.html', [2, 0.845, 32, 0.017, 113, 0.008, 114, 0.011, 115, 0.008, 118, 1.266, 156, 3.544, 189, 1.156, 190, 4.289, 191, 1.607, 192, 1.607, 193, 1.784, 194, 1.784, 195, 1.607, 196, 1.784, 197, 1.784, 198, 3.238, 199, 3.238, 200, 2.442, 201, 1.784, 202, 1.784, 210, 1.691, 278, 5.385, 279, 3.238, 280, 3.238, 281, 3.238, 282, 4.684, 283, 4.289, 284, 4.289, 285, 4.289, 286, 4.22, 287, 4.289, 288, 3.808, 334, 3.569, 336, 3.317, 347, 3.238, 349, 3.238, 350, 3.808, 403, 3.544, 409, 2.642, 412, 3.238, 413, 3.238, 438, 3.238, 454, 3.544, 468, 3.238, 469, 3.238, 535, 2.897, 694, 3.544, 699, 3.238, 700, 3.238, 763, 4.437, 764, 3.238, 765, 3.238, 766, 3.808, 777, 3.238, 778, 3.238, 779, 3.238, 1185, 3.238, 1186, 3.756, 1187, 3.756, 1188, 3.756]]],
    'invertedIndex': [['', {
      '_index': 32, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
        'dependencies.html': {},
        'miscellaneous/enumerations.html': {},
        'miscellaneous/functions.html': {},
        'index.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['0', {
      '_index': 1030,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {}, 'coverage.html': {} },
    }], ['0.1.13', { '_index': 1106, 'title': {}, 'body': { 'dependencies.html': {} } }], ['0.11.0', {
      '_index': 1099,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['0.2.21', { '_index': 1111, 'title': {}, 'body': { 'dependencies.html': {} } }], ['0.2.3', {
      '_index': 1098,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['0.25.1', { '_index': 1097, 'title': {}, 'body': { 'dependencies.html': {} } }], ['0.4.1', {
      '_index': 1103,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['0/1', { '_index': 1052, 'title': {}, 'body': { 'coverage.html': {} } }], ['0/2', {
      '_index': 1053,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['0/3', { '_index': 1047, 'title': {}, 'body': { 'coverage.html': {} } }], ['0/5', {
      '_index': 1062,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['1', {
      '_index': 535,
      'title': {},
      'body': { 'classes/Event.html': {}, 'classes/User.html': {}, 'overview.html': {} },
    }], ['1/1', { '_index': 1076, 'title': {}, 'body': { 'coverage.html': {} } }], ['1/2', {
      '_index': 1078,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['10', { '_index': 1188, 'title': {}, 'body': { 'overview.html': {} } }], ['10/12', {
      '_index': 1074,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['10/13', { '_index': 1068, 'title': {}, 'body': { 'coverage.html': {} } }], ['100', {
      '_index': 666,
      'title': {},
      'body': { 'classes/Notification.html': {}, 'classes/User.html': {}, 'coverage.html': {} },
    }], ['1000', { '_index': 651, 'title': {}, 'body': { 'classes/Message.html': {} } }], ['11/13', {
      '_index': 1064,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['12/13', { '_index': 1066, 'title': {}, 'body': { 'coverage.html': {} } }], ['13/14', {
      '_index': 1075,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['14/24', { '_index': 1086, 'title': {}, 'body': { 'coverage.html': {} } }], ['150', {
      '_index': 596,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {}, 'classes/Template.html': {} },
    }], ['2.17.1', { '_index': 1102, 'title': {}, 'body': { 'dependencies.html': {} } }], ['2/2', {
      '_index': 1059,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['2/3', { '_index': 1058, 'title': {}, 'body': { 'coverage.html': {} } }], ['20', {
      '_index': 384,
      'title': {},
      'body': { 'classes/Category.html': {}, 'classes/Currency.html': {}, 'classes/Subcategory.html': {} },
    }], ['200', { '_index': 662, 'title': {}, 'body': { 'classes/Notification.html': {} } }], ['25', {
      '_index': 438,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'overview.html': {} },
    }], ['3', { '_index': 433, 'title': {}, 'body': { 'classes/Currency.html': {} } }], ['3.0.0', {
      '_index': 1108,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['3/3', { '_index': 1054, 'title': {}, 'body': { 'coverage.html': {} } }], ['3/4', {
      '_index': 1056,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['3/5', { '_index': 1080, 'title': {}, 'body': { 'coverage.html': {} } }], ['300', {
      '_index': 582,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {}, 'classes/Template.html': {} },
    }], ['4.0.0', { '_index': 1104, 'title': {}, 'body': { 'dependencies.html': {} } }], ['4/4', {
      '_index': 1043,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['4/5', { '_index': 1049, 'title': {}, 'body': { 'coverage.html': {} } }], ['4/6', {
      '_index': 1087,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['4/7', { '_index': 1082, 'title': {}, 'body': { 'coverage.html': {} } }], ['43', {
      '_index': 1045,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['45', {
      '_index': 44,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Event.html': {},
        'classes/Message.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/User.html': {},
      },
    }], ['5/5', { '_index': 1044, 'title': {}, 'body': { 'coverage.html': {} } }], ['5/6', {
      '_index': 1051,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['5/7', { '_index': 1061, 'title': {}, 'body': { 'coverage.html': {} } }], ['50', {
      '_index': 1077,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['500', {
      '_index': 264,
      'title': {},
      'body': { 'classes/Achievement.html': {}, 'classes/Event.html': {}, 'classes/Task.html': {} },
    }], ['57', { '_index': 1081, 'title': {}, 'body': { 'coverage.html': {} } }], ['58', {
      '_index': 1085,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['6', { '_index': 754, 'title': {}, 'body': { 'classes/Setting.html': {} } }], ['6.1.1', {
      '_index': 1091,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['6.10.12', { '_index': 1090, 'title': {}, 'body': { 'dependencies.html': {} } }], ['6.2.0', {
      '_index': 1094,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['6.5.3', { '_index': 1110, 'title': {}, 'body': { 'dependencies.html': {} } }], ['6/6', {
      '_index': 1071,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['6/7', { '_index': 1073, 'title': {}, 'body': { 'coverage.html': {} } }], ['60', {
      '_index': 1079,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['66', { '_index': 1057, 'title': {}, 'body': { 'coverage.html': {} } }], ['7/16', {
      '_index': 1046,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['7/9', { '_index': 1084, 'title': {}, 'body': { 'coverage.html': {} } }], ['71', {
      '_index': 1060,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['75', { '_index': 1055, 'title': {}, 'body': { 'coverage.html': {} } }], ['76', {
      '_index': 1067,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['77', { '_index': 1083, 'title': {}, 'body': { 'coverage.html': {} } }], ['8', {
      '_index': 1187,
      'title': {},
      'body': { 'overview.html': {} },
    }], ['8.3.5', { '_index': 1096, 'title': {}, 'body': { 'dependencies.html': {} } }], ['8.5.1', {
      '_index': 1100,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['80', { '_index': 1048, 'title': {}, 'body': { 'coverage.html': {} } }], ['83', {
      '_index': 1050,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['84', { '_index': 1063, 'title': {}, 'body': { 'coverage.html': {} } }], ['85', {
      '_index': 1072,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['9', { '_index': 1186, 'title': {}, 'body': { 'overview.html': {} } }], ['92', {
      '_index': 1065,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['98', { '_index': 855, 'title': {}, 'body': { 'classes/User.html': {} } }], ['acceptance', {
      '_index': 508,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['access', {
      '_index': 635,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['account', {
      '_index': 1,
      'title': { 'classes/Account.html': {} },
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/User.html': {},
        'coverage.html': {},
      },
    }], ['account.balance', {
      '_index': 107,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['account.budget', {
      '_index': 105,
      'title': {},
      'body': { 'classes/Account.html': {}, 'injectables/AccountService.html': {} },
    }], ['account.controller', {
      '_index': 206,
      'title': {},
      'body': { 'modules/AccountModule.html': {} },
    }], ['account.currency', {
      '_index': 110,
      'title': {},
      'body': { 'classes/Account.html': {}, 'injectables/AccountService.html': {} },
    }], ['account.dto', {
      '_index': 90,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
      },
    }], ['account.entity', {
      '_index': 186,
      'title': {},
      'body': {
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
      },
    }], ['account.fromdto(user', {
      '_index': 246,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['account.id', {
      '_index': 188,
      'title': {},
      'body': {
        'classes/AccountModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
      },
    }], ['account.model', {
      '_index': 91,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
      },
    }], ['account.name', {
      '_index': 103,
      'title': {},
      'body': { 'classes/Account.html': {}, 'injectables/AccountService.html': {} },
    }], ['account.service', {
      '_index': 157,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'modules/AccountModule.html': {} },
    }], ['account.tomodel', {
      '_index': 257,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['account.user', {
      '_index': 109,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['account/account.entity', {
      '_index': 444,
      'title': {},
      'body': {
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/User.html': {},
      },
    }], ['account/account.module', {
      '_index': 304,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['accountcontroller', {
      '_index': 117,
      'title': { 'controllers/AccountController.html': {} },
      'body': { 'controllers/AccountController.html': {}, 'modules/AccountModule.html': {}, 'coverage.html': {} },
    }], ['accountdto', {
      '_index': 72,
      'title': { 'classes/AccountDto.html': {} },
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'injectables/AccountService.html': {},
        'coverage.html': {},
      },
    }], ['accountdto.budget', {
      '_index': 254,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['accountdto.name', {
      '_index': 255,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['accountid', {
      '_index': 145,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['accountmodel', {
      '_index': 78,
      'title': { 'classes/AccountModel.html': {} },
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'coverage.html': {},
      },
    }], ['accountmodel(this', {
      '_index': 112,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['accountmodule', {
      '_index': 190,
      'title': { 'modules/AccountModule.html': {} },
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['accountrepository', {
      '_index': 219,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['accounts', {
      '_index': 429,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'classes/User.html': {} },
    }], ['accounts.id', {
      '_index': 446,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'classes/User.html': {} },
    }], ['accountservice', {
      '_index': 156,
      'title': { 'injectables/AccountService.html': {} },
      'body': {
        'controllers/AccountController.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['achievement', {
      '_index': 259,
      'title': { 'classes/Achievement.html': {} },
      'body': { 'classes/Achievement.html': {}, 'classes/User.html': {}, 'coverage.html': {} },
    }], ['achievement.users', {
      '_index': 881,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['achievement/achievement.entity', {
      '_index': 874,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['achievements', {
      '_index': 818,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['active', {
      '_index': 848,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['addcategory', {
      '_index': 397,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['addcategory(@body', {
      '_index': 407,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['addcategory(categorydto', {
      '_index': 398,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['addoperation', {
      '_index': 691,
      'title': {},
      'body': { 'controllers/OperationController.html': {} },
    }], ['address', {
      '_index': 646,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {}, 'classes/User.html': {}, 'injectables/UserService.html': {} },
    }], ['already', {
      '_index': 966,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['amazing', { '_index': 1166, 'title': {}, 'body': { 'index.html': {} } }], ['amount', {
      '_index': 720,
      'title': {},
      'body': { 'classes/Report.html': {}, 'classes/User.html': {} },
    }], ['angular', { '_index': 1137, 'title': {}, 'body': { 'index.html': {} } }], ['app', {
      '_index': 1144,
      'title': {},
      'body': { 'index.html': {} },
    }], ['app.controller', {
      '_index': 290,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['app.service', {
      '_index': 291,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['app_filter', {
      '_index': 297,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['appcontroller', {
      '_index': 276,
      'title': { 'controllers/AppController.html': {} },
      'body': { 'controllers/AppController.html': {}, 'modules/AppModule.html': {}, 'coverage.html': {} },
    }], ['application', {
      '_index': 314,
      'title': {},
      'body': { 'injectables/AppService.html': {}, 'classes/Setting.html': {} },
    }], ['applications', { '_index': 1134, 'title': {}, 'body': { 'index.html': {} } }], ['appmodule', {
      '_index': 278,
      'title': { 'modules/AppModule.html': {} },
      'body': { 'modules/AppModule.html': {}, 'modules.html': {}, 'overview.html': {} },
    }], ['appservice', {
      '_index': 288,
      'title': { 'injectables/AppService.html': {} },
      'body': {
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['argon2', {
      '_index': 877,
      'title': {},
      'body': { 'classes/User.html': {}, 'injectables/UserService.html': {}, 'dependencies.html': {} },
    }], ['argon2.hash(this.password', {
      '_index': 886,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['argon2.verify(hash', {
      '_index': 961,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['argumentmetadata', {
      '_index': 1018,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['argumentshost', {
      '_index': 553,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['array', {
      '_index': 1008,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['async', {
      '_index': 123,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['auth', {
      '_index': 328,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['auth.controller', {
      '_index': 352,
      'title': {},
      'body': { 'modules/AuthModule.html': {} },
    }], ['auth.dto', {
      '_index': 338,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['auth.service', {
      '_index': 337,
      'title': {},
      'body': {
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/JwtStrategy.html': {},
      },
    }], ['auth/auth.dto', {
      '_index': 878,
      'title': {},
      'body': { 'classes/User.html': {}, 'injectables/UserService.html': {} },
    }], ['auth/auth.module', {
      '_index': 293,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['authcontroller', {
      '_index': 315,
      'title': { 'controllers/AuthController.html': {} },
      'body': { 'controllers/AuthController.html': {}, 'modules/AuthModule.html': {}, 'coverage.html': {} },
    }], ['authguard', {
      '_index': 158,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['authmodule', {
      '_index': 282,
      'title': { 'modules/AuthModule.html': {} },
      'body': { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {}, 'modules.html': {}, 'overview.html': {} },
    }], ['author', { '_index': 1174, 'title': {}, 'body': { 'index.html': {} } }], ['authorization', {
      '_index': 324,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['authservice', {
      '_index': 336,
      'title': { 'injectables/AuthService.html': {} },
      'body': {
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'injectables/JwtStrategy.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['autoryzacje', {
      '_index': 361,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['avatar', { '_index': 819, 'title': {}, 'body': { 'classes/User.html': {} } }], ['average', {
      '_index': 719,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['averageoutcome', {
      '_index': 711,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['await', {
      '_index': 234,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['backers', { '_index': 1167, 'title': {}, 'body': { 'index.html': {} } }], ['balance', {
      '_index': 13,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/AccountDto.html': {}, 'classes/Report.html': {} },
    }], ['beforeinsert', {
      '_index': 869,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['billing', {
      '_index': 745,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['billingperiodend', {
      '_index': 740,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['billingperiodstart', {
      '_index': 741,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['birthdate', {
      '_index': 820,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['birthday', {
      '_index': 840,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['blob', {
      '_index': 585,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {} },
    }], ['blue', {
      '_index': 1118,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['body', {
      '_index': 150,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/UserController.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['body(\'currid', {
      '_index': 167,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['boolean', {
      '_index': 500,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['bootstrap', {
      '_index': 195,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'coverage.html': {},
        'miscellaneous/functions.html': {},
        'overview.html': {},
      },
    }], ['browse', { '_index': 1184, 'title': {}, 'body': { 'modules.html': {} } }], ['browser', {
      '_index': 1182,
      'title': {},
      'body': { 'modules.html': {} },
    }], ['budget', {
      '_index': 14,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/AccountDto.html': {}, 'classes/Report.html': {} },
    }], ['building', { '_index': 1129, 'title': {}, 'body': { 'index.html': {} } }], ['calendar', {
      '_index': 538,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['catch', {
      '_index': 550,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {}, 'classes/User.html': {}, 'injectables/UserService.html': {} },
    }], ['catch(exception', {
      '_index': 551,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['catch(x', {
      '_index': 237,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['categories', {
      '_index': 396,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['category', {
      '_index': 380,
      'title': { 'classes/Category.html': {} },
      'body': {
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Subcategory.html': {},
        'coverage.html': {},
      },
    }], ['category.controller', {
      '_index': 415,
      'title': {},
      'body': { 'modules/CategoryModule.html': {} },
    }], ['category.entity', {
      '_index': 416,
      'title': {},
      'body': { 'modules/CategoryModule.html': {}, 'injectables/CategoryService.html': {} },
    }], ['category.id', {
      '_index': 427,
      'title': {},
      'body': { 'injectables/CategoryService.html': {}, 'classes/Subcategory.html': {} },
    }], ['category.model', {
      '_index': 402,
      'title': {},
      'body': { 'controllers/CategoryController.html': {}, 'injectables/CategoryService.html': {} },
    }], ['category.service', {
      '_index': 404,
      'title': {},
      'body': { 'controllers/CategoryController.html': {}, 'modules/CategoryModule.html': {} },
    }], ['category/category.entity', {
      '_index': 789,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['category/category.module', {
      '_index': 296,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['categorycontroller', {
      '_index': 394,
      'title': { 'controllers/CategoryController.html': {} },
      'body': { 'controllers/CategoryController.html': {}, 'modules/CategoryModule.html': {}, 'coverage.html': {} },
    }], ['categorydto', {
      '_index': 399,
      'title': { 'interfaces/CategoryDTO.html': {} },
      'body': {
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'injectables/CategoryService.html': {},
        'coverage.html': {},
      },
    }], ['categorymodule', {
      '_index': 283,
      'title': { 'modules/CategoryModule.html': {} },
      'body': {
        'modules/AppModule.html': {},
        'modules/CategoryModule.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['categoryrepository', {
      '_index': 422,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['categoryservice', {
      '_index': 403,
      'title': { 'injectables/CategoryService.html': {} },
      'body': {
        'controllers/CategoryController.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['checkhash', {
      '_index': 928,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['checkhash(hash', {
      '_index': 934,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['checks', { '_index': 936, 'title': {}, 'body': { 'injectables/UserService.html': {} } }], ['class', {
      '_index': 0,
      'title': {
        'classes/Account.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'classes/Userstasks.html': {},
      },
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
        'dependencies.html': {},
      },
    }], ['classes', {
      '_index': 2,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'classes/Userstasks.html': {},
        'overview.html': {},
      },
    }], ['cluster_accountmodule', {
      '_index': 198,
      'title': {},
      'body': { 'modules/AccountModule.html': {}, 'overview.html': {} },
    }], ['cluster_accountmodule_providers', {
      '_index': 199,
      'title': {},
      'body': { 'modules/AccountModule.html': {}, 'overview.html': {} },
    }], ['cluster_appmodule', {
      '_index': 279,
      'title': {},
      'body': { 'modules/AppModule.html': {}, 'overview.html': {} },
    }], ['cluster_appmodule_imports', {
      '_index': 280,
      'title': {},
      'body': { 'modules/AppModule.html': {}, 'overview.html': {} },
    }], ['cluster_appmodule_providers', {
      '_index': 281,
      'title': {},
      'body': { 'modules/AppModule.html': {}, 'overview.html': {} },
    }], ['cluster_authmodule', {
      '_index': 347,
      'title': {},
      'body': { 'modules/AuthModule.html': {}, 'overview.html': {} },
    }], ['cluster_authmodule_imports', {
      '_index': 348,
      'title': {},
      'body': { 'modules/AuthModule.html': {} },
    }], ['cluster_authmodule_providers', {
      '_index': 349,
      'title': {},
      'body': { 'modules/AuthModule.html': {}, 'overview.html': {} },
    }], ['cluster_categorymodule', {
      '_index': 412,
      'title': {},
      'body': { 'modules/CategoryModule.html': {}, 'overview.html': {} },
    }], ['cluster_categorymodule_providers', {
      '_index': 413,
      'title': {},
      'body': { 'modules/CategoryModule.html': {}, 'overview.html': {} },
    }], ['cluster_currencymodule', {
      '_index': 468,
      'title': {},
      'body': { 'modules/CurrencyModule.html': {}, 'overview.html': {} },
    }], ['cluster_currencymodule_providers', {
      '_index': 469,
      'title': {},
      'body': { 'modules/CurrencyModule.html': {}, 'overview.html': {} },
    }], ['cluster_operationmodule', {
      '_index': 699,
      'title': {},
      'body': { 'modules/OperationModule.html': {}, 'overview.html': {} },
    }], ['cluster_operationmodule_providers', {
      '_index': 700,
      'title': {},
      'body': { 'modules/OperationModule.html': {}, 'overview.html': {} },
    }], ['cluster_settingmodule', {
      '_index': 764,
      'title': {},
      'body': { 'modules/SettingModule.html': {}, 'overview.html': {} },
    }], ['cluster_settingmodule_providers', {
      '_index': 765,
      'title': {},
      'body': { 'modules/SettingModule.html': {}, 'overview.html': {} },
    }], ['cluster_sharedmodule', {
      '_index': 777,
      'title': {},
      'body': { 'modules/SharedModule.html': {}, 'overview.html': {} },
    }], ['cluster_sharedmodule_exports', {
      '_index': 778,
      'title': {},
      'body': { 'modules/SharedModule.html': {}, 'overview.html': {} },
    }], ['cluster_sharedmodule_providers', {
      '_index': 779,
      'title': {},
      'body': { 'modules/SharedModule.html': {}, 'overview.html': {} },
    }], ['cluster_usermodule', {
      '_index': 922,
      'title': {},
      'body': { 'modules/UserModule.html': {} },
    }], ['cluster_usermodule_providers', {
      '_index': 923,
      'title': {},
      'body': { 'modules/UserModule.html': {} },
    }], ['code', {
      '_index': 430,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'classes/CurrencyModel.html': {}, 'classes/HttpErrorFilter.html': {} },
    }], ['color', {
      '_index': 15,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/AccountDto.html': {},
        'classes/Category.html': {},
        'interfaces/CategoryDTO.html': {},
        'classes/Subcategory.html': {},
        'miscellaneous/enumerations.html': {},
      },
    }], ['column', {
      '_index': 35,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['column(\'blob', {
      '_index': 835,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['column(\'date', {
      '_index': 838,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['column(\'int', {
      '_index': 842,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['column({default', {
      '_index': 654,
      'title': {},
      'body': { 'classes/Message.html': {}, 'classes/User.html': {} },
    }], ['column({length', {
      '_index': 43,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
      },
    }], ['column({type', {
      '_index': 584,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {}, 'classes/User.html': {} },
    }], ['complete', {
      '_index': 802,
      'title': {},
      'body': { 'classes/Task.html': {}, 'classes/Userstasks.html': {} },
    }], ['completed', {
      '_index': 797,
      'title': {},
      'body': { 'classes/Task.html': {}, 'classes/Userstasks.html': {} },
    }], ['conclude', {
      '_index': 621,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['consideration', {
      '_index': 505,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Operation.html': {},
        'classes/Template.html': {},
      },
    }], ['const', {
      '_index': 101,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['constructor', {
      '_index': 183,
      'title': {},
      'body': {
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'injectables/CategoryService.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
      },
    }], ['constructor(account', {
      '_index': 184,
      'title': {},
      'body': { 'classes/AccountModel.html': {} },
    }], ['constructor(accountrepository', {
      '_index': 214,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['constructor(authservice', {
      '_index': 614,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['constructor(categoryrepository', {
      '_index': 420,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['constructor(currency', {
      '_index': 459,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['constructor(currencyrepository', {
      '_index': 475,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['constructor(operationrepository', {
      '_index': 706,
      'title': {},
      'body': { 'injectables/OperationService.html': {} },
    }], ['constructor(private', {
      '_index': 162,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['constructor(settingrepository', {
      '_index': 773,
      'title': {},
      'body': { 'injectables/SettingService.html': {} },
    }], ['constructor(user', {
      '_index': 919,
      'title': {},
      'body': { 'classes/UserModel.html': {} },
    }], ['constructor(userrepository', {
      '_index': 932,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['constructor(userservice', {
      '_index': 365,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['containing', {
      '_index': 138,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
      },
    }], ['contains', {
      '_index': 837,
      'title': {},
      'body': { 'classes/User.html': {}, 'injectables/UserService.html': {} },
    }], ['controller', {
      '_index': 116,
      'title': {
        'controllers/AccountController.html': {},
        'controllers/AppController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'controllers/OperationController.html': {},
        'controllers/SettingController.html': {},
        'controllers/UserController.html': {},
      },
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AppController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'controllers/OperationController.html': {},
        'controllers/SettingController.html': {},
        'controllers/UserController.html': {},
        'coverage.html': {},
      },
    }], ['controller(\'account', {
      '_index': 160,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['controller(\'category', {
      '_index': 405,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['controller(\'currency', {
      '_index': 456,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {} },
    }], ['controller(\'operation', {
      '_index': 696,
      'title': {},
      'body': { 'controllers/OperationController.html': {} },
    }], ['controller(\'user', {
      '_index': 903,
      'title': {},
      'body': { 'controllers/UserController.html': {} },
    }], ['controllers', {
      '_index': 118,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'modules/AccountModule.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'controllers/CategoryController.html': {},
        'modules/CategoryModule.html': {},
        'controllers/CurrencyController.html': {},
        'modules/CurrencyModule.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'controllers/UserController.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['coverage', {
      '_index': 1040,
      'title': { 'coverage.html': {} },
      'body': { 'coverage.html': {}, 'index.html': {} },
    }], ['createaccount', {
      '_index': 124,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['createaccount(userid', {
      '_index': 127,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['createcategory', {
      '_index': 419,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['createcategory(categorydto', {
      '_index': 423,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['createdatecolumn', {
      '_index': 857,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['creates', {
      '_index': 132,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/OperationController.html': {},
      },
    }], ['creating', {
      '_index': 221,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['credentials', {
      '_index': 339,
      'title': {},
      'body': {
        'controllers/AuthController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'injectables/UserService.html': {},
      },
    }], ['crud', {
      '_index': 122,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'controllers/OperationController.html': {},
        'controllers/SettingController.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
      },
    }], ['ctx', {
      '_index': 557,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['ctx.getrequest', {
      '_index': 560,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['ctx.getresponse', {
      '_index': 562,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['currencies', {
      '_index': 453,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {}, 'injectables/CurrencyService.html': {} },
    }], ['currencies.map((currency', {
      '_index': 479,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['currency', {
      '_index': 16,
      'title': { 'classes/Currency.html': {} },
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'coverage.html': {},
      },
    }], ['currency.code', {
      '_index': 467,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['currency.controller', {
      '_index': 471,
      'title': {},
      'body': { 'modules/CurrencyModule.html': {} },
    }], ['currency.entity', {
      '_index': 463,
      'title': {},
      'body': {
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
      },
    }], ['currency.id', {
      '_index': 98,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/CurrencyModel.html': {} },
    }], ['currency.model', {
      '_index': 445,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['currency.name', {
      '_index': 465,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['currency.service', {
      '_index': 455,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {}, 'modules/CurrencyModule.html': {} },
    }], ['currency.tomodel', {
      '_index': 480,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['currency/currency.entity', {
      '_index': 85,
      'title': {},
      'body': { 'classes/Account.html': {}, 'modules/AccountModule.html': {}, 'injectables/AccountService.html': {} },
    }], ['currency/currency.module', {
      '_index': 303,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['currencycontroller', {
      '_index': 448,
      'title': { 'controllers/CurrencyController.html': {} },
      'body': { 'controllers/CurrencyController.html': {}, 'modules/CurrencyModule.html': {}, 'coverage.html': {} },
    }], ['currencymodel', {
      '_index': 443,
      'title': { 'classes/CurrencyModel.html': {} },
      'body': { 'classes/Currency.html': {}, 'classes/CurrencyModel.html': {}, 'coverage.html': {} },
    }], ['currencymodel(this', {
      '_index': 447,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['currencymodule', {
      '_index': 284,
      'title': { 'modules/CurrencyModule.html': {} },
      'body': {
        'modules/AppModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['currencyrepository', {
      '_index': 217,
      'title': {},
      'body': { 'injectables/AccountService.html': {}, 'injectables/CurrencyService.html': {} },
    }], ['currencyservice', {
      '_index': 454,
      'title': { 'injectables/CurrencyService.html': {} },
      'body': {
        'controllers/CurrencyController.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['currid', {
      '_index': 128,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['cyclic', {
      '_index': 52,
      'title': { 'classes/Cyclic.html': {} },
      'body': {
        'classes/Account.html': {},
        'classes/Cyclic.html': {},
        'classes/Subcategory.html': {},
        'coverage.html': {},
      },
    }], ['cyclic/cyclic.entity', {
      '_index': 86,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Subcategory.html': {} },
    }], ['cyclics', {
      '_index': 17,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Subcategory.html': {} },
    }], ['cyclics.id', {
      '_index': 96,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Subcategory.html': {} },
    }], ['dane', {
      '_index': 956,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['dark/light', {
      '_index': 759,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['data', {
      '_index': 135,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['database', {
      '_index': 939,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['date', {
      '_index': 489,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/User.html': {},
        'classes/UserDto.html': {},
      },
    }], ['date().tolocaledatestring', {
      '_index': 567,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['datefrom', {
      '_index': 482,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Report.html': {},
      },
    }], ['dateto', {
      '_index': 483,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Report.html': {},
      },
    }], ['day', {
      '_index': 507,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'classes/Event.html': {} },
    }], ['days', {
      '_index': 496,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Operation.html': {},
        'classes/Setting.html': {},
      },
    }], ['declarations', {
      '_index': 194,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['decorators', {
      '_index': 34,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/Achievement.html': {},
        'controllers/AuthController.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['default', {
      '_index': 657,
      'title': {},
      'body': { 'classes/Message.html': {}, 'classes/User.html': {} },
    }], ['defined', {
      '_index': 36, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'injectables/SettingService.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['delete', {
      '_index': 151,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['delete(\'delete/:id', {
      '_index': 142,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['deleteaccount', {
      '_index': 125,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['deleteaccount(@param(\'id', {
      '_index': 169,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['deleteaccount(accountid', {
      '_index': 141,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['deletes', {
      '_index': 144,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['deleting', {
      '_index': 223,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['dependencies', {
      '_index': 192,
      'title': { 'dependencies.html': {} },
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'dependencies.html': {},
        'overview.html': {},
      },
    }], ['describes', {
      '_index': 9,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['description', {
      '_index': 7, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'index.html': {},
      },
    }], ['development', {
      '_index': 1145,
      'title': {},
      'body': { 'index.html': {} },
    }], ['documentation', {
      '_index': 1041,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['dominant', {
      '_index': 176,
      'title': {},
      'body': { 'classes/AccountDto.html': {}, 'classes/Category.html': {}, 'classes/Subcategory.html': {} },
    }], ['done', {
      '_index': 617,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['done(null', {
      '_index': 638,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['during', {
      '_index': 942,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['e', {
      '_index': 644,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {}, 'classes/User.html': {} },
    }], ['e2e', { '_index': 1155, 'title': {}, 'body': { 'index.html': {} } }], ['edits', {
      '_index': 900,
      'title': {},
      'body': { 'controllers/UserController.html': {}, 'injectables/UserService.html': {} },
    }], ['edituser', {
      '_index': 896,
      'title': {},
      'body': { 'controllers/UserController.html': {}, 'injectables/UserService.html': {} },
    }], ['edituser(@param(\'id', {
      '_index': 904,
      'title': {},
      'body': { 'controllers/UserController.html': {} },
    }], ['edituser(userid', {
      '_index': 897,
      'title': {},
      'body': { 'controllers/UserController.html': {}, 'injectables/UserService.html': {} },
    }], ['efficient', { '_index': 1130, 'title': {}, 'body': { 'index.html': {} } }], ['email', {
      '_index': 343,
      'title': {},
      'body': {
        'controllers/AuthController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
      },
    }], ['empty', {
      '_index': 1011,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['end', {
      '_index': 47,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Category.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
      },
    }], ['ending', {
      '_index': 493,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
      },
    }], ['endpoint', {
      '_index': 131,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['entity', {
      '_index': 8,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['enum', {
      '_index': 860,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['enumerations', {
      '_index': 1113,
      'title': { 'miscellaneous/enumerations.html': {} },
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['err', {
      '_index': 962,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['err.constraints', {
      '_index': 1036,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['err.constraints[property', {
      '_index': 1037,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['error', {
      '_index': 301,
      'title': {},
      'body': { 'modules/AppModule.html': {}, 'classes/HttpErrorFilter.html': {}, 'coverage.html': {} },
    }], ['error(\'hashing', {
      '_index': 887,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['error(\'internal', {
      '_index': 963,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['errorresponse', {
      '_index': 565,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['errors', {
      '_index': 547,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {}, 'injectables/ValidationPipe.html': {} },
    }], ['errors.length', {
      '_index': 1029,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['estimated', { '_index': 541, 'title': {}, 'body': { 'classes/Event.html': {} } }], ['event', {
      '_index': 55,
      'title': { 'classes/Event.html': {} },
      'body': { 'classes/Account.html': {}, 'classes/Event.html': {}, 'coverage.html': {} },
    }], ['event/event.entity', {
      '_index': 84,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['events', { '_index': 18, 'title': {}, 'body': { 'classes/Account.html': {} } }], ['events.id', {
      '_index': 95,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['exception', {
      '_index': 555,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['exception.getstatus', {
      '_index': 564,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['exception.message', {
      '_index': 573,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['exception.message.error', {
      '_index': 572,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['exceptionfilter', {
      '_index': 549,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['exists', {
      '_index': 967,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['experience', {
      '_index': 261,
      'title': {},
      'body': { 'classes/Achievement.html': {}, 'classes/Task.html': {}, 'classes/User.html': {} },
    }], ['expiresin', { '_index': 378, 'title': {}, 'body': { 'injectables/AuthService.html': {} } }], ['export', {
      '_index': 92, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['exports', {
      '_index': 197,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['express', { '_index': 1093, 'title': {}, 'body': { 'dependencies.html': {} } }], ['extends', {
      '_index': 627,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['extractjwt', {
      '_index': 624,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['extractjwt.fromauthheaderasbearertoken', {
      '_index': 631,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['failed', {
      '_index': 1024,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['failure', {
      '_index': 964,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['false', {
      '_index': 637,
      'title': {},
      'body': {
        'injectables/JwtStrategy.html': {},
        'classes/Message.html': {},
        'classes/User.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['feedback', {
      '_index': 622,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['female', {
      '_index': 1121,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['field', { '_index': 1012, 'title': {}, 'body': { 'injectables/ValidationPipe.html': {} } }], ['file', {
      '_index': 5, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
      },
    }], ['filter', {
      '_index': 302,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['filter.ts', {
      '_index': 544,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {}, 'coverage.html': {} },
    }], ['filter.ts:13', {
      '_index': 554,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['filtering', {
      '_index': 545,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['financial', {
      '_index': 312,
      'title': {},
      'body': { 'injectables/AppService.html': {} },
    }], ['findbylogin', {
      '_index': 929,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['findbylogin(userdto', {
      '_index': 945,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['findbypayload', {
      '_index': 930,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['findbypayload(payload', {
      '_index': 948,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['findoneorfail(accountid', {
      '_index': 250,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['findoneorfail(currid', {
      '_index': 243,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['findoneorfail(userid', {
      '_index': 236,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['finds', {
      '_index': 947,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['first', {
      '_index': 845,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['firstname', {
      '_index': 821,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['formaterrors', {
      '_index': 1000,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['formaterrors(errors', {
      '_index': 1004,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['formatted', {
      '_index': 1007,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['formatting', {
      '_index': 546,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['framework', { '_index': 1128, 'title': {}, 'body': { 'index.html': {} } }], ['from/to', {
      '_index': 498,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['fromdto', {
      '_index': 28,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/User.html': {} },
    }], ['fromdto(newuserdto', {
      '_index': 864,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['fromdto(user', {
      '_index': 70,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['front', {
      '_index': 46,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Category.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
      },
    }], ['function', { '_index': 1070, 'title': {}, 'body': { 'coverage.html': {} } }], ['functions', {
      '_index': 1122,
      'title': { 'miscellaneous/functions.html': {} },
      'body': { 'miscellaneous/functions.html': {} },
    }], ['gain', {
      '_index': 267,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['get(\'add', {
      '_index': 697,
      'title': {},
      'body': { 'controllers/OperationController.html': {} },
    }], ['get(\'add\')@useguards(undefined', {
      '_index': 692,
      'title': {},
      'body': { 'controllers/OperationController.html': {} },
    }], ['get(\'all', {
      '_index': 451,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {} },
    }], ['getallcurrency', {
      '_index': 474,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['getcurrencylist', {
      '_index': 450,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {} },
    }], ['gethello', {
      '_index': 309,
      'title': {},
      'body': { 'injectables/AppService.html': {} },
    }], ['getid', { '_index': 830, 'title': {}, 'body': { 'classes/User.html': {} } }], ['getpassword', {
      '_index': 831,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['getting', { '_index': 1124, 'title': { 'index.html': {} }, 'body': {} }], ['global', {
      '_index': 925,
      'title': {},
      'body': { 'modules/UserModule.html': {} },
    }], ['green', {
      '_index': 1117,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['grow', { '_index': 1162, 'title': {}, 'body': { 'index.html': {} } }], ['guarantydays', {
      '_index': 671,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['hash', {
      '_index': 940,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['hashed', {
      '_index': 941,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['hashpassword', {
      '_index': 832,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['heavily', { '_index': 1135, 'title': {}, 'body': { 'index.html': {} } }], ['here', {
      '_index': 1171,
      'title': {},
      'body': { 'index.html': {} },
    }], ['host', {
      '_index': 552,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['host.switchtohttp', {
      '_index': 558,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['howmuchdays', {
      '_index': 518,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['howoften', {
      '_index': 484,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'classes/Event.html': {} },
    }], ['httperrorfilter', {
      '_index': 299,
      'title': { 'classes/HttpErrorFilter.html': {} },
      'body': { 'modules/AppModule.html': {}, 'classes/HttpErrorFilter.html': {}, 'coverage.html': {} },
    }], ['httpexception', {
      '_index': 227,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['httpexception(\'unauthorized', {
      '_index': 634,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['httpexception(\'user', {
      '_index': 965,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['https://nestjs.com', {
      '_index': 1178,
      'title': {},
      'body': { 'index.html': {} },
    }], ['httpstatus', {
      '_index': 228,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['httpstatus.bad_request', {
      '_index': 241,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['httpstatus.unauthorized', {
      '_index': 636,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'injectables/UserService.html': {} },
    }], ['id', {
      '_index': 19,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['identifier', {
      '_index': 59,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/Achievement.html': {},
        'controllers/AuthController.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'coverage.html': {},
      },
    }], ['image', {
      '_index': 588,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {} },
    }], ['implementacje', {
      '_index': 357,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['implementations', {
      '_index': 213,
      'title': {},
      'body': { 'injectables/AccountService.html': {}, 'injectables/UserService.html': {} },
    }], ['implements', {
      '_index': 548,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {}, 'injectables/ValidationPipe.html': {} },
    }], ['import', {
      '_index': 79, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['imports', {
      '_index': 207,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
      },
    }], ['includes', { '_index': 38, 'title': {}, 'body': { 'classes/Account.html': {} } }], ['income', {
      '_index': 737,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['income/outcome', {
      '_index': 514,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'classes/Operation.html': {}, 'classes/Template.html': {} },
    }], ['incomes', { '_index': 39, 'title': {}, 'body': { 'classes/Account.html': {} } }], ['index', {
      '_index': 11, 'title': { 'index.html': {} }, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'miscellaneous/enumerations.html': {},
        'miscellaneous/functions.html': {},
      },
    }], ['info', {
      '_index': 3, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['information', {
      '_index': 139,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'controllers/CategoryController.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['injectable', {
      '_index': 209,
      'title': {
        'injectables/AccountService.html': {},
        'injectables/AppService.html': {},
        'injectables/AuthService.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
      'body': {
        'injectables/AccountService.html': {},
        'injectables/AppService.html': {},
        'injectables/AuthService.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
      },
    }], ['injectables', {
      '_index': 210,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'injectables/AppService.html': {},
        'injectables/AuthService.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
        'overview.html': {},
      },
    }], ['injectrepository', {
      '_index': 229,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'injectables/UserService.html': {},
      },
    }], ['injectrepository(account', {
      '_index': 230,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['injectrepository(category', {
      '_index': 425,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['injectrepository(currency', {
      '_index': 233,
      'title': {},
      'body': { 'injectables/AccountService.html': {}, 'injectables/CurrencyService.html': {} },
    }], ['injectrepository(operation', {
      '_index': 709,
      'title': {},
      'body': { 'injectables/OperationService.html': {} },
    }], ['injectrepository(setting', {
      '_index': 776,
      'title': {},
      'body': { 'injectables/SettingService.html': {} },
    }], ['injectrepository(user', {
      '_index': 232,
      'title': {},
      'body': { 'injectables/AccountService.html': {}, 'injectables/UserService.html': {} },
    }], ['input', {
      '_index': 999,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['inspired', { '_index': 1136, 'title': {}, 'body': { 'index.html': {} } }], ['installation', {
      '_index': 1141,
      'title': {},
      'body': { 'index.html': {} },
    }], ['installrunning', {
      '_index': 1143,
      'title': {},
      'body': { 'index.html': {} },
    }], ['instalment', {
      '_index': 60,
      'title': { 'classes/Instalment.html': {} },
      'body': {
        'classes/Account.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Subcategory.html': {},
        'coverage.html': {},
      },
    }], ['instalment.id', {
      '_index': 609,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['instalment/instalment.entity', {
      '_index': 89,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/InstalmentDate.html': {}, 'classes/Subcategory.html': {} },
    }], ['instalmentdate', {
      '_index': 591,
      'title': { 'classes/InstalmentDate.html': {} },
      'body': { 'classes/Instalment.html': {}, 'classes/InstalmentDate.html': {}, 'coverage.html': {} },
    }], ['instalmentdate/instalmentdate.entity', {
      '_index': 599,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['instalments', {
      '_index': 20,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Subcategory.html': {} },
    }], ['instalments.id', {
      '_index': 100,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Subcategory.html': {} },
    }], ['instalmentsdate', {
      '_index': 577,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['instalmentsdate.id', {
      '_index': 600,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['instanceof', {
      '_index': 1022,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['interface', {
      '_index': 409,
      'title': { 'interfaces/CategoryDTO.html': {} },
      'body': { 'interfaces/CategoryDTO.html': {}, 'coverage.html': {}, 'overview.html': {} },
    }], ['interfaces', {
      '_index': 410,
      'title': {},
      'body': { 'interfaces/CategoryDTO.html': {} },
    }], ['interval', {
      '_index': 497,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['intoaccount', {
      '_index': 485,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Template.html': {},
      },
    }], ['isactive', { '_index': 822, 'title': {}, 'body': { 'classes/User.html': {} } }], ['isdate', {
      '_index': 913,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['isdate()@isoptional()@type(undefined', {
      '_index': 907,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['isemail', {
      '_index': 642,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {} },
    }], ['isempty', {
      '_index': 1001,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['isempty(value', {
      '_index': 1009,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['isenum', {
      '_index': 914,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['isenum(sex', {
      '_index': 917,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['isenum(sex)@isoptional', {
      '_index': 911,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['ismultiday', {
      '_index': 519,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['isnotempty', {
      '_index': 179,
      'title': {},
      'body': { 'classes/AccountDto.html': {}, 'classes/LoginRegisterDTO.html': {} },
    }], ['isnotempty()@isstring', {
      '_index': 177,
      'title': {},
      'body': { 'classes/AccountDto.html': {}, 'classes/LoginRegisterDTO.html': {} },
    }], ['isoptional', {
      '_index': 915,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['ispositive', {
      '_index': 173,
      'title': {},
      'body': { 'classes/AccountDto.html': {} },
    }], ['ispremium', {
      '_index': 823,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['isrepeating', {
      '_index': 520,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['isstring', {
      '_index': 180,
      'title': {},
      'body': { 'classes/AccountDto.html': {}, 'classes/LoginRegisterDTO.html': {}, 'classes/UserDto.html': {} },
    }], ['join', {
      '_index': 1038,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {}, 'index.html': {} },
    }], ['joincolumn', {
      '_index': 686,
      'title': {},
      'body': { 'classes/Operation.html': {}, 'classes/Setting.html': {}, 'classes/Template.html': {} },
    }], ['jointable', {
      '_index': 273,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['jsonwebtoken', {
      '_index': 374,
      'title': {},
      'body': { 'injectables/AuthService.html': {}, 'dependencies.html': {} },
    }], ['jwt', {
      '_index': 612,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'dependencies.html': {} },
    }], ['jwt.strategy', {
      '_index': 353,
      'title': {},
      'body': { 'modules/AuthModule.html': {} },
    }], ['jwtfromrequest', {
      '_index': 630,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['jwtstrategy', {
      '_index': 350,
      'title': { 'injectables/JwtStrategy.html': {} },
      'body': {
        'modules/AuthModule.html': {},
        'injectables/JwtStrategy.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['kamil', { '_index': 1175, 'title': {}, 'body': { 'index.html': {} } }], ['konta', {
      '_index': 252,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['last', {
      '_index': 852,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['lastname', {
      '_index': 824,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['legend', {
      '_index': 193,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['length', {
      '_index': 93,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
      },
    }], ['level', { '_index': 825, 'title': {}, 'body': { 'classes/User.html': {} } }], ['license', {
      '_index': 1181,
      'title': {},
      'body': { 'index.html': {} },
    }], ['licensed', { '_index': 1159, 'title': {}, 'body': { 'index.html': {} } }], ['limit', {
      '_index': 382,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['logged', {
      '_index': 326,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['login', {
      '_index': 317,
      'title': {},
      'body': { 'controllers/AuthController.html': {}, 'injectables/UserService.html': {} },
    }], ['login(@body', {
      '_index': 345,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['login(userdto', {
      '_index': 319,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['loginregisterdto', {
      '_index': 320,
      'title': { 'classes/LoginRegisterDTO.html': {} },
      'body': {
        'controllers/AuthController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'coverage.html': {},
      },
    }], ['logowania', {
      '_index': 957,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['long', { '_index': 527, 'title': {}, 'body': { 'classes/Event.html': {} } }], ['longer', {
      '_index': 534,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['mail', {
      '_index': 645,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {}, 'classes/User.html': {} },
    }], ['male', {
      '_index': 1120,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['management', {
      '_index': 313,
      'title': {},
      'body': { 'injectables/AppService.html': {} },
    }], ['many', {
      '_index': 529,
      'title': {},
      'body': { 'classes/Event.html': {}, 'classes/Operation.html': {}, 'classes/Userstasks.html': {} },
    }], ['manytomany', {
      '_index': 274,
      'title': {},
      'body': { 'classes/Achievement.html': {}, 'classes/User.html': {} },
    }], ['manytomany(undefined', {
      '_index': 270,
      'title': {},
      'body': { 'classes/Achievement.html': {}, 'classes/User.html': {} },
    }], ['manytoone', {
      '_index': 80,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Subcategory.html': {},
        'classes/Template.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['manytoone(undefined', {
      '_index': 49,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Subcategory.html': {},
        'classes/Template.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['map(err', {
      '_index': 1034,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['matches', { '_index': 938, 'title': {}, 'body': { 'injectables/UserService.html': {} } }], ['matching', {
      '_index': 114, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
        'dependencies.html': {},
        'miscellaneous/enumerations.html': {},
        'miscellaneous/functions.html': {},
        'index.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['maximum', {
      '_index': 728,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['maxoutcome', {
      '_index': 712,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['message', {
      '_index': 571,
      'title': { 'classes/Message.html': {} },
      'body': { 'classes/HttpErrorFilter.html': {}, 'classes/Message.html': {}, 'coverage.html': {} },
    }], ['metadata', {
      '_index': 1017,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {}, 'dependencies.html': {} },
    }], ['metatype', {
      '_index': 1015,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['method', {
      '_index': 212,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['methods', {
      '_index': 26,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['metod', {
      '_index': 358,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['metoda', {
      '_index': 369,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['minimum', {
      '_index': 730,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['minoutcome', { '_index': 713, 'title': {}, 'body': { 'classes/Report.html': {} } }], ['minus', {
      '_index': 40,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['miscellaneous', {
      '_index': 1112,
      'title': { 'miscellaneous/enumerations.html': {}, 'miscellaneous/functions.html': {} },
      'body': { 'miscellaneous/enumerations.html': {}, 'miscellaneous/functions.html': {} },
    }], ['mit', { '_index': 1158, 'title': {}, 'body': { 'index.html': {} } }], ['mode', {
      '_index': 757,
      'title': {},
      'body': { 'classes/Setting.html': {}, 'index.html': {} },
    }], ['model', {
      '_index': 71,
      'title': {},
      'body': { 'classes/Account.html': {}, 'miscellaneous/enumerations.html': {} },
    }], ['model.balance', {
      '_index': 108,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['model.budget', {
      '_index': 106,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['model.name', {
      '_index': 104,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['module', {
      '_index': 189,
      'title': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
      },
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['modules', {
      '_index': 191,
      'title': { 'modules.html': {} },
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['money', {
      '_index': 542,
      'title': {},
      'body': { 'classes/Event.html': {}, 'classes/Report.html': {} },
    }], ['month', { '_index': 714, 'title': {}, 'body': { 'classes/Report.html': {} } }], ['more', {
      '_index': 1170,
      'title': {},
      'body': { 'index.html': {} },
    }], ['mysql', { '_index': 1101, 'title': {}, 'body': { 'dependencies.html': {} } }], ['myśliwiec', {
      '_index': 1176,
      'title': {},
      'body': { 'index.html': {} },
    }], ['name', {
      '_index': 21,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['needed', {
      '_index': 801,
      'title': {},
      'body': { 'classes/Task.html': {}, 'classes/Userstasks.html': {} },
    }], ['nest', { '_index': 1138, 'title': {}, 'body': { 'index.html': {} } }], ['nestframework', {
      '_index': 1180,
      'title': {},
      'body': { 'index.html': {} },
    }], ['nestjs/common', {
      '_index': 155, 'title': {}, 'body': {
        'controllers/AccountController.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'controllers/CurrencyController.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'controllers/UserController.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
        'dependencies.html': {},
      },
    }], ['nestjs/core', {
      '_index': 298,
      'title': {},
      'body': { 'modules/AppModule.html': {}, 'dependencies.html': {} },
    }], ['nestjs/passport', {
      '_index': 159,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
        'dependencies.html': {},
      },
    }], ['nestjs/platform', {
      '_index': 1092,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['nestjs/typeorm', {
      '_index': 205,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'modules/AppModule.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'dependencies.html': {},
      },
    }], ['new', {
      '_index': 102,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'injectables/AccountService.html': {},
        'controllers/CategoryController.html': {},
        'classes/Currency.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
      },
    }], ['newaccount', {
      '_index': 245,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['newaccount.tomodel', {
      '_index': 248,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['newly', {
      '_index': 332,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['newuser', {
      '_index': 968,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['newuser.tomodel', {
      '_index': 971,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['newuserdto', {
      '_index': 866,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['newuserdto.email', {
      '_index': 890,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['newuserdto.password', {
      '_index': 892,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['next', {
      '_index': 509,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'classes/Instalment.html': {} },
    }], ['nextdate', {
      '_index': 486,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['nextpaymentid', {
      '_index': 578,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['niepoprawne', {
      '_index': 955,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['niepoprawny', {
      '_index': 239,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['node.js', { '_index': 1127, 'title': {}, 'body': { 'index.html': {} } }], ['notification', {
      '_index': 658,
      'title': { 'classes/Notification.html': {} },
      'body': { 'classes/Notification.html': {}, 'classes/User.html': {}, 'coverage.html': {} },
    }], ['notification/notification.entity', {
      '_index': 873,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['notifications', {
      '_index': 826,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['notifications.user', {
      '_index': 880,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['npm', { '_index': 1142, 'title': {}, 'body': { 'index.html': {} } }], ['null', {
      '_index': 574,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['nullable', {
      '_index': 439,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'classes/User.html': {} },
    }], ['number', {
      '_index': 33,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['object', {
      '_index': 137,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['object.keys(value).length', {
      '_index': 1039,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['odpowiadających', {
      '_index': 359,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['odpowiedzialna', {
      '_index': 370,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['onetomany', {
      '_index': 81,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Instalment.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/User.html': {},
      },
    }], ['onetomany(undefined', {
      '_index': 53,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Instalment.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/User.html': {},
      },
    }], ['onetoone', {
      '_index': 687,
      'title': {},
      'body': { 'classes/Operation.html': {}, 'classes/Setting.html': {}, 'classes/Template.html': {} },
    }], ['onetoone(type', {
      '_index': 688,
      'title': {},
      'body': { 'classes/Operation.html': {}, 'classes/Setting.html': {}, 'classes/Template.html': {} },
    }], ['onetoone(undefined)@joincolumn', {
      '_index': 681,
      'title': {},
      'body': { 'classes/Operation.html': {}, 'classes/Setting.html': {}, 'classes/Template.html': {} },
    }], ['open', { '_index': 1160, 'title': {}, 'body': { 'index.html': {} } }], ['operation', {
      '_index': 65,
      'title': { 'classes/Operation.html': {} },
      'body': {
        'classes/Account.html': {},
        'classes/Cyclic.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Template.html': {},
        'coverage.html': {},
      },
    }], ['operation.controller', {
      '_index': 703,
      'title': {},
      'body': { 'modules/OperationModule.html': {} },
    }], ['operation.entity', {
      '_index': 702,
      'title': {},
      'body': { 'modules/OperationModule.html': {}, 'injectables/OperationService.html': {} },
    }], ['operation.service', {
      '_index': 695,
      'title': {},
      'body': { 'controllers/OperationController.html': {}, 'modules/OperationModule.html': {} },
    }], ['operation/operation.entity', {
      '_index': 88,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['operation/operation.module', {
      '_index': 295,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['operationcontroller', {
      '_index': 689,
      'title': { 'controllers/OperationController.html': {} },
      'body': { 'controllers/OperationController.html': {}, 'modules/OperationModule.html': {}, 'coverage.html': {} },
    }], ['operationmodule', {
      '_index': 285,
      'title': { 'modules/OperationModule.html': {} },
      'body': {
        'modules/AppModule.html': {},
        'modules/OperationModule.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['operationquantity', {
      '_index': 22,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Report.html': {} },
    }], ['operationrepository', {
      '_index': 708,
      'title': {},
      'body': { 'injectables/OperationService.html': {} },
    }], ['operations', {
      '_index': 23,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'classes/Cyclic.html': {},
        'controllers/OperationController.html': {},
        'classes/Report.html': {},
        'controllers/SettingController.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
      },
    }], ['operations.id', {
      '_index': 97,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['operationservice', {
      '_index': 694,
      'title': { 'injectables/OperationService.html': {} },
      'body': {
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['option', {
      '_index': 502,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['optional', {
      '_index': 75,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/Operation.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['out', {
      '_index': 202,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['outcome', {
      '_index': 721,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['overview', {
      '_index': 1185,
      'title': { 'overview.html': {} },
      'body': { 'overview.html': {} },
    }], ['package', { '_index': 1089, 'title': { 'dependencies.html': {} }, 'body': {} }], ['paid', {
      '_index': 602,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['param', {
      '_index': 152,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['param(\'curr', {
      '_index': 165,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['param(\'id', {
      '_index': 164,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['parameters', {
      '_index': 74,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['part', {
      '_index': 758,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['particular', {
      '_index': 604,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {}, 'classes/Report.html': {} },
    }], ['passport', {
      '_index': 626,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'dependencies.html': {} },
    }], ['passportstrategy', {
      '_index': 623,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['passportstrategy(strategy', {
      '_index': 628,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['password', {
      '_index': 641,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {}, 'classes/User.html': {}, 'injectables/UserService.html': {} },
    }], ['path', {
      '_index': 568,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['payload', {
      '_index': 342,
      'title': {},
      'body': {
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'injectables/JwtStrategy.html': {},
        'injectables/UserService.html': {},
      },
    }], ['payload.iat', {
      '_index': 639,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['payment', {
      '_index': 510,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'classes/Instalment.html': {}, 'classes/InstalmentDate.html': {} },
    }], ['period', {
      '_index': 746,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['periodlength', {
      '_index': 742,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['pipetransform', {
      '_index': 1020,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['plaintoclass', {
      '_index': 1021,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['plaintoclass(metatype', {
      '_index': 1027,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['please', { '_index': 1169, 'title': {}, 'body': { 'index.html': {} } }], ['plik', {
      '_index': 355,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['post', {
      '_index': 153,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['post(\'add', {
      '_index': 406,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['post(\'add\')@useguards(undefined', {
      '_index': 400,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['post(\'add/:id/:curr', {
      '_index': 129,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['post(\'edit/:id', {
      '_index': 898,
      'title': {},
      'body': { 'controllers/UserController.html': {} },
    }], ['post(\'login', {
      '_index': 321,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['post(\'register', {
      '_index': 330,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['post(\'update/:id', {
      '_index': 147,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['prefix', {
      '_index': 120,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['premium', {
      '_index': 850,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['primarycolumn', {
      '_index': 987,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['primarygeneratedcolumn', {
      '_index': 57,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
      },
    }], ['private', {
      '_index': 231,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['problem', {
      '_index': 888,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['process.env.expires_token', {
      '_index': 379,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['process.env.secret', {
      '_index': 377,
      'title': {},
      'body': { 'injectables/AuthService.html': {}, 'injectables/JwtStrategy.html': {} },
    }], ['production', { '_index': 1150, 'title': {}, 'body': { 'index.html': {} } }], ['progressive', {
      '_index': 1126,
      'title': {},
      'body': { 'index.html': {} },
    }], ['project', { '_index': 1161, 'title': {}, 'body': { 'index.html': {} } }], ['promise', {
      '_index': 140,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
      },
    }], ['properly', {
      '_index': 1006,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['properties', {
      '_index': 12,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'interfaces/CategoryDTO.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['property', {
      '_index': 1035,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['provide', {
      '_index': 306,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['provided', {
      '_index': 937,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['providers', {
      '_index': 196,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['public', {
      '_index': 29,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Currency.html': {}, 'classes/User.html': {} },
    }], ['purchase', {
      '_index': 678,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['quantity', { '_index': 64, 'title': {}, 'body': { 'classes/Account.html': {} } }], ['read', {
      '_index': 649,
      'title': {},
      'body': { 'classes/Message.html': {}, 'index.html': {} },
    }], ['readonly', {
      '_index': 163,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'controllers/CurrencyController.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
      },
    }], ['receipt', {
      '_index': 589,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {} },
    }], ['receive', { '_index': 796, 'title': {}, 'body': { 'classes/Task.html': {} } }], ['red', {
      '_index': 1116,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['reflect', { '_index': 1105, 'title': {}, 'body': { 'dependencies.html': {} } }], ['register', {
      '_index': 318,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['register(@body', {
      '_index': 340,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['register(userdto', {
      '_index': 329,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['registerdate', {
      '_index': 827,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['registered', {
      '_index': 333,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['registers', {
      '_index': 953,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['registeruser', {
      '_index': 931,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['registeruser(userdto', {
      '_index': 951,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['registration', {
      '_index': 859,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['repeats', {
      '_index': 530,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['repetitions', {
      '_index': 800,
      'title': {},
      'body': { 'classes/Task.html': {}, 'classes/Userstasks.html': {} },
    }], ['repetitionsachieved', {
      '_index': 984,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['repetitionsneeded', {
      '_index': 792,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['report', {
      '_index': 67,
      'title': { 'classes/Report.html': {} },
      'body': { 'classes/Account.html': {}, 'classes/Report.html': {}, 'coverage.html': {} },
    }], ['report/report.entity', {
      '_index': 83,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['reports', {
      '_index': 24,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['reports.id', {
      '_index': 94,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['repository', {
      '_index': 215,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'injectables/CategoryService.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/OperationService.html': {},
        'injectables/SettingService.html': {},
        'injectables/UserService.html': {},
        'index.html': {},
      },
    }], ['request', {
      '_index': 559,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['request(id', {
      '_index': 251,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['request(user', {
      '_index': 240,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['request(waluta', {
      '_index': 244,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['request.method', {
      '_index': 570,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['request.url', {
      '_index': 569,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['require(\'argon2', {
      '_index': 960,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['reset', {
      '_index': 201,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }], ['response', {
      '_index': 561,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['response.status(status).json(errorresponse', {
      '_index': 575,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['responsible', {
      '_index': 121,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/CurrencyController.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'controllers/SettingController.html': {},
        'controllers/UserController.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['result', {
      '_index': 113, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
        'dependencies.html': {},
        'miscellaneous/enumerations.html': {},
        'miscellaneous/functions.html': {},
        'index.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['results', {
      '_index': 115, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
        'dependencies.html': {},
        'miscellaneous/enumerations.html': {},
        'miscellaneous/functions.html': {},
        'index.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['retrieves', {
      '_index': 323,
      'title': {},
      'body': {
        'controllers/AuthController.html': {},
        'controllers/CurrencyController.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['return', {
      '_index': 111,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'injectables/CurrencyService.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['returns', {
      '_index': 76,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'controllers/CategoryController.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'injectables/CurrencyService.html': {},
        'classes/HttpErrorFilter.html': {},
        'injectables/JwtStrategy.html': {},
        'controllers/OperationController.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['rimraf', { '_index': 1107, 'title': {}, 'body': { 'dependencies.html': {} } }], ['run', {
      '_index': 1146,
      'title': {},
      'body': { 'index.html': {} },
    }], ['rxjs', { '_index': 1109, 'title': {}, 'body': { 'dependencies.html': {} } }], ['s', {
      '_index': 698,
      'title': {},
      'body': { 'controllers/OperationController.html': {} },
    }], ['saver', {
      '_index': 311,
      'title': {},
      'body': { 'injectables/AppService.html': {} },
    }], ['scalable', { '_index': 1131, 'title': {}, 'body': { 'index.html': {} } }], ['secretorkey', {
      '_index': 632,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['seen', {
      '_index': 660,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['sekcji', { '_index': 749, 'title': {}, 'body': { 'classes/Setting.html': {} } }], ['server', {
      '_index': 1132,
      'title': {},
      'body': { 'index.html': {} },
    }], ['session', {
      '_index': 943,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['set', { '_index': 388, 'title': {}, 'body': { 'classes/Category.html': {} } }], ['setting', {
      '_index': 738,
      'title': { 'classes/Setting.html': {} },
      'body': {
        'classes/Setting.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'coverage.html': {},
      },
    }], ['setting.controller', {
      '_index': 770,
      'title': {},
      'body': { 'modules/SettingModule.html': {} },
    }], ['setting.entity', {
      '_index': 768,
      'title': {},
      'body': { 'modules/SettingModule.html': {}, 'injectables/SettingService.html': {} },
    }], ['setting.service', {
      '_index': 769,
      'title': {},
      'body': { 'modules/SettingModule.html': {} },
    }], ['settingcontroller', {
      '_index': 760,
      'title': { 'controllers/SettingController.html': {} },
      'body': { 'controllers/SettingController.html': {}, 'modules/SettingModule.html': {}, 'coverage.html': {} },
    }], ['settingmodule', {
      '_index': 763,
      'title': { 'modules/SettingModule.html': {} },
      'body': { 'modules/SettingModule.html': {}, 'modules.html': {}, 'overview.html': {} },
    }], ['settingrepository', {
      '_index': 775,
      'title': {},
      'body': { 'injectables/SettingService.html': {} },
    }], ['settings', {
      '_index': 762,
      'title': {},
      'body': { 'controllers/SettingController.html': {} },
    }], ['settingservice', {
      '_index': 766,
      'title': { 'injectables/SettingService.html': {} },
      'body': {
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['sex', {
      '_index': 828,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {}, 'miscellaneous/enumerations.html': {} },
    }], ['sexes', {
      '_index': 1119,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['shared/http', {
      '_index': 300,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['shared/shared.module', {
      '_index': 294,
      'title': {},
      'body': { 'modules/AppModule.html': {}, 'modules/AuthModule.html': {} },
    }], ['sharedmodule', {
      '_index': 286,
      'title': { 'modules/SharedModule.html': {} },
      'body': {
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/SharedModule.html': {},
        'modules.html': {},
        'overview.html': {},
      },
    }], ['side', { '_index': 1133, 'title': {}, 'body': { 'index.html': {} } }], ['sign', {
      '_index': 373,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['sign(payload', {
      '_index': 376,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['signbypayload', {
      '_index': 363,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['signbypayload(payload', {
      '_index': 367,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['source', {
      '_index': 4, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AppController.html': {},
        'modules/AppModule.html': {},
        'injectables/AppService.html': {},
        'controllers/AuthController.html': {},
        'modules/AuthModule.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'modules/CategoryModule.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'controllers/CurrencyController.html': {},
        'classes/CurrencyModel.html': {},
        'modules/CurrencyModule.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'modules/OperationModule.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'controllers/SettingController.html': {},
        'modules/SettingModule.html': {},
        'injectables/SettingService.html': {},
        'modules/SharedModule.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'index.html': {},
      },
    }], ['specifies', {
      '_index': 503,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['sponsors', {
      '_index': 1164,
      'title': {},
      'body': { 'index.html': {} },
    }], ['src/.../main.ts', {
      '_index': 1123,
      'title': {},
      'body': { 'miscellaneous/functions.html': {} },
    }], ['src/.../utils.ts', {
      '_index': 1114,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['src/account/account.controller.ts', {
      '_index': 119,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'coverage.html': {} },
    }], ['src/account/account.controller.ts:29', {
      '_index': 130,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['src/account/account.controller.ts:45', {
      '_index': 148,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['src/account/account.controller.ts:58', {
      '_index': 143,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['src/account/account.dto.ts', {
      '_index': 171,
      'title': {},
      'body': { 'classes/AccountDto.html': {}, 'coverage.html': {} },
    }], ['src/account/account.dto.ts:12', {
      '_index': 178,
      'title': {},
      'body': { 'classes/AccountDto.html': {} },
    }], ['src/account/account.dto.ts:17', {
      '_index': 174,
      'title': {},
      'body': { 'classes/AccountDto.html': {} },
    }], ['src/account/account.dto.ts:21', {
      '_index': 172,
      'title': {},
      'body': { 'classes/AccountDto.html': {} },
    }], ['src/account/account.dto.ts:25', {
      '_index': 175,
      'title': {},
      'body': { 'classes/AccountDto.html': {} },
    }], ['src/account/account.entity.ts', {
      '_index': 6,
      'title': {},
      'body': { 'classes/Account.html': {}, 'coverage.html': {} },
    }], ['src/account/account.entity.ts:102', {
      '_index': 77,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:27', {
      '_index': 58,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:32', {
      '_index': 62,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:37', {
      '_index': 45,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:42', {
      '_index': 41,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:47', {
      '_index': 37,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:52', {
      '_index': 63,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:57', {
      '_index': 68,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:62', {
      '_index': 56,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:67', {
      '_index': 54,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:72', {
      '_index': 66,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:77', {
      '_index': 51,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:82', {
      '_index': 69,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:87', {
      '_index': 61,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.entity.ts:89', {
      '_index': 73,
      'title': {},
      'body': { 'classes/Account.html': {} },
    }], ['src/account/account.model.ts', {
      '_index': 182,
      'title': {},
      'body': { 'classes/AccountModel.html': {}, 'coverage.html': {} },
    }], ['src/account/account.model.ts:4', {
      '_index': 185,
      'title': {},
      'body': { 'classes/AccountModel.html': {} },
    }], ['src/account/account.module.ts', {
      '_index': 203,
      'title': {},
      'body': { 'modules/AccountModule.html': {} },
    }], ['src/account/account.service.ts', {
      '_index': 211,
      'title': {},
      'body': { 'injectables/AccountService.html': {}, 'coverage.html': {} },
    }], ['src/account/account.service.ts:14', {
      '_index': 218,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['src/account/account.service.ts:27', {
      '_index': 220,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['src/account/account.service.ts:56', {
      '_index': 224,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['src/account/account.service.ts:88', {
      '_index': 222,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['src/achievement/achievement.entity.ts', {
      '_index': 260,
      'title': {},
      'body': { 'classes/Achievement.html': {}, 'coverage.html': {} },
    }], ['src/achievement/achievement.entity.ts:19', {
      '_index': 268,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['src/achievement/achievement.entity.ts:24', {
      '_index': 269,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['src/achievement/achievement.entity.ts:29', {
      '_index': 266,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['src/achievement/achievement.entity.ts:34', {
      '_index': 265,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['src/achievement/achievement.entity.ts:40', {
      '_index': 272,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['src/app.controller.ts', {
      '_index': 277,
      'title': {},
      'body': { 'controllers/AppController.html': {}, 'coverage.html': {} },
    }], ['src/app.module.ts', {
      '_index': 289,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['src/app.service.ts', {
      '_index': 308,
      'title': {},
      'body': { 'injectables/AppService.html': {}, 'coverage.html': {} },
    }], ['src/app.service.ts:5', {
      '_index': 310,
      'title': {},
      'body': { 'injectables/AppService.html': {} },
    }], ['src/auth/auth.controller.ts', {
      '_index': 316,
      'title': {},
      'body': { 'controllers/AuthController.html': {}, 'coverage.html': {} },
    }], ['src/auth/auth.controller.ts:23', {
      '_index': 331,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['src/auth/auth.controller.ts:38', {
      '_index': 322,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['src/auth/auth.dto.ts', {
      '_index': 640,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {}, 'coverage.html': {} },
    }], ['src/auth/auth.dto.ts:11', {
      '_index': 643,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {} },
    }], ['src/auth/auth.dto.ts:17', {
      '_index': 647,
      'title': {},
      'body': { 'classes/LoginRegisterDTO.html': {} },
    }], ['src/auth/auth.module.ts', {
      '_index': 351,
      'title': {},
      'body': { 'modules/AuthModule.html': {} },
    }], ['src/auth/auth.service.ts', {
      '_index': 354,
      'title': {},
      'body': { 'injectables/AuthService.html': {}, 'coverage.html': {} },
    }], ['src/auth/auth.service.ts:16', {
      '_index': 372,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['src/auth/auth.service.ts:24', {
      '_index': 368,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['src/auth/auth.service.ts:9', {
      '_index': 366,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['src/auth/jwt.strategy.ts', {
      '_index': 610,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'coverage.html': {} },
    }], ['src/auth/jwt.strategy.ts:10', {
      '_index': 615,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['src/auth/jwt.strategy.ts:24', {
      '_index': 619,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['src/category/category.controller.ts', {
      '_index': 395,
      'title': {},
      'body': { 'controllers/CategoryController.html': {}, 'coverage.html': {} },
    }], ['src/category/category.controller.ts:20', {
      '_index': 401,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['src/category/category.entity.ts', {
      '_index': 381,
      'title': {},
      'body': { 'classes/Category.html': {}, 'coverage.html': {} },
    }], ['src/category/category.entity.ts:13', {
      '_index': 386,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['src/category/category.entity.ts:18', {
      '_index': 391,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['src/category/category.entity.ts:23', {
      '_index': 385,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['src/category/category.entity.ts:28', {
      '_index': 387,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['src/category/category.entity.ts:33', {
      '_index': 390,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['src/category/category.model.ts', {
      '_index': 411,
      'title': {},
      'body': { 'interfaces/CategoryDTO.html': {}, 'coverage.html': {} },
    }], ['src/category/category.module.ts', {
      '_index': 414,
      'title': {},
      'body': { 'modules/CategoryModule.html': {} },
    }], ['src/category/category.service.ts', {
      '_index': 418,
      'title': {},
      'body': { 'injectables/CategoryService.html': {}, 'coverage.html': {} },
    }], ['src/category/category.service.ts:14', {
      '_index': 424,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['src/category/category.service.ts:8', {
      '_index': 421,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['src/currency/currency.controller.ts', {
      '_index': 449,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {}, 'coverage.html': {} },
    }], ['src/currency/currency.controller.ts:15', {
      '_index': 452,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {} },
    }], ['src/currency/currency.entity.ts', {
      '_index': 428,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'coverage.html': {} },
    }], ['src/currency/currency.entity.ts:14', {
      '_index': 436,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['src/currency/currency.entity.ts:19', {
      '_index': 437,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['src/currency/currency.entity.ts:24', {
      '_index': 434,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['src/currency/currency.entity.ts:29', {
      '_index': 441,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['src/currency/currency.entity.ts:34', {
      '_index': 432,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['src/currency/currency.entity.ts:36', {
      '_index': 442,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['src/currency/currency.model.ts', {
      '_index': 458,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {}, 'coverage.html': {} },
    }], ['src/currency/currency.model.ts:4', {
      '_index': 461,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['src/currency/currency.model.ts:5', {
      '_index': 462,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['src/currency/currency.model.ts:6', {
      '_index': 460,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['src/currency/currency.module.ts', {
      '_index': 470,
      'title': {},
      'body': { 'modules/CurrencyModule.html': {} },
    }], ['src/currency/currency.service.ts', {
      '_index': 473,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {}, 'coverage.html': {} },
    }], ['src/currency/currency.service.ts:13', {
      '_index': 477,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['src/currency/currency.service.ts:7', {
      '_index': 476,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['src/cyclic/cyclic.entity.ts', {
      '_index': 481,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'coverage.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:14', {
      '_index': 499,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:19', {
      '_index': 512,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:24', {
      '_index': 494,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:29', {
      '_index': 515,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:34', {
      '_index': 513,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:39', {
      '_index': 490,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:44', {
      '_index': 492,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:49', {
      '_index': 501,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:54', {
      '_index': 495,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:59', {
      '_index': 506,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:64', {
      '_index': 488,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/cyclic/cyclic.entity.ts:69', {
      '_index': 511,
      'title': {},
      'body': { 'classes/Cyclic.html': {} },
    }], ['src/event/event.entity.ts', {
      '_index': 517,
      'title': {},
      'body': { 'classes/Event.html': {}, 'coverage.html': {} },
    }], ['src/event/event.entity.ts:13', {
      '_index': 531,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:18', {
      '_index': 539,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:23', {
      '_index': 524,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:28', {
      '_index': 540,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:33', {
      '_index': 522,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:38', {
      '_index': 523,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:43', {
      '_index': 533,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:48', {
      '_index': 525,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:53', {
      '_index': 536,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:58', {
      '_index': 528,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:63', {
      '_index': 532,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/event/event.entity.ts:68', {
      '_index': 521,
      'title': {},
      'body': { 'classes/Event.html': {} },
    }], ['src/instalment/instalment.entity.ts', {
      '_index': 576,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'coverage.html': {} },
    }], ['src/instalment/instalment.entity.ts:21', {
      '_index': 590,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:26', {
      '_index': 597,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:31', {
      '_index': 580,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:36', {
      '_index': 581,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:41', {
      '_index': 583,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:46', {
      '_index': 598,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:51', {
      '_index': 593,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:56', {
      '_index': 594,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:61', {
      '_index': 586,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:66', {
      '_index': 579,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:71', {
      '_index': 595,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalment/instalment.entity.ts:76', {
      '_index': 592,
      'title': {},
      'body': { 'classes/Instalment.html': {} },
    }], ['src/instalmentdate/instalmentdate.entity.ts', {
      '_index': 601,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {}, 'coverage.html': {} },
    }], ['src/instalmentdate/instalmentdate.entity.ts:13', {
      '_index': 605,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['src/instalmentdate/instalmentdate.entity.ts:18', {
      '_index': 603,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['src/instalmentdate/instalmentdate.entity.ts:23', {
      '_index': 608,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['src/instalmentdate/instalmentdate.entity.ts:28', {
      '_index': 607,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['src/instalmentdate/instalmentdate.entity.ts:33', {
      '_index': 606,
      'title': {},
      'body': { 'classes/InstalmentDate.html': {} },
    }], ['src/main.ts', {
      '_index': 1069,
      'title': {},
      'body': { 'coverage.html': {}, 'miscellaneous/functions.html': {} },
    }], ['src/message/message.entity.ts', {
      '_index': 648,
      'title': {},
      'body': { 'classes/Message.html': {}, 'coverage.html': {} },
    }], ['src/message/message.entity.ts:12', {
      '_index': 653,
      'title': {},
      'body': { 'classes/Message.html': {} },
    }], ['src/message/message.entity.ts:17', {
      '_index': 656,
      'title': {},
      'body': { 'classes/Message.html': {} },
    }], ['src/message/message.entity.ts:22', {
      '_index': 650,
      'title': {},
      'body': { 'classes/Message.html': {} },
    }], ['src/message/message.entity.ts:27', {
      '_index': 652,
      'title': {},
      'body': { 'classes/Message.html': {} },
    }], ['src/message/message.entity.ts:32', {
      '_index': 655,
      'title': {},
      'body': { 'classes/Message.html': {} },
    }], ['src/notification/notification.entity.ts', {
      '_index': 659,
      'title': {},
      'body': { 'classes/Notification.html': {}, 'coverage.html': {} },
    }], ['src/notification/notification.entity.ts:13', {
      '_index': 664,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['src/notification/notification.entity.ts:18', {
      '_index': 667,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['src/notification/notification.entity.ts:23', {
      '_index': 661,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['src/notification/notification.entity.ts:28', {
      '_index': 663,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['src/notification/notification.entity.ts:33', {
      '_index': 665,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['src/notification/notification.entity.ts:38', {
      '_index': 668,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['src/operation/operation.controller.ts', {
      '_index': 690,
      'title': {},
      'body': { 'controllers/OperationController.html': {}, 'coverage.html': {} },
    }], ['src/operation/operation.controller.ts:17', {
      '_index': 693,
      'title': {},
      'body': { 'controllers/OperationController.html': {} },
    }], ['src/operation/operation.entity.ts', {
      '_index': 670,
      'title': {},
      'body': { 'classes/Operation.html': {}, 'coverage.html': {} },
    }], ['src/operation/operation.entity.ts:21', {
      '_index': 679,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:26', {
      '_index': 683,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:31', {
      '_index': 674,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:36', {
      '_index': 684,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:41', {
      '_index': 685,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:46', {
      '_index': 673,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:51', {
      '_index': 675,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:56', {
      '_index': 680,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:61', {
      '_index': 676,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:66', {
      '_index': 672,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.entity.ts:69', {
      '_index': 682,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['src/operation/operation.module.ts', {
      '_index': 701,
      'title': {},
      'body': { 'modules/OperationModule.html': {} },
    }], ['src/operation/operation.service.ts', {
      '_index': 705,
      'title': {},
      'body': { 'injectables/OperationService.html': {}, 'coverage.html': {} },
    }], ['src/operation/operation.service.ts:7', {
      '_index': 707,
      'title': {},
      'body': { 'injectables/OperationService.html': {} },
    }], ['src/report/report.entity.ts', {
      '_index': 710,
      'title': {},
      'body': { 'classes/Report.html': {}, 'coverage.html': {} },
    }], ['src/report/report.entity.ts:13', {
      '_index': 726,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:18', {
      '_index': 731,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:23', {
      '_index': 722,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:28', {
      '_index': 723,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:33', {
      '_index': 734,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:38', {
      '_index': 736,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:43', {
      '_index': 732,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:48', {
      '_index': 724,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:53', {
      '_index': 725,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:58', {
      '_index': 718,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:63', {
      '_index': 727,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:68', {
      '_index': 729,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/report/report.entity.ts:73', {
      '_index': 717,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['src/setting/setting.controller.ts', {
      '_index': 761,
      'title': {},
      'body': { 'controllers/SettingController.html': {}, 'coverage.html': {} },
    }], ['src/setting/setting.entity.ts', {
      '_index': 739,
      'title': {},
      'body': { 'classes/Setting.html': {}, 'coverage.html': {} },
    }], ['src/setting/setting.entity.ts:19', {
      '_index': 751,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['src/setting/setting.entity.ts:24', {
      '_index': 755,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['src/setting/setting.entity.ts:29', {
      '_index': 750,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['src/setting/setting.entity.ts:34', {
      '_index': 744,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['src/setting/setting.entity.ts:39', {
      '_index': 752,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['src/setting/setting.entity.ts:42', {
      '_index': 753,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['src/setting/setting.module.ts', {
      '_index': 767,
      'title': {},
      'body': { 'modules/SettingModule.html': {} },
    }], ['src/setting/setting.service.ts', {
      '_index': 772,
      'title': {},
      'body': { 'injectables/SettingService.html': {}, 'coverage.html': {} },
    }], ['src/setting/setting.service.ts:7', {
      '_index': 774,
      'title': {},
      'body': { 'injectables/SettingService.html': {} },
    }], ['src/shared/http', {
      '_index': 543,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {}, 'coverage.html': {} },
    }], ['src/shared/shared.module.ts', {
      '_index': 780,
      'title': {},
      'body': { 'modules/SharedModule.html': {} },
    }], ['src/shared/validation.pipe.ts', {
      '_index': 998,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {}, 'coverage.html': {} },
    }], ['src/shared/validation.pipe.ts:16', {
      '_index': 1019,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['src/shared/validation.pipe.ts:39', {
      '_index': 1014,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['src/shared/validation.pipe.ts:48', {
      '_index': 1005,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['src/shared/validation.pipe.ts:62', {
      '_index': 1010,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['src/subcategory/subcategory.entity.ts', {
      '_index': 782,
      'title': {},
      'body': { 'classes/Subcategory.html': {}, 'coverage.html': {} },
    }], ['src/subcategory/subcategory.entity.ts:21', {
      '_index': 786,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['src/subcategory/subcategory.entity.ts:26', {
      '_index': 788,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['src/subcategory/subcategory.entity.ts:31', {
      '_index': 784,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['src/subcategory/subcategory.entity.ts:36', {
      '_index': 783,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['src/subcategory/subcategory.entity.ts:41', {
      '_index': 785,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['src/subcategory/subcategory.entity.ts:46', {
      '_index': 787,
      'title': {},
      'body': { 'classes/Subcategory.html': {} },
    }], ['src/task/task.entity.ts', {
      '_index': 791,
      'title': {},
      'body': { 'classes/Task.html': {}, 'coverage.html': {} },
    }], ['src/task/task.entity.ts:13', {
      '_index': 798,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['src/task/task.entity.ts:18', {
      '_index': 803,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['src/task/task.entity.ts:23', {
      '_index': 795,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['src/task/task.entity.ts:28', {
      '_index': 794,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['src/task/task.entity.ts:33', {
      '_index': 799,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['src/task/task.entity.ts:38', {
      '_index': 804,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['src/template/template.entity.ts', {
      '_index': 808,
      'title': {},
      'body': { 'classes/Template.html': {}, 'coverage.html': {} },
    }], ['src/template/template.entity.ts:21', {
      '_index': 810,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:26', {
      '_index': 814,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:31', {
      '_index': 816,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:36', {
      '_index': 811,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:41', {
      '_index': 813,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:46', {
      '_index': 809,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:51', {
      '_index': 815,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/template/template.entity.ts:54', {
      '_index': 812,
      'title': {},
      'body': { 'classes/Template.html': {} },
    }], ['src/user/user.controller.ts', {
      '_index': 895,
      'title': {},
      'body': { 'controllers/UserController.html': {}, 'coverage.html': {} },
    }], ['src/user/user.controller.ts:21', {
      '_index': 899,
      'title': {},
      'body': { 'controllers/UserController.html': {} },
    }], ['src/user/user.dto.ts', {
      '_index': 906,
      'title': {},
      'body': { 'classes/UserDto.html': {}, 'coverage.html': {} },
    }], ['src/user/user.dto.ts:13', {
      '_index': 909,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['src/user/user.dto.ts:18', {
      '_index': 910,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['src/user/user.dto.ts:25', {
      '_index': 908,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['src/user/user.dto.ts:31', {
      '_index': 912,
      'title': {},
      'body': { 'classes/UserDto.html': {} },
    }], ['src/user/user.entity.ts', {
      '_index': 817,
      'title': {},
      'body': { 'classes/User.html': {}, 'coverage.html': {} },
    }], ['src/user/user.entity.ts:104', {
      '_index': 863,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:109', {
      '_index': 833,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:114', {
      '_index': 862,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:116', {
      '_index': 868,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:119', {
      '_index': 867,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:123', {
      '_index': 870,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:130', {
      '_index': 865,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:136', {
      '_index': 871,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:29', {
      '_index': 846,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:34', {
      '_index': 841,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:39', {
      '_index': 856,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:44', {
      '_index': 844,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:49', {
      '_index': 851,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:54', {
      '_index': 839,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:59', {
      '_index': 861,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:64', {
      '_index': 858,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:69', {
      '_index': 853,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:74', {
      '_index': 843,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:79', {
      '_index': 847,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:84', {
      '_index': 849,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:89', {
      '_index': 836,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:94', {
      '_index': 854,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.entity.ts:99', {
      '_index': 834,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['src/user/user.model.ts', {
      '_index': 918,
      'title': {},
      'body': { 'classes/UserModel.html': {}, 'coverage.html': {} },
    }], ['src/user/user.model.ts:4', {
      '_index': 920,
      'title': {},
      'body': { 'classes/UserModel.html': {} },
    }], ['src/user/user.module.ts', {
      '_index': 924,
      'title': {},
      'body': { 'modules/UserModule.html': {} },
    }], ['src/user/user.service.ts', {
      '_index': 927,
      'title': {},
      'body': { 'injectables/UserService.html': {}, 'coverage.html': {} },
    }], ['src/user/user.service.ts:13', {
      '_index': 933,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['src/user/user.service.ts:23', {
      '_index': 946,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['src/user/user.service.ts:47', {
      '_index': 935,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['src/user/user.service.ts:60', {
      '_index': 952,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['src/user/user.service.ts:75', {
      '_index': 949,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['src/user/user.service.ts:87', {
      '_index': 944,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['src/userstasks/userstasks.entity.ts', {
      '_index': 982,
      'title': {},
      'body': { 'classes/Userstasks.html': {}, 'coverage.html': {} },
    }], ['src/userstasks/userstasks.entity.ts:14', {
      '_index': 988,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['src/userstasks/userstasks.entity.ts:19', {
      '_index': 990,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['src/userstasks/userstasks.entity.ts:24', {
      '_index': 991,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['src/userstasks/userstasks.entity.ts:29', {
      '_index': 986,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['src/userstasks/userstasks.entity.ts:34', {
      '_index': 989,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['src/utilities/utils.ts', {
      '_index': 1115,
      'title': {},
      'body': { 'miscellaneous/enumerations.html': {} },
    }], ['standardized', {
      '_index': 435,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['start', { '_index': 1147, 'title': {}, 'body': { 'index.html': {} } }], ['start:dev', {
      '_index': 1149,
      'title': {},
      'body': { 'index.html': {} },
    }], ['start:prodtest', { '_index': 1151, 'title': {}, 'body': { 'index.html': {} } }], ['started', {
      '_index': 1125,
      'title': { 'index.html': {} },
      'body': {},
    }], ['starter', { '_index': 1140, 'title': {}, 'body': { 'index.html': {} } }], ['starting', {
      '_index': 491,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
      },
    }], ['statements', { '_index': 1042, 'title': {}, 'body': { 'coverage.html': {} } }], ['static', {
      '_index': 27,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/User.html': {} },
    }], ['status', {
      '_index': 563,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['stay', { '_index': 1172, 'title': {}, 'body': { 'index.html': {} } }], ['strategy', {
      '_index': 625,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['string', {
      '_index': 42,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/AccountDto.html': {},
        'classes/Achievement.html': {},
        'injectables/AppService.html': {},
        'classes/Category.html': {},
        'interfaces/CategoryDTO.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'controllers/OperationController.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['subcategories', {
      '_index': 383,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['subcategories.id', {
      '_index': 393,
      'title': {},
      'body': { 'classes/Category.html': {} },
    }], ['subcategory', {
      '_index': 389,
      'title': { 'classes/Subcategory.html': {} },
      'body': {
        'classes/Category.html': {},
        'classes/Cyclic.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Subcategory.html': {},
        'classes/Template.html': {},
        'coverage.html': {},
      },
    }], ['subcategory.id', {
      '_index': 516,
      'title': {},
      'body': { 'classes/Cyclic.html': {}, 'classes/Instalment.html': {} },
    }], ['subcategory/subcategory.entity', {
      '_index': 392,
      'title': {},
      'body': {
        'classes/Category.html': {},
        'classes/Cyclic.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Template.html': {},
      },
    }], ['submitted', {
      '_index': 1025,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['super', {
      '_index': 629,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['support', {
      '_index': 1165,
      'title': {},
      'body': { 'index.html': {}, 'modules.html': {} },
    }], ['svg', { '_index': 1183, 'title': {}, 'body': { 'modules.html': {} } }], ['symbol', {
      '_index': 431,
      'title': {},
      'body': { 'classes/Currency.html': {} },
    }], ['table', {
      '_index': 10,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
        'coverage.html': {},
      },
    }], ['tablesort(document.getelementbyid(\'coverage', {
      '_index': 1088,
      'title': {},
      'body': { 'coverage.html': {} },
    }], ['taken', {
      '_index': 504,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Operation.html': {},
        'classes/Template.html': {},
      },
    }], ['takes', { '_index': 526, 'title': {}, 'body': { 'classes/Event.html': {} } }], ['task', {
      '_index': 790,
      'title': { 'classes/Task.html': {} },
      'body': { 'classes/Task.html': {}, 'classes/Userstasks.html': {}, 'coverage.html': {} },
    }], ['task/task.entity', {
      '_index': 992,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['taskid', {
      '_index': 985,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['taskid2', {
      '_index': 993,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['taskid2.id', {
      '_index': 994,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['tasks', {
      '_index': 983,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['template', {
      '_index': 807,
      'title': { 'classes/Template.html': {} },
      'body': { 'classes/Template.html': {}, 'classes/User.html': {}, 'coverage.html': {} },
    }], ['template/template.entity', {
      '_index': 875,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['templates', {
      '_index': 829,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['templates.id', {
      '_index': 883,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['test', { '_index': 1154, 'title': {}, 'body': { 'index.html': {} } }], ['test:covsupport', {
      '_index': 1157,
      'title': {},
      'body': { 'index.html': {} },
    }], ['test:e2e', { '_index': 1156, 'title': {}, 'body': { 'index.html': {} } }], ['tests', {
      '_index': 1153,
      'title': {},
      'body': { 'index.html': {} },
    }], ['thanks', {
      '_index': 1163,
      'title': {},
      'body': { 'index.html': {} },
    }], ['this.accountrepository', {
      '_index': 249,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['this.accountrepository.remove(account', {
      '_index': 258,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['this.accountrepository.save(account', {
      '_index': 256,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['this.accountrepository.save(newaccount', {
      '_index': 247,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['this.accountservice.createaccount(userid', {
      '_index': 166,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['this.accountservice.deleteaccount(accountid', {
      '_index': 170,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['this.accountservice.updateaccount(accountid', {
      '_index': 168,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['this.authservice.signbypayload(payload', {
      '_index': 344,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['this.authservice.validateuser(payload', {
      '_index': 633,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['this.categoryrepository.save(categorydto', {
      '_index': 426,
      'title': {},
      'body': { 'injectables/CategoryService.html': {} },
    }], ['this.categoryservice.createcategory(categorydto', {
      '_index': 408,
      'title': {},
      'body': { 'controllers/CategoryController.html': {} },
    }], ['this.checkhash(user.password', {
      '_index': 958,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['this.code', {
      '_index': 466,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['this.currencyrepository', {
      '_index': 242,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['this.currencyrepository.find', {
      '_index': 478,
      'title': {},
      'body': { 'injectables/CurrencyService.html': {} },
    }], ['this.currencyservice.getallcurrency', {
      '_index': 457,
      'title': {},
      'body': { 'controllers/CurrencyController.html': {} },
    }], ['this.formaterrors(errors', {
      '_index': 1031,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['this.id', {
      '_index': 187,
      'title': {},
      'body': {
        'classes/AccountModel.html': {},
        'classes/CurrencyModel.html': {},
        'classes/User.html': {},
        'classes/UserModel.html': {},
      },
    }], ['this.isempty(value', {
      '_index': 1023,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['this.name', {
      '_index': 464,
      'title': {},
      'body': { 'classes/CurrencyModel.html': {} },
    }], ['this.password', {
      '_index': 884,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['this.tovalidate(metatype', {
      '_index': 1026,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['this.userrepository', {
      '_index': 235,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['this.userrepository.findone', {
      '_index': 954,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['this.userrepository.findoneorfail(userid', {
      '_index': 972,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['this.userrepository.save(newuser', {
      '_index': 970,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['this.userrepository.save(user', {
      '_index': 981,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['this.userservice.edituser(userid', {
      '_index': 905,
      'title': {},
      'body': { 'controllers/UserController.html': {} },
    }], ['this.userservice.findbylogin(userdto', {
      '_index': 346,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['this.userservice.findbypayload(payload', {
      '_index': 375,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['this.userservice.registeruser(userdto', {
      '_index': 341,
      'title': {},
      'body': { 'controllers/AuthController.html': {} },
    }], ['through', { '_index': 537, 'title': {}, 'body': { 'classes/Event.html': {} } }], ['throw', {
      '_index': 238,
      'title': {},
      'body': {
        'injectables/AccountService.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['timestamp', {
      '_index': 566,
      'title': {},
      'body': { 'classes/HttpErrorFilter.html': {} },
    }], ['title', {
      '_index': 262,
      'title': {},
      'body': {
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'interfaces/CategoryDTO.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
      },
    }], ['todo', {
      '_index': 950,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['token', {
      '_index': 325,
      'title': {},
      'body': { 'controllers/AuthController.html': {}, 'injectables/JwtStrategy.html': {} },
    }], ['tomodel', {
      '_index': 30,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Currency.html': {}, 'classes/User.html': {} },
    }], ['total', {
      '_index': 733,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['totalminus', {
      '_index': 715,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['totalplus', {
      '_index': 716,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['touch', { '_index': 1173, 'title': {}, 'body': { 'index.html': {} } }], ['tovalidate', {
      '_index': 1002,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['tovalidate(metatype', {
      '_index': 1013,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['transfer', {
      '_index': 136,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'classes/LoginRegisterDTO.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
      },
    }], ['transform', {
      '_index': 1003,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['transform(value', {
      '_index': 1016,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['transformer', {
      '_index': 916,
      'title': {},
      'body': { 'classes/UserDto.html': {}, 'injectables/ValidationPipe.html': {}, 'dependencies.html': {} },
    }], ['true', {
      '_index': 440,
      'title': {},
      'body': { 'classes/Currency.html': {}, 'classes/User.html': {}, 'injectables/ValidationPipe.html': {} },
    }], ['try', {
      '_index': 885,
      'title': {},
      'body': { 'classes/User.html': {}, 'injectables/UserService.html': {} },
    }], ['twitter', { '_index': 1179, 'title': {}, 'body': { 'index.html': {} } }], ['type', {
      '_index': 31, 'title': {}, 'body': {
        'classes/Account.html': {},
        'controllers/AccountController.html': {},
        'classes/AccountDto.html': {},
        'classes/AccountModel.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'classes/Category.html': {},
        'controllers/CategoryController.html': {},
        'interfaces/CategoryDTO.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'classes/CurrencyModel.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/HttpErrorFilter.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'injectables/SettingService.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'injectables/ValidationPipe.html': {},
        'coverage.html': {},
      },
    }], ['typeorm', {
      '_index': 82,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'classes/Category.html': {},
        'injectables/CategoryService.html': {},
        'classes/Currency.html': {},
        'injectables/CurrencyService.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Message.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'injectables/OperationService.html': {},
        'classes/Report.html': {},
        'classes/Setting.html': {},
        'injectables/SettingService.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'dependencies.html': {},
      },
    }], ['typeormmodule', {
      '_index': 204,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
      },
    }], ['typeormmodule.forfeature([account', {
      '_index': 208,
      'title': {},
      'body': { 'modules/AccountModule.html': {} },
    }], ['typeormmodule.forfeature([category', {
      '_index': 417,
      'title': {},
      'body': { 'modules/CategoryModule.html': {} },
    }], ['typeormmodule.forfeature([currency', {
      '_index': 472,
      'title': {},
      'body': { 'modules/CurrencyModule.html': {} },
    }], ['typeormmodule.forfeature([operation', {
      '_index': 704,
      'title': {},
      'body': { 'modules/OperationModule.html': {} },
    }], ['typeormmodule.forfeature([setting', {
      '_index': 771,
      'title': {},
      'body': { 'modules/SettingModule.html': {} },
    }], ['typeormmodule.forfeature([user', {
      '_index': 781,
      'title': {},
      'body': { 'modules/SharedModule.html': {}, 'modules/UserModule.html': {} },
    }], ['typeormmodule.forroot', {
      '_index': 305,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['types', {
      '_index': 1032,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['types.includes(metatype', {
      '_index': 1033,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['types/jsonwebtoken', {
      '_index': 1095,
      'title': {},
      'body': { 'dependencies.html': {} },
    }], ['typescript', { '_index': 1139, 'title': {}, 'body': { 'index.html': {} } }], ['undefined', {
      '_index': 50,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'classes/Category.html': {},
        'classes/Currency.html': {},
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Notification.html': {},
        'classes/Operation.html': {},
        'classes/Report.html': {},
        'classes/Subcategory.html': {},
        'classes/Task.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['undefined)@jointable', {
      '_index': 271,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['unit', { '_index': 1152, 'title': {}, 'body': { 'index.html': {} } }], ['updateaccount', {
      '_index': 126,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['updateaccount(accountid', {
      '_index': 146,
      'title': {},
      'body': { 'controllers/AccountController.html': {}, 'injectables/AccountService.html': {} },
    }], ['updates', {
      '_index': 149,
      'title': {},
      'body': { 'controllers/AccountController.html': {} },
    }], ['updating', {
      '_index': 225,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['uploading', {
      '_index': 587,
      'title': {},
      'body': { 'classes/Instalment.html': {}, 'classes/Operation.html': {} },
    }], ['useclass', {
      '_index': 307,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['useguards', {
      '_index': 154,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/AuthController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['useguards(authguard(\'jwt', {
      '_index': 161,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/CategoryController.html': {},
        'controllers/OperationController.html': {},
        'controllers/UserController.html': {},
      },
    }], ['user', {
      '_index': 25,
      'title': { 'classes/User.html': {} },
      'body': {
        'classes/Account.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'controllers/AuthController.html': {},
        'classes/Category.html': {},
        'injectables/JwtStrategy.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/Notification.html': {},
        'classes/Setting.html': {},
        'modules/SharedModule.html': {},
        'classes/Template.html': {},
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'classes/UserModel.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
        'coverage.html': {},
      },
    }], ['user\'s', {
      '_index': 133,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'controllers/UserController.html': {},
        'injectables/ValidationPipe.html': {},
      },
    }], ['user.achievements', {
      '_index': 275,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['user.birthdate', {
      '_index': 977,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['user.controller', {
      '_index': 926,
      'title': {},
      'body': { 'modules/UserModule.html': {} },
    }], ['user.dto', {
      '_index': 902,
      'title': {},
      'body': { 'controllers/UserController.html': {}, 'injectables/UserService.html': {} },
    }], ['user.email', {
      '_index': 889,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['user.entity', {
      '_index': 921,
      'title': {},
      'body': { 'classes/UserModel.html': {}, 'modules/UserModule.html': {}, 'injectables/UserService.html': {} },
    }], ['user.firstname', {
      '_index': 973,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['user.fromdto(userdto', {
      '_index': 969,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['user.id', {
      '_index': 99,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Template.html': {}, 'classes/UserModel.html': {} },
    }], ['user.lastname', {
      '_index': 975,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['user.model', {
      '_index': 876,
      'title': {},
      'body': { 'classes/User.html': {}, 'controllers/UserController.html': {}, 'injectables/UserService.html': {} },
    }], ['user.notifications', {
      '_index': 669,
      'title': {},
      'body': { 'classes/Notification.html': {} },
    }], ['user.password', {
      '_index': 891,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['user.service', {
      '_index': 901,
      'title': {},
      'body': { 'controllers/UserController.html': {}, 'modules/UserModule.html': {} },
    }], ['user.sex', {
      '_index': 979,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['user.tomodel', {
      '_index': 959,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['user/user.entity', {
      '_index': 87,
      'title': {},
      'body': {
        'classes/Account.html': {},
        'modules/AccountModule.html': {},
        'injectables/AccountService.html': {},
        'classes/Achievement.html': {},
        'classes/Notification.html': {},
        'classes/Setting.html': {},
        'modules/SharedModule.html': {},
        'classes/Template.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['user/user.module', {
      '_index': 292,
      'title': {},
      'body': { 'modules/AppModule.html': {} },
    }], ['user/user.service', {
      '_index': 335,
      'title': {},
      'body': {
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'modules/SharedModule.html': {},
      },
    }], ['usercontroller', {
      '_index': 894,
      'title': { 'controllers/UserController.html': {} },
      'body': { 'controllers/UserController.html': {}, 'modules/UserModule.html': {}, 'coverage.html': {} },
    }], ['userdto', {
      '_index': 327,
      'title': { 'classes/UserDto.html': {} },
      'body': {
        'controllers/AuthController.html': {},
        'controllers/UserController.html': {},
        'classes/UserDto.html': {},
        'injectables/UserService.html': {},
        'coverage.html': {},
      },
    }], ['userdto.birthdate', {
      '_index': 978,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['userdto.firstname', {
      '_index': 974,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['userdto.lastname', {
      '_index': 976,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['userdto.sex', {
      '_index': 980,
      'title': {},
      'body': { 'injectables/UserService.html': {} },
    }], ['userid', {
      '_index': 134,
      'title': {},
      'body': {
        'controllers/AccountController.html': {},
        'injectables/AccountService.html': {},
        'controllers/UserController.html': {},
        'injectables/UserService.html': {},
        'classes/Userstasks.html': {},
      },
    }], ['userid2', {
      '_index': 995,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['userid2.id', {
      '_index': 996,
      'title': {},
      'body': { 'classes/Userstasks.html': {} },
    }], ['usermodel', {
      '_index': 872,
      'title': { 'classes/UserModel.html': {} },
      'body': {
        'classes/User.html': {},
        'controllers/UserController.html': {},
        'classes/UserModel.html': {},
        'injectables/UserService.html': {},
        'coverage.html': {},
      },
    }], ['usermodel(this', {
      '_index': 893,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['usermodule', {
      '_index': 287,
      'title': { 'modules/UserModule.html': {} },
      'body': { 'modules/AppModule.html': {}, 'modules/UserModule.html': {}, 'modules.html': {}, 'overview.html': {} },
    }], ['userrepository', {
      '_index': 216,
      'title': {},
      'body': { 'injectables/AccountService.html': {}, 'injectables/UserService.html': {} },
    }], ['users', {
      '_index': 263,
      'title': {},
      'body': { 'classes/Achievement.html': {} },
    }], ['userservice', {
      '_index': 334,
      'title': { 'injectables/UserService.html': {} },
      'body': {
        'controllers/AuthController.html': {},
        'injectables/AuthService.html': {},
        'modules/SharedModule.html': {},
        'controllers/UserController.html': {},
        'modules/UserModule.html': {},
        'injectables/UserService.html': {},
        'coverage.html': {},
        'overview.html': {},
      },
    }], ['userstasks', {
      '_index': 793,
      'title': { 'classes/Userstasks.html': {} },
      'body': { 'classes/Task.html': {}, 'classes/User.html': {}, 'classes/Userstasks.html': {}, 'coverage.html': {} },
    }], ['userstasks.taskid', {
      '_index': 806,
      'title': {},
      'body': { 'classes/Task.html': {} },
    }], ['userstasks.userid', {
      '_index': 882,
      'title': {},
      'body': { 'classes/User.html': {} },
    }], ['userstasks/userstasks.entity', {
      '_index': 805,
      'title': {},
      'body': { 'classes/Task.html': {}, 'classes/User.html': {} },
    }], ['utilities/utils', {
      '_index': 879,
      'title': {},
      'body': { 'classes/User.html': {}, 'classes/UserDto.html': {} },
    }], ['użytkownika', {
      '_index': 362,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['validate', {
      '_index': 613,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'injectables/ValidationPipe.html': {} },
    }], ['validate(object', {
      '_index': 1028,
      'title': {},
      'body': { 'injectables/ValidationPipe.html': {} },
    }], ['validate(payload', {
      '_index': 616,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['validateuser', {
      '_index': 364,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['validateuser(payload', {
      '_index': 371,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['validating', {
      '_index': 620,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'injectables/ValidationPipe.html': {} },
    }], ['validation', {
      '_index': 611,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {}, 'injectables/ValidationPipe.html': {} },
    }], ['validationpipe', {
      '_index': 997,
      'title': { 'injectables/ValidationPipe.html': {} },
      'body': { 'injectables/ValidationPipe.html': {}, 'coverage.html': {} },
    }], ['validator', {
      '_index': 181,
      'title': {},
      'body': {
        'classes/AccountDto.html': {},
        'classes/LoginRegisterDTO.html': {},
        'classes/UserDto.html': {},
        'injectables/ValidationPipe.html': {},
        'dependencies.html': {},
      },
    }], ['value', {
      '_index': 487,
      'title': {},
      'body': {
        'classes/Cyclic.html': {},
        'classes/Event.html': {},
        'classes/Instalment.html': {},
        'classes/InstalmentDate.html': {},
        'classes/Operation.html': {},
        'classes/Template.html': {},
        'injectables/ValidationPipe.html': {},
        'miscellaneous/enumerations.html': {},
      },
    }], ['values', {
      '_index': 735,
      'title': {},
      'body': { 'classes/Report.html': {} },
    }], ['verifiedcallback', {
      '_index': 618,
      'title': {},
      'body': { 'injectables/JwtStrategy.html': {} },
    }], ['visualization', {
      '_index': 48,
      'title': {},
      'body': { 'classes/Account.html': {}, 'classes/Category.html': {}, 'classes/Subcategory.html': {} },
    }], ['void', { '_index': 556, 'title': {}, 'body': { 'classes/HttpErrorFilter.html': {} } }], ['w', {
      '_index': 748,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['waluty(currid', {
      '_index': 253,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['warranty', {
      '_index': 677,
      'title': {},
      'body': { 'classes/Operation.html': {} },
    }], ['watch', { '_index': 1148, 'title': {}, 'body': { 'index.html': {} } }], ['web', {
      '_index': 756,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['webmode', {
      '_index': 743,
      'title': {},
      'body': { 'classes/Setting.html': {} },
    }], ['website', { '_index': 1177, 'title': {}, 'body': { 'index.html': {} } }], ['yes', {
      '_index': 226,
      'title': {},
      'body': { 'injectables/AccountService.html': {} },
    }], ['you\'d', { '_index': 1168, 'title': {}, 'body': { 'index.html': {} } }], ['za', {
      '_index': 360,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['zawierający', {
      '_index': 356,
      'title': {},
      'body': { 'injectables/AuthService.html': {} },
    }], ['zmiany', { '_index': 747, 'title': {}, 'body': { 'classes/Setting.html': {} } }], ['zoom', {
      '_index': 200,
      'title': {},
      'body': {
        'modules/AccountModule.html': {},
        'modules/AppModule.html': {},
        'modules/AuthModule.html': {},
        'modules/CategoryModule.html': {},
        'modules/CurrencyModule.html': {},
        'modules/OperationModule.html': {},
        'modules/SettingModule.html': {},
        'modules/SharedModule.html': {},
        'modules/UserModule.html': {},
        'overview.html': {},
      },
    }]],
    'pipeline': ['stemmer'],
  },
  'store': {
    'classes/Account.html': {
      'url': 'classes/Account.html',
      'title': 'class - Account',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Account\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/account/account.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Account table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                balance\n                            \n                            \n                                budget\n                            \n                            \n                                color\n                            \n                            \n                                currency\n                            \n                            \n                                cyclics\n                            \n                            \n                                events\n                            \n                            \n                                id\n                            \n                            \n                                instalments\n                            \n                            \n                                name\n                            \n                            \n                                operationQuantity\n                            \n                            \n                                operations\n                            \n                            \n                                reports\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromDTO\n                            \n                            \n                                    Public\n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            balance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:47\n                            \n                        \n\n                \n                    \n                        Balance of the account that includes all incomes minus operations.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            budget\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:42\n                            \n                        \n\n                \n                    \n                        Budget of the account that includes all incomes.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:37\n                            \n                        \n\n                \n                    \n                        Color of the account (front-end visualization).\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Currency\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cyclics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Cyclic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            events\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Event\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:27\n                            \n                        \n\n                \n                    \n                        Identifier of the account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            instalments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Instalment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:32\n                            \n                        \n\n                \n                    \n                        Name of the account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            operationQuantity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:52\n                            \n                        \n\n                \n                    \n                        Quantity of all account operations.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            operations\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Operation[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            reports\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Report[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.entity.ts:82\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            fromDTO\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fromDTO(user: User, currency: Currency, model: AccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/account/account.entity.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currency\n                                    \n                                                Currency\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    model\n                                    \n                                                AccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Account\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toModel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel()\n                \n            \n\n\n            \n                \n                    Defined in src/account/account.entity.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         AccountModel\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { Report } from \'../report/report.entity\';\nimport { Event } from \'../event/event.entity\';\nimport { Currency } from \'../currency/currency.entity\';\nimport { Cyclic } from \'../cyclic/cyclic.entity\';\nimport { User } from \'../user/user.entity\';\nimport { Operation } from \'../operation/operation.entity\';\nimport { Instalment } from \'../instalment/instalment.entity\';\nimport { AccountDto } from \'./account.dto\';\nimport { AccountModel } from \'./account.model\';\n\n/**\n * This entity describes the Account table.\n */\n@Entity()\nexport class Account {\n  /**\n   * Identifier of the account.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Name of the account.\n   */\n  @Column({ length: 45 })\n  name: string;\n  /**\n   * Color of the account (front-end visualization).\n   */\n  @Column({ length: 45 })\n  color: string;\n  /**\n   * Budget of the account that includes all incomes.\n   */\n  @Column()\n  budget: number;\n  /**\n   * Balance of the account that includes all incomes minus operations.\n   */\n  @Column()\n  balance: number;\n  /**\n   * Quantity of all account operations.\n   */\n  @Column()\n  operationQuantity: number;\n  @OneToMany(\n    type => Report,\n    reports => reports.id,\n  )\n  reports: Report[];\n  @OneToMany(\n    type => Event,\n    events => events.id,\n  )\n  events: Event;\n  @OneToMany(\n    type => Cyclic,\n    cyclics => cyclics.id,\n  )\n  cyclics: Cyclic[];\n  @OneToMany(\n    type => Operation,\n    operations => operations.id,\n  )\n  operations: Operation[];\n  @ManyToOne(\n    type => Currency,\n    currency => currency.id,\n  )\n  currency: Currency;\n  @ManyToOne(\n    type => User,\n    user => user.id,\n  )\n  user: User;\n  @OneToMany(\n    type => Instalment,\n    instalments => instalments.id,\n  )\n  instalments: Instalment[];\n\n  public static fromDTO(\n    user: User,\n    currency: Currency,\n    model: AccountDto,\n  ): Account {\n    const account = new Account();\n    account.name = model.name;\n    account.budget = model.budget;\n    account.balance = model.balance;\n    account.user = user;\n    account.currency = currency;\n    return account;\n  }\n  public toModel(): AccountModel {\n    return new AccountModel(this);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/AccountController.html': {
      'url': 'controllers/AccountController.html',
      'title': 'controller - AccountController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  AccountController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/account/account.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                account\n            \n\n            \n                Description\n            \n            \n                Controller responsible for CRUD operations on account.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                deleteAccount\n                            \n                            \n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(userId: number, currId: number, accountDto: AccountDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'add/:id/:curr\')\n                \n            \n\n            \n                \n                    Defined in src/account/account.controller.ts:29\n                \n            \n\n\n            \n                \n                    This endpoint creates user\'s account.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User\'s identifier\n\n                                    \n                                \n                                \n                                    currId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currency identifier\n\n                                    \n                                \n                                \n                                    accountDto\n                                    \n                                                AccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data Transfer Object containing information about the account\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteAccount(accountId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(\'delete/:id\')\n                \n            \n\n            \n                \n                    Defined in src/account/account.controller.ts:58\n                \n            \n\n\n            \n                \n                    This endpoint deletes user\'s account.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User\'s account identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \nupdateAccount(accountId: number, accountDto: AccountDto, currId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'update/:id\')\n                \n            \n\n            \n                \n                    Defined in src/account/account.controller.ts:45\n                \n            \n\n\n            \n                \n                    This endpoint updates user\'s account.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User\'s account identifier\n\n                                    \n                                \n                                \n                                    accountDto\n                                    \n                                                AccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data Transfer Object containing information about the account\n\n                                    \n                                \n                                \n                                    currId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Currency identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Account\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller, Delete,\n  Param,\n  Post,\n  UseGuards,\n} from \'@nestjs/common\';\nimport { AccountService } from \'./account.service\';\nimport { AuthGuard } from \'@nestjs/passport\';\nimport { AccountModel } from \'./account.model\';\nimport { AccountDto } from \'./account.dto\';\n\n/**\n * Controller responsible for CRUD operations on account.\n */\n@Controller(\'account\')\n@UseGuards(AuthGuard(\'jwt\'))\nexport class AccountController {\n  constructor(private readonly accountService: AccountService) {}\n\n  /**\n   * This endpoint creates user\'s account.\n   * @param userId User\'s identifier\n   * @param currId Currency identifier\n   * @param accountDto Data Transfer Object containing information about the account\n   * @return Account\n   */\n  @Post(\'add/:id/:curr\')\n  async createAccount(\n    @Param(\'id\') userId: number,\n    @Param(\'curr\') currId: number,\n    @Body() accountDto: AccountDto,\n  ): Promise {\n    return this.accountService.createAccount(userId, currId, accountDto);\n  }\n\n  /**\n   * This endpoint updates user\'s account.\n   * @param accountId User\'s account identifier\n   * @param accountDto Data Transfer Object containing information about the account\n   * @param currId Currency identifier\n   * @return Account\n   */\n  @Post(\'update/:id\')\n  updateAccount(\n    @Param(\'id\') accountId: number,\n    @Body() accountDto: AccountDto,\n    @Body(\'currId\') currId: number,\n  ): Promise {\n    return this.accountService.updateAccount(accountId, accountDto, currId);\n  }\n\n  /**\n   * This endpoint deletes user\'s account.\n   * @param accountId User\'s account identifier\n   */\n  @Delete(\'delete/:id\')\n  deleteAccount(@Param(\'id\') accountId: number) {\n    return this.accountService.deleteAccount(accountId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/AccountDto.html': {
      'url': 'classes/AccountDto.html',
      'title': 'class - AccountDto',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/account/account.dto.ts\n        \n\n            \n                Description\n            \n            \n                Data Transfer Object containing information about an account.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                balance\n                            \n                            \n                                budget\n                            \n                            \n                                color\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            balance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.dto.ts:21\n                            \n                        \n\n                \n                    \n                        Balance of the account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            budget\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsPositive()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.dto.ts:17\n                            \n                        \n\n                \n                    \n                        Budget of the account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.dto.ts:25\n                            \n                        \n\n                \n                    \n                        Dominant color of the account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.dto.ts:12\n                            \n                        \n\n                \n                    \n                        Name of the account.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsPositive, IsString } from \'class-validator\';\n\n/**\n * Data Transfer Object containing information about an account.\n */\nexport class AccountDto {\n  /**\n   * Name of the account.\n   */\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n  /**\n   * Budget of the account.\n   */\n  @IsPositive()\n  budget: number;\n  /**\n   * Balance of the account.\n   */\n  balance: number;\n  /**\n   * Dominant color of the account.\n   */\n  color: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/AccountModel.html': {
      'url': 'classes/AccountModel.html',
      'title': 'class - AccountModel',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AccountModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/account/account.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(account: Account)\n                    \n                \n                        \n                            \n                                Defined in src/account/account.model.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        account\n                                                  \n                                                        \n                                                                        Account\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/account/account.model.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Account } from \'./account.entity\';\n\nexport class AccountModel {\n  id: number;\n  constructor(account: Account) {\n    this.id = account.id;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/AccountModule.html': {
      'url': 'modules/AccountModule.html',
      'title': 'module - AccountModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    AccountModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_providers\n\n\n\n\nAccountService\n\nAccountService\n\n\n\nAccountModule\n\nAccountModule\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/account/account.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AccountService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AccountController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { AccountService } from \'./account.service\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { Account } from \'./account.entity\';\nimport { AccountController } from \'./account.controller\';\nimport { Currency } from \'../currency/currency.entity\';\nimport { User } from \'../user/user.entity\';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Account, Currency, User])],\n  providers: [AccountService],\n  controllers: [AccountController],\n  exports: [],\n})\nexport class AccountModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/AccountService.html': {
      'url': 'injectables/AccountService.html',
      'title': 'injectable - AccountService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AccountService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/account/account.service.ts\n        \n\n            \n                Description\n            \n            \n                File containing method implementations of CRUD operations for an account.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createAccount\n                            \n                            \n                                    Async\n                                deleteAccount\n                            \n                            \n                                    Async\n                                updateAccount\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(accountRepository: Repository, userRepository: Repository, currencyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/account/account.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        accountRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        currencyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAccount(userId: number, currId: number, account: AccountDto)\n                \n            \n\n\n            \n                \n                    Defined in src/account/account.service.ts:27\n                \n            \n\n\n            \n                \n                    Method responsible for creating an account.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    account\n                                    \n                                                AccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAccount(accountId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/account/account.service.ts:88\n                \n            \n\n\n            \n                \n                    Method responsible for deleting an account.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateAccount\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAccount(accountId: number, accountDto: AccountDto, currId?: number)\n                \n            \n\n\n            \n                \n                    Defined in src/account/account.service.ts:56\n                \n            \n\n\n            \n                \n                    Method responsible for updating an account.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    accountId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    accountDto\n                                    \n                                                AccountDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    currId\n                                    \n                                                number\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \'@nestjs/common\';\nimport { InjectRepository } from \'@nestjs/typeorm\';\nimport { Repository } from \'typeorm\';\nimport { Account } from \'./account.entity\';\nimport { AccountDto } from \'./account.dto\';\nimport { User } from \'../user/user.entity\';\nimport { Currency } from \'../currency/currency.entity\';\nimport { AccountModel } from \'./account.model\';\n\n/**\n * File containing method implementations of CRUD operations for an account.\n */\n@Injectable()\nexport class AccountService {\n  constructor(\n    @InjectRepository(Account)\n    private readonly accountRepository: Repository,\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n    @InjectRepository(Currency)\n    private readonly currencyRepository: Repository,\n  ) {}\n\n  /**\n   * Method responsible for creating an account.\n   */\n  async createAccount(\n    userId: number,\n    currId: number,\n    account: AccountDto,\n  ): Promise {\n    const user: User = await this.userRepository\n      .findOneOrFail(userId)\n      .catch(x => {\n        throw new HttpException(\n          \'Niepoprawny request(user)\',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n    const currency: Currency = await this.currencyRepository\n      .findOneOrFail(currId)\n      .catch(x => {\n        throw new HttpException(\n          \'Niepoprawny request(waluta)\',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n    const newAccount: Account = Account.fromDTO(user, currency, account);\n    await this.accountRepository.save(newAccount);\n    return newAccount.toModel();\n  }\n\n  /**\n   * Method responsible for updating an account.\n   */\n  async updateAccount(\n    accountId: number,\n    accountDto: AccountDto,\n    currId?: number,\n  ): Promise {\n    const account = await this.accountRepository\n      .findOneOrFail(accountId)\n      .catch(x => {\n        throw new HttpException(\n          \'Niepoprawny request(id konta)\',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n    if (currId) {\n      account.currency = await this.currencyRepository\n        .findOneOrFail(currId)\n        .catch(x => {\n          throw new HttpException(\n            \'Niepoprawny id waluty(currId)\',\n            HttpStatus.BAD_REQUEST,\n          );\n        });\n    }\n    account.budget = accountDto.budget;\n    account.name = accountDto.name;\n    await this.accountRepository.save(account);\n    return account.toModel();\n  }\n\n  /**\n   * Method responsible for deleting an account.\n   */\n  async deleteAccount(accountId: number) {\n    const account = await this.accountRepository\n      .findOneOrFail(accountId)\n      .catch(x => {\n        throw new HttpException(\n          \'Niepoprawny request(id konta)\',\n          HttpStatus.BAD_REQUEST,\n        );\n      });\n    await this.accountRepository.remove(account);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Achievement.html': {
      'url': 'classes/Achievement.html',
      'title': 'class - Achievement',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Achievement\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/achievement/achievement.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Achievement table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                experience\n                            \n                            \n                                id\n                            \n                            \n                                title\n                            \n                            \n                                users\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 500})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/achievement/achievement.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Description of the achievement.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            experience\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/achievement/achievement.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Experience of the achievement to gain.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/achievement/achievement.entity.ts:19\n                            \n                        \n\n                \n                    \n                        Identifier of the achievement.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/achievement/achievement.entity.ts:24\n                            \n                        \n\n                \n                    \n                        Title of the achievement.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            users\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined)@JoinTable()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/achievement/achievement.entity.ts:40\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinTable,\n  ManyToMany,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { User } from \'../user/user.entity\';\n\n/**\n * This entity describes the Achievement table.\n */\n@Entity()\nexport class Achievement {\n  /**\n   * Identifier of the achievement.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the achievement.\n   */\n  @Column({ length: 45 })\n  title: string;\n  /**\n   * Experience of the achievement to gain.\n   */\n  @Column()\n  experience: number;\n  /**\n   * Description of the achievement.\n   */\n  @Column({ length: 500 })\n  description: string;\n  @ManyToMany(\n    type => User,\n    user => user.achievements,\n  )\n  @JoinTable()\n  users: User[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/AppController.html': {
      'url': 'controllers/AppController.html',
      'title': 'controller - AppController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Controller } from \'@nestjs/common\';\n\n@Controller()\nexport class AppController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/AppModule.html': {
      'url': 'modules/AppModule.html',
      'title': 'module - AppModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAccountModule\n\nAccountModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCurrencyModule\n\nCurrencyModule\n\nAppModule -->\n\nCurrencyModule->AppModule\n\n\n\n\n\nOperationModule\n\nOperationModule\n\nAppModule -->\n\nOperationModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AccountModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            CategoryModule\n                        \n                        \n                            CurrencyModule\n                        \n                        \n                            OperationModule\n                        \n                        \n                            SharedModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { AppController } from \'./app.controller\';\nimport { AppService } from \'./app.service\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { UserModule } from \'./user/user.module\';\nimport { AuthModule } from \'./auth/auth.module\';\nimport { SharedModule } from \'./shared/shared.module\';\nimport { OperationModule } from \'./operation/operation.module\';\nimport { CategoryModule } from \'./category/category.module\';\nimport { APP_FILTER } from \'@nestjs/core\';\nimport { HttpErrorFilter } from \'./shared/http-error-filter\';\nimport { CurrencyModule } from \'./currency/currency.module\';\nimport { AccountModule } from \'./account/account.module\';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(),\n    AuthModule,\n    SharedModule,\n    UserModule,\n    OperationModule,\n    CategoryModule,\n    CurrencyModule,\n    AccountModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_FILTER,\n      useClass: HttpErrorFilter,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/AppService.html': {
      'url': 'injectables/AppService.html',
      'title': 'injectable - AppService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHello\n                        \n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return \'Saver - Financial Management Application\';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/AuthController.html': {
      'url': 'controllers/AuthController.html',
      'title': 'controller - AuthController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller responsible for login and register operations of the user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(userDTO: LoginRegisterDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'login\')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n                    This endpoint retrieves identifier and authorization token of the logged user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Identifier and auth. token of the user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            register\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    register(userDTO: LoginRegisterDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'register\')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n                    This endpoint retrieves identifier and authorization token of the newly registered user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        Identifier and auth. token of the user\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Post, UseGuards } from \'@nestjs/common\';\nimport { UserService } from \'../user/user.service\';\nimport { AuthGuard } from \'@nestjs/passport\';\nimport { AuthService } from \'./auth.service\';\nimport { LoginRegisterDTO } from \'./auth.dto\';\n\n/**\n * Controller responsible for login and register operations of the user.\n */\n@Controller()\nexport class AuthController {\n  constructor(\n    private readonly userService: UserService,\n    private readonly authService: AuthService,\n  ) {}\n\n  /**\n   * This endpoint retrieves identifier and authorization token of the newly registered user.\n   * @param Data Transfer Object containing credentials of the user\n   * @return Identifier and auth. token of the user\n   */\n  @Post(\'register\')\n  async register(@Body() userDTO: LoginRegisterDTO): Promise {\n    const user = await this.userService.registerUser(userDTO);\n    const payload = {\n      email: user,\n    };\n    const token = await this.authService.signByPayload(payload);\n    return { user, token };\n  }\n\n  /**\n   * This endpoint retrieves identifier and authorization token of the logged user.\n   * @param Data Transfer Object containing credentials of the user\n   * @return Identifier and auth. token of the user\n   */\n  @Post(\'login\')\n  async login(@Body() userDTO: LoginRegisterDTO): Promise {\n    const user = await this.userService.findByLogin(userDTO);\n    const payload = {\n      email: user,\n    };\n    const token = await this.authService.signByPayload(payload);\n    return { user, token };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/AuthModule.html': {
      'url': 'modules/AuthModule.html',
      'title': 'module - AuthModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nSharedModule\n\nSharedModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { AuthController } from \'./auth.controller\';\nimport { SharedModule } from \'../shared/shared.module\';\nimport { AuthService } from \'./auth.service\';\nimport { JwtStrategy } from \'./jwt.strategy\';\n\n@Module({\n  imports: [SharedModule],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/AuthService.html': {
      'url': 'injectables/AuthService.html',
      'title': 'injectable - AuthService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                Plik zawierający implementacje metod odpowiadających za autoryzacje użytkownika.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signByPayload\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signByPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signByPayload(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:24\n                \n            \n\n\n            \n                \n                    Metoda odpowiedzialna za ???\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n                    Metoda odpowiedzialna za ???\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\nimport { UserService } from \'../user/user.service\';\nimport { sign } from \'jsonwebtoken\';\n\n/**\n * Plik zawierający implementacje metod odpowiadających za autoryzacje użytkownika.\n */\n@Injectable()\nexport class AuthService {\n  constructor(private userService: UserService) {}\n\n  /**\n   * Metoda odpowiedzialna za ???\n   * @param payload\n   */\n  async validateUser(payload: any) {\n    return await this.userService.findByPayload(payload);\n  }\n\n  /**\n   * Metoda odpowiedzialna za ???\n   * @param payload\n   */\n  async signByPayload(payload: any) {\n    return sign(payload, process.env.SECRET, {\n      expiresIn: process.env.EXPIRES_TOKEN,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Category.html': {
      'url': 'classes/Category.html',
      'title': 'class - Category',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Category table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                color\n                            \n                            \n                                id\n                            \n                            \n                                limit\n                            \n                            \n                                subcategories\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Dominant color of the category (front-end visualization).\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Identifier of the category.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            limit\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Limit of the category set by the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subcategories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subcategory[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/category/category.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Title of the category.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Subcategory } from \'../subcategory/subcategory.entity\';\n\n/**\n * This entity describes the Category table.\n */\n@Entity()\nexport class Category {\n  /**\n   * Identifier of the category.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the category.\n   */\n  @Column({ length: 45 })\n  title: string;\n  /**\n   * Dominant color of the category (front-end visualization).\n   */\n  @Column({ length: 20 })\n  color: string;\n  /**\n   * Limit of the category set by the user.\n   */\n  @Column()\n  limit: number;\n  @OneToMany(\n    type => Subcategory,\n    subcategories => subcategories.id,\n  )\n  subcategories: Subcategory[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/CategoryController.html': {
      'url': 'controllers/CategoryController.html',
      'title': 'controller - CategoryController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  CategoryController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                category\n            \n\n            \n                Description\n            \n            \n                Controller responsible for CRUD operations on categories.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            addCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    addCategory(categoryDTO: CategoryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'add\')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/category/category.controller.ts:20\n                \n            \n\n\n            \n                \n                    This endpoint creates a new category.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    categoryDTO\n                                    \n                                                CategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data Transfer Object containing information about the category.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        Category\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, UseGuards } from \'@nestjs/common\';\nimport { CategoryDTO } from \'./category.model\';\nimport { CategoryService } from \'./category.service\';\nimport { AuthGuard } from \'@nestjs/passport\';\n\n/**\n * Controller responsible for CRUD operations on categories.\n */\n@Controller(\'category\')\nexport class CategoryController {\n  constructor(private readonly categoryService: CategoryService) {}\n\n  /**\n   * This endpoint creates a new category.\n   * @param categoryDTO Data Transfer Object containing information about the category.\n   * @return Category\n   */\n  @Post(\'add\')\n  @UseGuards(AuthGuard(\'jwt\'))\n  async addCategory(@Body() categoryDTO: CategoryDTO) {\n    const category = await this.categoryService.createCategory(categoryDTO);\n    return { category };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'interfaces/CategoryDTO.html': {
      'url': 'interfaces/CategoryDTO.html',
      'title': 'interface - CategoryDTO',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  CategoryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.model.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        color\n                                \n                                \n                                        title\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface CategoryDTO {\n  title: string;\n  color: string;\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/CategoryModule.html': {
      'url': 'modules/CategoryModule.html',
      'title': 'module - CategoryModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    CategoryModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\n\nCategoryService\n\nCategoryService\n\n\n\nCategoryModule\n\nCategoryModule\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/category/category.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoryService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoryController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { CategoryService } from \'./category.service\';\nimport { CategoryController } from \'./category.controller\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { Category } from \'./category.entity\';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Category])],\n  providers: [CategoryService],\n  controllers: [CategoryController],\n})\nexport class CategoryModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/CategoryService.html': {
      'url': 'injectables/CategoryService.html',
      'title': 'injectable - CategoryService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/category/category.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/category/category.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(categoryDTO: CategoryDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/category/category.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    categoryDTO\n                                    \n                                                CategoryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\nimport { InjectRepository } from \'@nestjs/typeorm\';\nimport { Category } from \'./category.entity\';\nimport { Repository } from \'typeorm\';\nimport { CategoryDTO } from \'./category.model\';\n\n@Injectable()\nexport class CategoryService {\n  constructor(\n    @InjectRepository(Category)\n    private readonly categoryRepository: Repository,\n  ) {}\n\n  async createCategory(categoryDTO: CategoryDTO) {\n    const category = await this.categoryRepository.save(categoryDTO);\n    return category.id;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Currency.html': {
      'url': 'classes/Currency.html',
      'title': 'class - Currency',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Currency\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/currency/currency.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Currency table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                code\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                            \n                                symbol\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accounts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 3})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.entity.ts:24\n                            \n                        \n\n                \n                    \n                        Standardized code of the currency.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.entity.ts:14\n                            \n                        \n\n                \n                    \n                        Identifier of the currency.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.entity.ts:19\n                            \n                        \n\n                \n                    \n                        Name of the currency.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            symbol\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 25, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Standardized symbol of the currency.\n\n                    \n                \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toModel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel()\n                \n            \n\n\n            \n                \n                    Defined in src/currency/currency.entity.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         CurrencyModel\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Account } from \'../account/account.entity\';\nimport { CurrencyModel } from \'./currency.model\';\n\n/**\n * This entity describes the Currency table.\n */\n@Entity()\nexport class Currency {\n  /**\n   * Identifier of the currency.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Name of the currency.\n   */\n  @Column({ length: 20 })\n  name: string;\n  /**\n   * Standardized code of the currency.\n   */\n  @Column({ length: 3 })\n  code: string;\n  /**\n   * Standardized symbol of the currency.\n   */\n  @Column({ length: 25, nullable: true })\n  symbol: string;\n  @OneToMany(\n    type => Account,\n    accounts => accounts.id,\n  )\n  accounts: Account[];\n\n  public toModel(): CurrencyModel {\n    return new CurrencyModel(this);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/CurrencyController.html': {
      'url': 'controllers/CurrencyController.html',
      'title': 'controller - CurrencyController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  CurrencyController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/currency/currency.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                currency\n            \n\n            \n                Description\n            \n            \n                Controller responsible for CRUD operations on currency.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrencyList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrencyList\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrencyList()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(\'all\')\n                \n            \n\n            \n                \n                    Defined in src/currency/currency.controller.ts:15\n                \n            \n\n\n            \n                \n                    This endpoint retrieves all the currencies.\n\n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from \'@nestjs/common\';\nimport { CurrencyService } from \'./currency.service\';\n\n/**\n * Controller responsible for CRUD operations on currency.\n */\n@Controller(\'currency\')\nexport class CurrencyController {\n  constructor(private readonly currencyService: CurrencyService) {}\n\n  /**\n   * This endpoint retrieves all the currencies.\n   */\n  @Get(\'all\')\n  getCurrencyList() {\n    return this.currencyService.getAllCurrency();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/CurrencyModel.html': {
      'url': 'classes/CurrencyModel.html',
      'title': 'class - CurrencyModel',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CurrencyModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/currency/currency.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                code\n                            \n                            \n                                id\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(currency: Currency)\n                    \n                \n                        \n                            \n                                Defined in src/currency/currency.model.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        currency\n                                                  \n                                                        \n                                                                        Currency\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            code\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.model.ts:6\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.model.ts:4\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            name\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                        \n                            \n                                    Defined in src/currency/currency.model.ts:5\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Currency } from \'./currency.entity\';\n\nexport class CurrencyModel {\n  id: number;\n  name: string;\n  code: string;\n  constructor(currency: Currency) {\n    this.id = currency.id;\n    this.name = currency.name;\n    this.code = currency.code;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/CurrencyModule.html': {
      'url': 'modules/CurrencyModule.html',
      'title': 'module - CurrencyModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    CurrencyModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CurrencyModule\n\n\n\ncluster_CurrencyModule_providers\n\n\n\n\nCurrencyService\n\nCurrencyService\n\n\n\nCurrencyModule\n\nCurrencyModule\n\nCurrencyModule -->\n\nCurrencyService->CurrencyModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/currency/currency.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CurrencyService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CurrencyController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { CurrencyService } from \'./currency.service\';\nimport { CurrencyController } from \'./currency.controller\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { Currency } from \'./currency.entity\';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Currency])],\n  providers: [CurrencyService],\n  controllers: [CurrencyController],\n})\nexport class CurrencyModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/CurrencyService.html': {
      'url': 'injectables/CurrencyService.html',
      'title': 'injectable - CurrencyService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CurrencyService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/currency/currency.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllCurrency\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(currencyRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/currency/currency.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        currencyRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getAllCurrency\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllCurrency()\n                \n            \n\n\n            \n                \n                    Defined in src/currency/currency.service.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\nimport { InjectRepository } from \'@nestjs/typeorm\';\nimport { Repository } from \'typeorm\';\nimport { Currency } from \'./currency.entity\';\n\n@Injectable()\nexport class CurrencyService {\n  constructor(\n    @InjectRepository(Currency)\n    private readonly currencyRepository: Repository,\n  ) {}\n\n  async getAllCurrency() {\n    const currencies: Currency[] = await this.currencyRepository.find();\n    return currencies.map((currency: Currency) => currency.toModel());\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Cyclic.html': {
      'url': 'classes/Cyclic.html',
      'title': 'class - Cyclic',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Cyclic\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/cyclic/cyclic.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the cyclic operations table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                dateFrom\n                            \n                            \n                                dateTo\n                            \n                            \n                                description\n                            \n                            \n                                howOften\n                            \n                            \n                                id\n                            \n                            \n                                intoAccount\n                            \n                            \n                                nextDate\n                            \n                            \n                                subcategory\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:39\n                            \n                        \n\n                \n                    \n                        Starting date of the cyclic operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:44\n                            \n                        \n\n                \n                    \n                        Ending date of the cyclic operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:24\n                            \n                        \n\n                \n                    \n                        Description of the cyclic operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            howOften\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:54\n                            \n                        \n\n                \n                    \n                        Number of days interval if there is no date From/To.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:14\n                            \n                        \n\n                \n                    \n                        Identifier of the cyclic operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intoAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:49\n                            \n                        \n\n                \n                    \n                        Option that specifies if the operation is taken into consideration or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nextDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:59\n                            \n                        \n\n                \n                    \n                        The day of the acceptance of the next payment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subcategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subcategory\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:19\n                            \n                        \n\n                \n                    \n                        Title of the cyclic operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Type of the cyclic operation (income/outcome).\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/cyclic/cyclic.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Value of the cyclic operation.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Account } from \'../account/account.entity\';\nimport { Subcategory } from \'../subcategory/subcategory.entity\';\n\n/**\n * This entity describes the cyclic operations table.\n */\n@Entity()\nexport class Cyclic {\n  /**\n   * Identifier of the cyclic operation.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the cyclic operation.\n   */\n  @Column()\n  title: string;\n  /**\n   * Description of the cyclic operation.\n   */\n  @Column()\n  description: string;\n  /**\n   * Value of the cyclic operation.\n   */\n  @Column()\n  value: number;\n  /**\n   * Type of the cyclic operation (income/outcome).\n   */\n  @Column()\n  type: boolean;\n  /**\n   * Starting date of the cyclic operation.\n   */\n  @Column()\n  dateFrom: Date;\n  /**\n   * Ending date of the cyclic operation.\n   */\n  @Column()\n  dateTo: Date;\n  /**\n   * Option that specifies if the operation is taken into consideration or not.\n   */\n  @Column()\n  intoAccount: boolean;\n  /**\n   * Number of days interval if there is no date From/To.\n   */\n  @Column()\n  howOften: number;\n  /**\n   * The day of the acceptance of the next payment.\n   */\n  @Column()\n  nextDate: Date;\n  @ManyToOne(\n    type => Account,\n    account => account.id,\n  )\n  account: Account;\n  @ManyToOne(\n    type => Subcategory,\n    subcategory => subcategory.id,\n  )\n  subcategory: Subcategory;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Event.html': {
      'url': 'classes/Event.html',
      'title': 'class - Event',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Event\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/event/event.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Event table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                dateFrom\n                            \n                            \n                                dateTo\n                            \n                            \n                                description\n                            \n                            \n                                howMuchDays\n                            \n                            \n                                howOften\n                            \n                            \n                                id\n                            \n                            \n                                intoAccount\n                            \n                            \n                                isMultiDay\n                            \n                            \n                                isRepeating\n                            \n                            \n                                title\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:33\n                            \n                        \n\n                \n                    \n                        Starting date of the event.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:38\n                            \n                        \n\n                \n                    \n                        Ending date of the event.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 500})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Description of the event.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            howMuchDays\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:48\n                            \n                        \n\n                \n                    \n                        Number of days that event takes long.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            howOften\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:58\n                            \n                        \n\n                \n                    \n                        Number every how many the days event repeats.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Identifier of the event.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intoAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:63\n                            \n                        \n\n                \n                    \n                        Option that specifies if the event is taken into the consideration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isMultiDay\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:43\n                            \n                        \n\n                \n                    \n                        Option that specifies if the event is longer than 1 day.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isRepeating\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:53\n                            \n                        \n\n                \n                    \n                        Option that specifies if the event is repeats through the calendar.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Title of the event.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/event/event.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Estimated value of money for event.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Account } from \'../account/account.entity\';\n\n/**\n * This entity describes the Event table.\n */\n@Entity()\nexport class Event {\n  /**\n   * Identifier of the event.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the event.\n   */\n  @Column({ length: 45 })\n  title: string;\n  /**\n   * Description of the event.\n   */\n  @Column({ length: 500 })\n  description: string;\n  /**\n   * Estimated value of money for event.\n   */\n  @Column({ length: 45 })\n  value: string;\n  /**\n   * Starting date of the event.\n   */\n  @Column()\n  dateFrom: Date;\n  /**\n   * Ending date of the event.\n   */\n  @Column()\n  dateTo: Date;\n  /**\n   * Option that specifies if the event is longer than 1 day.\n   */\n  @Column()\n  isMultiDay: boolean;\n  /**\n   * Number of days that event takes long.\n   */\n  @Column()\n  howMuchDays: number;\n  /**\n   * Option that specifies if the event is repeats through the calendar.\n   */\n  @Column()\n  isRepeating: boolean;\n  /**\n   * Number every how many the days event repeats.\n   */\n  @Column()\n  howOften: number;\n  /**\n   * Option that specifies if the event is taken into the consideration.\n   */\n  @Column()\n  intoAccount: boolean;\n  @ManyToOne(\n    type => Account,\n    account => account.id,\n  )\n  account: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/HttpErrorFilter.html': {
      'url': 'classes/HttpErrorFilter.html',
      'title': 'class - HttpErrorFilter',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HttpErrorFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/http-error-filter.ts\n        \n\n            \n                Description\n            \n            \n                This file is responsible for filtering and formatting the errors.\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            catch\n                        \n                        \n                    \n                \n            \n            \n                \ncatch(exception: HttpException, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/http-error-filter.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                            HttpException\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ArgumentsHost,\n  Catch,\n  ExceptionFilter,\n  HttpException,\n} from \'@nestjs/common\';\n\n/**\n * This file is responsible for filtering and formatting the errors.\n */\n@Catch()\nexport class HttpErrorFilter implements ExceptionFilter {\n  catch(exception: HttpException, host: ArgumentsHost) {\n    const ctx = host.switchToHttp();\n    const request = ctx.getRequest();\n    const response = ctx.getResponse();\n    const status = exception.getStatus();\n\n    const errorResponse = {\n      code: status,\n      timestamp: new Date().toLocaleDateString(),\n      path: request.url,\n      method: request.method,\n      message: exception.message.error || exception.message || null,\n    };\n\n    response.status(status).json(errorResponse);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Instalment.html': {
      'url': 'classes/Instalment.html',
      'title': 'class - Instalment',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Instalment\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/instalment/instalment.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Instalment table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                dateFrom\n                            \n                            \n                                dateTo\n                            \n                            \n                                description\n                            \n                            \n                                file\n                            \n                            \n                                id\n                            \n                            \n                                instalmentsdate\n                            \n                            \n                                intoAccount\n                            \n                            \n                                nextPaymentId\n                            \n                            \n                                subcategory\n                            \n                            \n                                title\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Starting date of the instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:36\n                            \n                        \n\n                \n                    \n                        Ending date of the instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 300})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Description of the instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: \'blob\'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:61\n                            \n                        \n\n                \n                    \n                        Optional for uploading image of receipt of the instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:21\n                            \n                        \n\n                \n                    \n                        Identifier of the instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            instalmentsdate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     InstalmentDate[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intoAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:51\n                            \n                        \n\n                \n                    \n                        Option that specifies if the instalment is taken into account.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nextPaymentId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:56\n                            \n                        \n\n                \n                    \n                        Identifier of the next payment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subcategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subcategory\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:71\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 150})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Title of the instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalment/instalment.entity.ts:46\n                            \n                        \n\n                \n                    \n                        Value of the instalment.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { Account } from \'../account/account.entity\';\nimport { Subcategory } from \'../subcategory/subcategory.entity\';\nimport { InstalmentDate } from \'../instalmentdate/instalmentdate.entity\';\n\n/**\n * This entity describes the Instalment table.\n */\n@Entity()\nexport class Instalment {\n  /**\n   * Identifier of the instalment.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the instalment.\n   */\n  @Column({ length: 150 })\n  title: string;\n  /**\n   * Starting date of the instalment.\n   */\n  @Column()\n  dateFrom: Date;\n  /**\n   * Ending date of the instalment.\n   */\n  @Column()\n  dateTo: Date;\n  /**\n   * Description of the instalment.\n   */\n  @Column({ length: 300 })\n  description: string;\n  /**\n   * Value of the instalment.\n   */\n  @Column()\n  value: number;\n  /**\n   * Option that specifies if the instalment is taken into account.\n   */\n  @Column()\n  intoAccount: boolean;\n  /**\n   * Identifier of the next payment.\n   */\n  @Column()\n  nextPaymentId: number;\n  /**\n   * Optional for uploading image of receipt of the instalment.\n   */\n  @Column({ type: \'blob\' })\n  file: string;\n  @ManyToOne(\n    type => Account,\n    account => account.id,\n  )\n  account: Account;\n  @ManyToOne(\n    type => Subcategory,\n    subcategory => subcategory.id,\n  )\n  subcategory: Subcategory;\n  @OneToMany(\n    type => InstalmentDate,\n    instalmentsdate => instalmentsdate.id,\n  )\n  instalmentsdate: InstalmentDate[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/InstalmentDate.html': {
      'url': 'classes/InstalmentDate.html',
      'title': 'class - InstalmentDate',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  InstalmentDate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/instalmentdate/instalmentdate.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Instalment table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                id\n                            \n                            \n                                instalment\n                            \n                            \n                                paid\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalmentdate/instalmentdate.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Date of the particular instalment.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalmentdate/instalmentdate.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Identifier of the particular instalment payment date.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            instalment\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Instalment\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalmentdate/instalmentdate.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            paid\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalmentdate/instalmentdate.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Option that specifies if the particular instalment was paid or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/instalmentdate/instalmentdate.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Value of the particular instalment.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Instalment } from \'../instalment/instalment.entity\';\n\n/**\n * This entity describes the Instalment table.\n */\n@Entity()\nexport class InstalmentDate {\n  /**\n   * Identifier of the particular instalment payment date.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Date of the particular instalment.\n   */\n  @Column()\n  date: Date;\n  /**\n   * Value of the particular instalment.\n   */\n  @Column()\n  value: number;\n  /**\n   * Option that specifies if the particular instalment was paid or not.\n   */\n  @Column()\n  paid: boolean;\n  @ManyToOne(\n    type => Instalment,\n    instalment => instalment.id,\n  )\n  instalment: Instalment;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/JwtStrategy.html': {
      'url': 'injectables/JwtStrategy.html',
      'title': 'injectable - JwtStrategy',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                File responsible for validation JWT token of the user.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any, done: VerifiedCallback)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:24\n                \n            \n\n\n            \n                \n                    This method responsible for validating JWT token of the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Information to conclude into token\n\n                                    \n                                \n                                \n                                    done\n                                    \n                                            VerifiedCallback\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Feedback of the validation\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \'@nestjs/common\';\nimport { PassportStrategy } from \'@nestjs/passport\';\nimport { ExtractJwt, Strategy, VerifiedCallback } from \'passport-jwt\';\nimport { AuthService } from \'./auth.service\';\n\n/**\n * File responsible for validation JWT token of the user.\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly authService: AuthService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.SECRET,\n    });\n  }\n\n  /**\n   * This method responsible for validating JWT token of the user.\n   * @param payload Information to conclude into token\n   * @param done Feedback of the validation\n   * @return\n   */\n  async validate(payload: any, done: VerifiedCallback) {\n    const user = await this.authService.validateUser(payload);\n    if (!user) {\n      return done(\n        new HttpException(\'Unauthorized access\', HttpStatus.UNAUTHORIZED),\n        false,\n      );\n    }\n    return done(null, user, payload.iat);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/LoginRegisterDTO.html': {
      'url': 'classes/LoginRegisterDTO.html',
      'title': 'class - LoginRegisterDTO',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginRegisterDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.dto.ts\n        \n\n            \n                Description\n            \n            \n                Data Transfer Object containing information about the credentials of the user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.dto.ts:11\n                            \n                        \n\n                \n                    \n                        E-mail address of the user\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.dto.ts:17\n                            \n                        \n\n                \n                    \n                        Password of the user\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString } from \'class-validator\';\n\n/**\n * Data Transfer Object containing information about the credentials of the user.\n */\nexport class LoginRegisterDTO {\n  /**\n   * E-mail address of the user\n   */\n  @IsEmail()\n  email: string;\n  /**\n   * Password of the user\n   */\n  @IsNotEmpty()\n  @IsString()\n  password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Message.html': {
      'url': 'classes/Message.html',
      'title': 'class - Message',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Message\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/message/message.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Message table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                read\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/message/message.entity.ts:22\n                            \n                        \n\n                \n                    \n                        Date of the message.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 1000})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/message/message.entity.ts:27\n                            \n                        \n\n                \n                    \n                        Description of the message.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/message/message.entity.ts:12\n                            \n                        \n\n                \n                    \n                        Identifier of the message.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            read\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/message/message.entity.ts:32\n                            \n                        \n\n                \n                    \n                        Option that specifies if the message was read.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/message/message.entity.ts:17\n                            \n                        \n\n                \n                    \n                        Title of the message.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, PrimaryGeneratedColumn } from \'typeorm\';\n\n/**\n * This entity describes the Message table.\n */\n@Entity()\nexport class Message {\n  /**\n   * Identifier of the message.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the message.\n   */\n  @Column({ length: 45 })\n  title: string;\n  /**\n   * Date of the message.\n   */\n  @Column()\n  date: Date;\n  /**\n   * Description of the message.\n   */\n  @Column({ length: 1000 })\n  description: string;\n  /**\n   * Option that specifies if the message was read.\n   */\n  @Column({ default: false })\n  read: boolean;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Notification.html': {
      'url': 'classes/Notification.html',
      'title': 'class - Notification',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Notification\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/notification/notification.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Notification table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                seen\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notification/notification.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Date of the notification.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 200})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notification/notification.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Description of the notification.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notification/notification.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Identifier of the notification.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seen\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notification/notification.entity.ts:33\n                            \n                        \n\n                \n                    \n                        Option that specifies if the notification was seen.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 100})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notification/notification.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Title of the notification.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/notification/notification.entity.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \'typeorm\';\nimport { User } from \'../user/user.entity\';\n\n/**\n * This entity describes the Notification table.\n */\n@Entity()\nexport class Notification {\n  /**\n   * Identifier of the notification.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the notification.\n   */\n  @Column({ length: 100 })\n  title: string;\n  /**\n   * Date of the notification.\n   */\n  @Column()\n  date: Date;\n  /**\n   * Description of the notification.\n   */\n  @Column({ length: 200 })\n  description: string;\n  /**\n   * Option that specifies if the notification was seen.\n   */\n  @Column()\n  seen: boolean;\n  @ManyToOne(\n    type => User,\n    user => user.notifications,\n  )\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Operation.html': {
      'url': 'classes/Operation.html',
      'title': 'class - Operation',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Operation\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/operation/operation.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Operation table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                file\n                            \n                            \n                                guarantyDays\n                            \n                            \n                                id\n                            \n                            \n                                intoAccount\n                            \n                            \n                                subcategory\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:46\n                            \n                        \n\n                \n                    \n                        Date of the operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 300})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Description of the operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            file\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: \'blob\'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:51\n                            \n                        \n\n                \n                    \n                        Optional for uploading image of receipt of the operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            guarantyDays\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:61\n                            \n                        \n\n                \n                    \n                        Option that specifies how many days warranty for the purchase.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:21\n                            \n                        \n\n                \n                    \n                        Identifier of the operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intoAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:56\n                            \n                        \n\n                \n                    \n                        Option that specifies if the operation is taken into the consideration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subcategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subcategory\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 150})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Title of the operation.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:36\n                            \n                        \n\n                \n                    \n                        Type of the operation (income/outcome)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/operation/operation.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Value of the operation.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { Account } from \'../account/account.entity\';\nimport { Subcategory } from \'../subcategory/subcategory.entity\';\n\n/**\n * This entity describes the Operation table.\n */\n@Entity()\nexport class Operation {\n  /**\n   * Identifier of the operation.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the operation.\n   */\n  @Column({ length: 150 })\n  title: string;\n  /**\n   * Description of the operation.\n   */\n  @Column({ length: 300 })\n  description: string;\n  /**\n   * Type of the operation (income/outcome)\n   */\n  @Column()\n  type: boolean;\n  /**\n   * Value of the operation.\n   */\n  @Column()\n  value: number;\n  /**\n   * Date of the operation.\n   */\n  @Column()\n  date: Date;\n  /**\n   * Optional for uploading image of receipt of the operation.\n   */\n  @Column({ type: \'blob\' })\n  file: string;\n  /**\n   * Option that specifies if the operation is taken into the consideration.\n   */\n  @Column()\n  intoAccount: boolean;\n  /**\n   * Option that specifies how many days warranty for the purchase.\n   */\n  @Column()\n  guarantyDays: number;\n  @ManyToOne(\n    type => Account,\n    account => account.id,\n  )\n  account: Account;\n  @OneToOne(type => Subcategory)\n  @JoinColumn()\n  subcategory: Subcategory;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/OperationController.html': {
      'url': 'controllers/OperationController.html',
      'title': 'controller - OperationController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  OperationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/operation/operation.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                operation\n            \n\n            \n                Description\n            \n            \n                Controller responsible for CRUD operations on operations.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addOperation\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            addOperation\n                        \n                        \n                    \n                \n            \n            \n                \naddOperation()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(\'add\')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/operation/operation.controller.ts:17\n                \n            \n\n\n            \n                \n                    This endpoint creates operation.\n\n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from \'@nestjs/common\';\nimport { AuthGuard } from \'@nestjs/passport\';\nimport { OperationService } from \'./operation.service\';\n\n/**\n * Controller responsible for CRUD operations on operations.\n */\n@Controller(\'operation\')\nexport class OperationController {\n  constructor(private readonly operationService: OperationService) {}\n\n  /**\n   * This endpoint creates operation.\n   */\n  @Get(\'add\')\n  @UseGuards(AuthGuard(\'jwt\'))\n  addOperation() {\n    return \'s\';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/OperationModule.html': {
      'url': 'modules/OperationModule.html',
      'title': 'module - OperationModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    OperationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_OperationModule\n\n\n\ncluster_OperationModule_providers\n\n\n\n\nOperationService\n\nOperationService\n\n\n\nOperationModule\n\nOperationModule\n\nOperationModule -->\n\nOperationService->OperationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/operation/operation.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            OperationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            OperationController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { Operation } from \'./operation.entity\';\nimport { OperationController } from \'./operation.controller\';\nimport { OperationService } from \'./operation.service\';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Operation])],\n  providers: [OperationService],\n  controllers: [OperationController],\n})\nexport class OperationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/OperationService.html': {
      'url': 'injectables/OperationService.html',
      'title': 'injectable - OperationService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  OperationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/operation/operation.service.ts\n        \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(operationRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/operation/operation.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        operationRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\nimport { InjectRepository } from \'@nestjs/typeorm\';\nimport { Repository } from \'typeorm\';\nimport { Operation } from \'./operation.entity\';\n\n@Injectable()\nexport class OperationService {\n  constructor(\n    @InjectRepository(Operation)\n    private readonly operationRepository: Repository,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Report.html': {
      'url': 'classes/Report.html',
      'title': 'class - Report',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Report\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/report/report.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Report table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                account\n                            \n                            \n                                averageOutcome\n                            \n                            \n                                balance\n                            \n                            \n                                budget\n                            \n                            \n                                dateFrom\n                            \n                            \n                                dateTo\n                            \n                            \n                                id\n                            \n                            \n                                maxOutcome\n                            \n                            \n                                minOutcome\n                            \n                            \n                                month\n                            \n                            \n                                operationQuantity\n                            \n                            \n                                totalMinus\n                            \n                            \n                                totalPlus\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            account\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            averageOutcome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:58\n                            \n                        \n\n                \n                    \n                        Option that specifies the average amount of money for outcome operation in that particular month.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            balance\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Balance of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            budget\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Budget of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateFrom\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:48\n                            \n                        \n\n                \n                    \n                        Starting date of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            dateTo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:53\n                            \n                        \n\n                \n                    \n                        Ending date of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Identifier of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            maxOutcome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:63\n                            \n                        \n\n                \n                    \n                        Option that specifies the maximum amount of money for outcome operation in that particular month.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            minOutcome\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:68\n                            \n                        \n\n                \n                    \n                        Option that specifies the minimum amount of money for outcome operation in that particular month.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            month\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Month date of the particular report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            operationQuantity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:43\n                            \n                        \n\n                \n                    \n                        Total number of operations of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            totalMinus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:33\n                            \n                        \n\n                \n                    \n                        Total outcome operations values of the particular month report.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            totalPlus\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/report/report.entity.ts:38\n                            \n                        \n\n                \n                    \n                        Total income operations values of the particular month report.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Account } from \'../account/account.entity\';\n\n/**\n * This entity describes the Report table.\n */\n@Entity()\nexport class Report {\n  /**\n   * Identifier of the particular month report.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Month date of the particular report.\n   */\n  @Column()\n  month: string;\n  /**\n   * Balance of the particular month report.\n   */\n  @Column()\n  balance: number;\n  /**\n   * Budget of the particular month report.\n   */\n  @Column()\n  budget: number;\n  /**\n   * Total outcome operations values of the particular month report.\n   */\n  @Column()\n  totalMinus: number;\n  /**\n   * Total income operations values of the particular month report.\n   */\n  @Column()\n  totalPlus: number;\n  /**\n   * Total number of operations of the particular month report.\n   */\n  @Column()\n  operationQuantity: number;\n  /**\n   * Starting date of the particular month report.\n   */\n  @Column()\n  dateFrom: Date;\n  /**\n   * Ending date of the particular month report.\n   */\n  @Column()\n  dateTo: Date;\n  /**\n   * Option that specifies the average amount of money for outcome operation in that particular month.\n   */\n  @Column()\n  averageOutcome: number;\n  /**\n   * Option that specifies the maximum amount of money for outcome operation in that particular month.\n   */\n  @Column()\n  maxOutcome: number;\n  /**\n   * Option that specifies the minimum amount of money for outcome operation in that particular month.\n   */\n  @Column()\n  minOutcome: number;\n  @ManyToOne(\n    type => Account,\n    account => account.id,\n  )\n  account: Account;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Setting.html': {
      'url': 'classes/Setting.html',
      'title': 'class - Setting',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Setting\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/setting/setting.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Setting table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                billingPeriodEnd\n                            \n                            \n                                billingPeriodStart\n                            \n                            \n                                id\n                            \n                            \n                                periodLength\n                            \n                            \n                                user\n                            \n                            \n                                webMode\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            billingPeriodEnd\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/setting/setting.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Ending date of the billing period. (DO ZMIANY W SEKCJI ACCOUNT)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            billingPeriodStart\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/setting/setting.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Starting date of the billing period. (DO ZMIANY W SEKCJI ACCOUNT)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/setting/setting.entity.ts:19\n                            \n                        \n\n                \n                    \n                        Identifier of the setting.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            periodLength\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/setting/setting.entity.ts:39\n                            \n                        \n\n                \n                    \n                        The length of the billing period in days.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/setting/setting.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            webMode\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 6})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/setting/setting.entity.ts:24\n                            \n                        \n\n                \n                    \n                        Option that specifies web mode of the front-end part of the application (dark/light).\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { User } from \'../user/user.entity\';\n\n/**\n * This entity describes the Setting table.\n */\n@Entity()\nexport class Setting {\n  /**\n   * Identifier of the setting.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Option that specifies web mode of the front-end part of the application (dark/light).\n   */\n  @Column({ length: 6 })\n  webMode: string;\n  /**\n   * Starting date of the billing period. (DO ZMIANY W SEKCJI ACCOUNT)\n   */\n  @Column()\n  billingPeriodStart: number;\n  /**\n   * Ending date of the billing period. (DO ZMIANY W SEKCJI ACCOUNT)\n   */\n  @Column()\n  billingPeriodEnd: number;\n  /**\n   * The length of the billing period in days.\n   */\n  @Column()\n  periodLength: number;\n  @OneToOne(type => User)\n  @JoinColumn()\n  user: User;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/SettingController.html': {
      'url': 'controllers/SettingController.html',
      'title': 'controller - SettingController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  SettingController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/setting/setting.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Controller responsible for CRUD operations on settings.\n\n            \n\n\n\n\n\n    \n\n\n    \n        import { Controller } from \'@nestjs/common\';\n\n/**\n * Controller responsible for CRUD operations on settings.\n */\n@Controller()\nexport class SettingController {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/SettingModule.html': {
      'url': 'modules/SettingModule.html',
      'title': 'module - SettingModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    SettingModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SettingModule\n\n\n\ncluster_SettingModule_providers\n\n\n\n\nSettingService\n\nSettingService\n\n\n\nSettingModule\n\nSettingModule\n\nSettingModule -->\n\nSettingService->SettingModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/setting/setting.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SettingService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SettingController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { Setting } from \'./setting.entity\';\nimport { SettingService } from \'./setting.service\';\nimport { SettingController } from \'./setting.controller\';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([Setting])],\n  providers: [SettingService],\n  controllers: [SettingController],\n})\nexport class SettingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/SettingService.html': {
      'url': 'injectables/SettingService.html',
      'title': 'injectable - SettingService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SettingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/setting/setting.service.ts\n        \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(settingRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/setting/setting.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        settingRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n    \n\n\n    \n        import { Injectable } from \'@nestjs/common\';\nimport { InjectRepository } from \'@nestjs/typeorm\';\nimport { Repository } from \'typeorm\';\nimport { Setting } from \'./setting.entity\';\n\n@Injectable()\nexport class SettingService {\n  constructor(\n    @InjectRepository(Setting)\n    private readonly settingRepository: Repository,\n  ) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/SharedModule.html': {
      'url': 'modules/SharedModule.html',
      'title': 'module - SharedModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nSharedModule\n\nSharedModule\n\nUserService  -->\n\nSharedModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nSharedModule -->\n\nUserService->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shared/shared.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from \'@nestjs/common\';\nimport { UserService } from \'../user/user.service\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { User } from \'../user/user.entity\';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class SharedModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Subcategory.html': {
      'url': 'classes/Subcategory.html',
      'title': 'class - Subcategory',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Subcategory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/subcategory/subcategory.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Subcategory table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                color\n                            \n                            \n                                cyclics\n                            \n                            \n                                id\n                            \n                            \n                                instalments\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/subcategory/subcategory.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            color\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/subcategory/subcategory.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Dominant color of the subcategory (front-end visualization).\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            cyclics\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Cyclic[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/subcategory/subcategory.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/subcategory/subcategory.entity.ts:21\n                            \n                        \n\n                \n                    \n                        Identifier of the subcategory.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            instalments\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Instalment[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/subcategory/subcategory.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/subcategory/subcategory.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Title of the subcategory.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  ManyToOne,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { Category } from \'../category/category.entity\';\nimport { Cyclic } from \'../cyclic/cyclic.entity\';\nimport { Instalment } from \'../instalment/instalment.entity\';\n\n/**\n * This entity describes the Subcategory table.\n */\n@Entity()\nexport class Subcategory {\n  /**\n   * Identifier of the subcategory.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the subcategory.\n   */\n  @Column({ length: 45 })\n  title: string;\n  /**\n   * Dominant color of the subcategory (front-end visualization).\n   */\n  @Column({ length: 20 })\n  color: string;\n  @ManyToOne(\n    type => Category,\n    category => category.id,\n  )\n  category: Category;\n  @OneToMany(\n    type => Cyclic,\n    cyclics => cyclics.id,\n  )\n  cyclics: Cyclic[];\n  @OneToMany(\n    type => Instalment,\n    instalments => instalments.id,\n  )\n  instalments: Instalment[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Task.html': {
      'url': 'classes/Task.html',
      'title': 'class - Task',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/task/task.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Task table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                experience\n                            \n                            \n                                id\n                            \n                            \n                                repetitionsNeeded\n                            \n                            \n                                title\n                            \n                            \n                                userstasks\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 500})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.entity.ts:28\n                            \n                        \n\n                \n                    \n                        Description of the task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            experience\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.entity.ts:23\n                            \n                        \n\n                \n                    \n                        Experience to receive when task is completed.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.entity.ts:13\n                            \n                        \n\n                \n                    \n                        Identifier of the task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            repetitionsNeeded\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.entity.ts:33\n                            \n                        \n\n                \n                    \n                        Number of repetitions needed to complete the task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.entity.ts:18\n                            \n                        \n\n                \n                    \n                        Title of the task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userstasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Userstasks[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/task/task.entity.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from \'typeorm\';\nimport { Userstasks } from \'../userstasks/userstasks.entity\';\n\n/**\n * This entity describes the Task table.\n */\n@Entity()\nexport class Task {\n  /**\n   * Identifier of the task.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Title of the task.\n   */\n  @Column({ length: 45 })\n  title: string;\n  /**\n   * Experience to receive when task is completed.\n   */\n  @Column()\n  experience: number;\n  /**\n   * Description of the task.\n   */\n  @Column({ length: 500 })\n  description: string;\n  /**\n   * Number of repetitions needed to complete the task.\n   */\n  @Column()\n  repetitionsNeeded: number;\n  @OneToMany(\n    type => Userstasks,\n    userstasks => userstasks.taskId,\n  )\n  userstasks: Userstasks[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Template.html': {
      'url': 'classes/Template.html',
      'title': 'class - Template',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Template\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/template/template.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the Template table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                intoAccount\n                            \n                            \n                                subcategory\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                            \n                                value\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 300})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:46\n                            \n                        \n\n                \n                    \n                        Description of the operation template.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:21\n                            \n                        \n\n                \n                    \n                        Identifier of the operation template.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            intoAccount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:36\n                            \n                        \n\n                \n                    \n                        Option that specifies if the operation template is taken into the consideration.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            subcategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Subcategory\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 150})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:41\n                            \n                        \n\n                \n                    \n                        Title of the operation template.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:26\n                            \n                        \n\n                \n                    \n                        Type of the operation (income/outcome) template.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            value\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/template/template.entity.ts:31\n                            \n                        \n\n                \n                    \n                        Value of the operation template.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { User } from \'../user/user.entity\';\nimport { Subcategory } from \'../subcategory/subcategory.entity\';\n\n/**\n * This entity describes the Template table.\n */\n@Entity()\nexport class Template {\n  /**\n   * Identifier of the operation template.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * Type of the operation (income/outcome) template.\n   */\n  @Column()\n  type: boolean;\n  /**\n   * Value of the operation template.\n   */\n  @Column()\n  value: number;\n  /**\n   * Option that specifies if the operation template is taken into the consideration.\n   */\n  @Column()\n  intoAccount: boolean;\n  /**\n   * Title of the operation template.\n   */\n  @Column({ length: 150 })\n  title: string;\n  /**\n   * Description of the operation template.\n   */\n  @Column({ length: 300 })\n  description: string;\n  @ManyToOne(\n    type => User,\n    user => user.id,\n  )\n  user: User;\n  @OneToOne(type => Subcategory)\n  @JoinColumn()\n  subcategory: Subcategory;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/User.html': {
      'url': 'classes/User.html',
      'title': 'class - User',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the User table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accounts\n                            \n                            \n                                achievements\n                            \n                            \n                                avatar\n                            \n                            \n                                birthDate\n                            \n                            \n                                email\n                            \n                            \n                                experience\n                            \n                            \n                                firstName\n                            \n                            \n                                id\n                            \n                            \n                                isActive\n                            \n                            \n                                isPremium\n                            \n                            \n                                lastName\n                            \n                            \n                                level\n                            \n                            \n                                notifications\n                            \n                            \n                                password\n                            \n                            \n                                registerDate\n                            \n                            \n                                sex\n                            \n                            \n                                templates\n                            \n                            \n                                userstasks\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                fromDTO\n                            \n                            \n                                getId\n                            \n                            \n                                getPassword\n                            \n                            \n                                    Async\n                                hashPassword\n                            \n                            \n                                    Public\n                                toModel\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            accounts\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Account[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:109\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            achievements\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Achievement[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            avatar\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column(\'blob\', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:89\n                            \n                        \n\n                \n                    \n                        File that contains avatar of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column(\'date\', {nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:54\n                            \n                        \n\n                \n                    \n                        Date of birthday of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:34\n                            \n                        \n\n                \n                    \n                        E-mail address of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            experience\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column(\'int\', {default: 100})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:74\n                            \n                        \n\n                \n                    \n                        Number that specifies amount of experience of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:44\n                            \n                        \n\n                \n                    \n                        First name of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Identifier of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isActive\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:79\n                            \n                        \n\n                \n                    \n                        Option that specifies if the user is active or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            isPremium\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:84\n                            \n                        \n\n                \n                    \n                        Option that specifies if the user has premium type of the account or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 45, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:49\n                            \n                        \n\n                \n                    \n                        Last name of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            level\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column(\'int\', {default: 1})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:69\n                            \n                        \n\n                \n                    \n                        Level account of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            notifications\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Notification[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:94\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 98})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:39\n                            \n                        \n\n                \n                    \n                        Password of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            registerDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:64\n                            \n                        \n\n                \n                    \n                        Date of the registration of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: \'enum\', enum: Sex, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:59\n                            \n                        \n\n                \n                    \n                        Sex of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            templates\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Template[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:114\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userstasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     Userstasks[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:104\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Static\n                            fromDTO\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    fromDTO(newUserDto: LoginRegisterDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:130\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    newUserDto\n                                    \n                                                LoginRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getId\n                        \n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:119\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         number\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getPassword\n                        \n                        \n                    \n                \n            \n            \n                \ngetPassword()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:116\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @BeforeInsert()\n                \n            \n\n            \n                \n                    Defined in src/user/user.entity.ts:123\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            toModel\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toModel()\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:136\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         UserModel\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BeforeInsert,\n  Column,\n  CreateDateColumn,\n  Entity,\n  ManyToMany,\n  OneToMany,\n  PrimaryGeneratedColumn,\n} from \'typeorm\';\nimport { Notification } from \'../notification/notification.entity\';\nimport { Achievement } from \'../achievement/achievement.entity\';\nimport { Userstasks } from \'../userstasks/userstasks.entity\';\nimport { Account } from \'../account/account.entity\';\nimport { Template } from \'../template/template.entity\';\nimport { UserModel } from \'./user.model\';\nimport * as argon2 from \'argon2\';\nimport { LoginRegisterDTO } from \'../auth/auth.dto\';\nimport { Sex } from \'../utilities/utils\';\n\n/**\n * This entity describes the User table.\n */\n@Entity()\nexport class User {\n  /**\n   * Identifier of the user.\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n  /**\n   * E-mail address of the user.\n   */\n  @Column({ length: 45 })\n  email: string;\n  /**\n   * Password of the user.\n   */\n  @Column({ length: 98 })\n  password: string;\n  /**\n   * First name of the user.\n   */\n  @Column({ length: 45, nullable: true })\n  firstName: string;\n  /**\n   * Last name of the user.\n   */\n  @Column({ length: 45, nullable: true })\n  lastName: string;\n  /**\n   * Date of birthday of the user.\n   */\n  @Column(\'date\', { nullable: true })\n  birthDate: Date;\n  /**\n   * Sex of the user.\n   */\n  @Column({ type: \'enum\', enum: Sex, nullable: true })\n  sex: Sex;\n  /**\n   * Date of the registration of the user.\n   */\n  @CreateDateColumn()\n  registerDate: Date;\n  /**\n   * Level account of the user.\n   */\n  @Column(\'int\', { default: 1 })\n  level: number;\n  /**\n   * Number that specifies amount of experience of the user.\n   */\n  @Column(\'int\', { default: 100 })\n  experience: number;\n  /**\n   * Option that specifies if the user is active or not.\n   */\n  @Column({ default: false })\n  isActive: boolean;\n  /**\n   * Option that specifies if the user has premium type of the account or not.\n   */\n  @Column({ default: false })\n  isPremium: boolean;\n  /**\n   * File that contains avatar of the user.\n   */\n  @Column(\'blob\', { nullable: true })\n  avatar: string;\n  @OneToMany(\n    type => Notification,\n    notifications => notifications.user,\n  )\n  notifications: Notification[];\n  @ManyToMany(\n    type => Achievement,\n    achievement => achievement.users,\n  )\n  achievements: Achievement[];\n  @OneToMany(\n    type => Userstasks,\n    userstasks => userstasks.userId,\n  )\n  userstasks: Userstasks[];\n  @OneToMany(\n    type => Account,\n    accounts => accounts.id,\n  )\n  accounts: Account[];\n  @OneToMany(\n    type => Template,\n    templates => templates.id,\n  )\n  templates: Template[];\n\n  getPassword(): string {\n    return this.password;\n  }\n  getId(): number {\n    return this.id;\n  }\n  @BeforeInsert()\n  async hashPassword() {\n    try {\n      this.password = await argon2.hash(this.password);\n    } catch (e) {\n      throw new Error(\'Hashing password problem\');\n    }\n  }\n  public static fromDTO(newUserDto: LoginRegisterDTO) {\n    const user = new User();\n    user.email = newUserDto.email;\n    user.password = newUserDto.password;\n    return user;\n  }\n  public toModel(): UserModel {\n    return new UserModel(this);\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'controllers/UserController.html': {
      'url': 'controllers/UserController.html',
      'title': 'controller - UserController',
      'body': '\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                user\n            \n\n            \n                Description\n            \n            \n                Controller responsible for CRUD operations on user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                editUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            editUser\n                        \n                        \n                    \n                \n            \n            \n                \neditUser(userId: number, userDto: UserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post(\'edit/:id\')\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:21\n                \n            \n\n\n            \n                \n                    This endpoint edits information about the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User\'s identifier.\n\n                                    \n                                \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Data Transfer Object containing information about the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Post, UseGuards } from \'@nestjs/common\';\nimport { AuthGuard } from \'@nestjs/passport\';\nimport { UserService } from \'./user.service\';\nimport { UserDto } from \'./user.dto\';\nimport { UserModel } from \'./user.model\';\n\n/**\n * Controller responsible for CRUD operations on user.\n */\n@Controller(\'user\')\n@UseGuards(AuthGuard(\'jwt\'))\nexport class UserController {\n  constructor(private readonly userService: UserService) {}\n\n  /**\n   * This endpoint edits information about the user.\n   * @param userId User\'s identifier.\n   * @param userDto Data Transfer Object containing information about the user.\n   */\n  @Post(\'edit/:id\')\n  editUser(@Param(\'id\') userId: number, @Body() userDto: UserDto): Promise {\n    return this.userService.editUser(userId, userDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/UserDto.html': {
      'url': 'classes/UserDto.html',
      'title': 'class - UserDto',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.dto.ts\n        \n\n            \n                Description\n            \n            \n                Data Transfer Object containing information about the user.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthDate\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                sex\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Date\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsDate()@IsOptional()@Type(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.dto.ts:25\n                            \n                        \n\n                \n                    \n                        Date of birthday of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.dto.ts:13\n                            \n                        \n\n                \n                    \n                        First name of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.dto.ts:18\n                            \n                        \n\n                \n                    \n                        Last name of the user.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsEnum(Sex)@IsOptional()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.dto.ts:31\n                            \n                        \n\n                \n                    \n                        Sex of the user.\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDate, IsEnum, IsOptional, IsString } from \'class-validator\';\nimport { Sex } from \'../utilities/utils\';\nimport { Type } from \'class-transformer\';\n\n/**\n * Data Transfer Object containing information about the user.\n */\nexport class UserDto {\n  /**\n   * First name of the user.\n   */\n  @IsString()\n  firstName: string;\n  /**\n   * Last name of the user.\n   */\n  @IsString()\n  lastName: string;\n  /**\n   * Date of birthday of the user.\n   */\n  @IsDate()\n  @IsOptional()\n  @Type(() => Date)\n  birthDate: Date;\n  /**\n   * Sex of the user.\n   */\n  @IsEnum(Sex)\n  @IsOptional()\n  sex: Sex;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/UserModel.html': {
      'url': 'classes/UserModel.html',
      'title': 'class - UserModel',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.model.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(user: User)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.model.ts:4\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        user\n                                                  \n                                                        \n                                                                        User\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.model.ts:4\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { User } from \'./user.entity\';\n\nexport class UserModel {\n  id: number;\n  constructor(user: User) {\n    this.id = user.id;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules/UserModule.html': {
      'url': 'modules/UserModule.html',
      'title': 'module - UserModule',
      'body': '\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UserModule\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService\n\nUserService\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from \'@nestjs/common\';\nimport { UserController } from \'./user.controller\';\nimport { UserService } from \'./user.service\';\nimport { TypeOrmModule } from \'@nestjs/typeorm\';\nimport { User } from \'./user.entity\';\n\n@Global()\n@Module({\n  imports: [TypeOrmModule.forFeature([User])],\n  providers: [UserService],\n  controllers: [UserController],\n  exports: [],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/UserService.html': {
      'url': 'injectables/UserService.html',
      'title': 'injectable - UserService',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n            \n                Description\n            \n            \n                File containing method implementations of CRUD operations for an user.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                checkHash\n                            \n                            \n                                    Async\n                                editUser\n                            \n                            \n                                    Async\n                                findByLogin\n                            \n                            \n                                    Async\n                                findByPayload\n                            \n                            \n                                    Async\n                                registerUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            checkHash\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    checkHash(hash: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:47\n                \n            \n\n\n            \n                \n                    This method checks if the password provided by the user matches that in the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    hash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Hashed password of the user.\n\n                                    \n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password provided during the login session.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            editUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    editUser(userId: number, userDto: UserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:87\n                \n            \n\n\n            \n                \n                    This method edits information about the user.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Identifier of the user.\n\n                                    \n                                \n                                \n                                    userDto\n                                    \n                                                UserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User Data Transfer Object that contains information about the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByLogin\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByLogin(userDTO: LoginRegisterDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:23\n                \n            \n\n\n            \n                \n                    This method finds user by his email address.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User Data Transfer Object that contains credentials of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findByPayload\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findByPayload(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:75\n                \n            \n\n\n            \n                \n                    TODO\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            registerUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    registerUser(userDTO: LoginRegisterDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:60\n                \n            \n\n\n            \n                \n                    This method registers new user into the database.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    userDTO\n                                    \n                                                LoginRegisterDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        User Data Transfer Object that contains credentials of the user.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from \'@nestjs/common\';\nimport { InjectRepository } from \'@nestjs/typeorm\';\nimport { User } from \'./user.entity\';\nimport { Repository } from \'typeorm\';\nimport { LoginRegisterDTO } from \'../auth/auth.dto\';\nimport { UserDto } from \'./user.dto\';\nimport { UserModel } from \'./user.model\';\n\n/**\n * File containing method implementations of CRUD operations for an user.\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User)\n    private readonly userRepository: Repository,\n  ) {}\n\n  /**\n   * This method finds user by his email address.\n   * @param userDTO User Data Transfer Object that contains credentials of the user.\n   */\n  async findByLogin(userDTO: LoginRegisterDTO): Promise {\n    const { email, password } = userDTO;\n    const user = await this.userRepository.findOne({ email });\n    if (!user) {\n      throw new HttpException(\n        \'Niepoprawne dane logowania\',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n    if (await this.checkHash(user.password, password)) {\n      return user.toModel();\n    } else {\n      throw new HttpException(\n        \'Niepoprawne dane logowania\',\n        HttpStatus.UNAUTHORIZED,\n      );\n    }\n  }\n\n  /**\n   * This method checks if the password provided by the user matches that in the database.\n   * @param hash Hashed password of the user.\n   * @param password Password provided during the login session.\n   */\n  async checkHash(hash: string, password: string): Promise {\n    const argon2 = require(\'argon2\');\n    try {\n      return await argon2.verify(hash, password);\n    } catch (err) {\n      throw new Error(\'Internal Failure\');\n    }\n  }\n\n  /**\n   * This method registers new user into the database.\n   * @param userDTO User Data Transfer Object that contains credentials of the user.\n   */\n  async registerUser(userDTO: LoginRegisterDTO): Promise {\n    const { email } = userDTO;\n    const user = await this.userRepository.findOne({ email });\n    if (user) {\n      throw new HttpException(\'User already exists\', HttpStatus.BAD_REQUEST);\n    }\n    const newUser: User = User.fromDTO(userDTO);\n    await this.userRepository.save(newUser);\n    return newUser.toModel();\n  }\n\n  /**\n   * TODO\n   * @param payload\n   */\n  async findByPayload(payload: any) {\n    const {\n      email: { id },\n    } = payload;\n    return await this.userRepository.findOne({ id });\n  }\n\n  /**\n   * This method edits information about the user.\n   * @param userId Identifier of the user.\n   * @param userDto User Data Transfer Object that contains information about the user.\n   */\n  async editUser(userId: number, userDto: UserDto): Promise {\n    const user = await this.userRepository.findOneOrFail(userId);\n    user.firstName = userDto.firstName;\n    user.lastName = userDto.lastName;\n    user.birthDate = userDto.birthDate;\n    user.sex = userDto.sex;\n    await this.userRepository.save(user);\n    return user.toModel();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'classes/Userstasks.html': {
      'url': 'classes/Userstasks.html',
      'title': 'class - Userstasks',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Userstasks\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/userstasks/userstasks.entity.ts\n        \n\n            \n                Description\n            \n            \n                This entity describes the User tasks table.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                completed\n                            \n                            \n                                id\n                            \n                            \n                                repetitionsAchieved\n                            \n                            \n                                taskId\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            completed\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/userstasks/userstasks.entity.ts:29\n                            \n                        \n\n                \n                    \n                        Option that specifies if the task is completed or not.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/userstasks/userstasks.entity.ts:14\n                            \n                        \n\n                \n                    \n                        Identifier of the user task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            repetitionsAchieved\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/userstasks/userstasks.entity.ts:34\n                            \n                        \n\n                \n                    \n                        Option that specifies how many repetitions are needed to complete the task.\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taskId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/userstasks/userstasks.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/userstasks/userstasks.entity.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Column, Entity, ManyToOne, PrimaryColumn } from \'typeorm\';\nimport { Task } from \'../task/task.entity\';\nimport { User } from \'../user/user.entity\';\n\n/**\n * This entity describes the User tasks table.\n */\n@Entity()\nexport class Userstasks {\n  /**\n   * Identifier of the user task.\n   */\n  @PrimaryColumn()\n  id: number;\n  @ManyToOne(\n    type => Task,\n    taskId2 => taskId2.id,\n  )\n  taskId: Task;\n  @ManyToOne(\n    type => User,\n    userId2 => userId2.id,\n  )\n  userId: User;\n  /**\n   * Option that specifies if the task is completed or not.\n   */\n  @Column()\n  completed: boolean;\n  /**\n   * Option that specifies how many repetitions are needed to complete the task.\n   */\n  @Column()\n  repetitionsAchieved: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'injectables/ValidationPipe.html': {
      'url': 'injectables/ValidationPipe.html',
      'title': 'injectable - ValidationPipe',
      'body': '\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  ValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shared/validation.pipe.ts\n        \n\n            \n                Description\n            \n            \n                This file is responsible for validating user\'s data input.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                formatErrors\n                            \n                            \n                                    Private\n                                isEmpty\n                            \n                            \n                                    Private\n                                toValidate\n                            \n                            \n                                    Async\n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            formatErrors\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    formatErrors(errors: any[])\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.pipe.ts:48\n                \n            \n\n\n            \n                \n                    This method returns properly formatted errors.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    errors\n                                    \n                                            any[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        in array\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isEmpty\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isEmpty(value: any)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.pipe.ts:62\n                \n            \n\n\n            \n                \n                    This method retrieves information about empty field.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        true or false\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            toValidate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    toValidate(metatype)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.pipe.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    metatype\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    transform(value: any, metadata: ArgumentMetadata)\n                \n            \n\n\n            \n                \n                    Defined in src/shared/validation.pipe.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    metadata\n                                    \n                                            ArgumentMetadata\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  PipeTransform,\n  Injectable,\n  ArgumentMetadata,\n  HttpException,\n  HttpStatus,\n} from \'@nestjs/common\';\nimport { validate } from \'class-validator\';\nimport { plainToClass } from \'class-transformer\';\n\n/**\n * This file is responsible for validating user\'s data input.\n */\n@Injectable()\nexport class ValidationPipe implements PipeTransform {\n  async transform(value: any, metadata: ArgumentMetadata) {\n    if (value instanceof Object && this.isEmpty(value)) {\n      throw new HttpException(\n        \'Validation failed: No body submitted\',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const { metatype } = metadata;\n    if (!metatype || !this.toValidate(metatype)) {\n      return value;\n    }\n    const object = plainToClass(metatype, value);\n    const errors = await validate(object);\n    if (errors.length > 0) {\n      throw new HttpException(\n        `Validation failed: ${this.formatErrors(errors)}`,\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n    return value;\n  }\n\n  private toValidate(metatype): boolean {\n    const types = [String, Boolean, Number, Array, Object];\n    return !types.includes(metatype);\n  }\n\n  /**\n   * This method returns properly formatted errors.\n   * @param errors in array\n   */\n  private formatErrors(errors: any[]) {\n    return errors\n      .map(err => {\n        for (let property in err.constraints) {\n          return err.constraints[property];\n        }\n      })\n      .join(\', \');\n  }\n\n  /**\n   * This method retrieves information about empty field.\n   * @param value true or false\n   */\n  private isEmpty(value: any) {\n    if (Object.keys(value).length > 0) {\n      return false;\n    }\n    return true;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'coverage.html': {
      'url': 'coverage.html',
      'title': 'coverage - coverage',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/account/account.controller.ts\n            \n            controller\n            AccountController\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/account/account.dto.ts\n            \n            class\n            AccountDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/account/account.entity.ts\n            \n            class\n            Account\n            \n                43 %\n                (7/16)\n            \n        \n        \n            \n                \n                src/account/account.model.ts\n            \n            class\n            AccountModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/account/account.service.ts\n            \n            injectable\n            AccountService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/achievement/achievement.entity.ts\n            \n            class\n            Achievement\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.dto.ts\n            \n            class\n            LoginRegisterDTO\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                66 %\n                (2/3)\n            \n        \n        \n            \n                \n                src/category/category.controller.ts\n            \n            controller\n            CategoryController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/category/category.entity.ts\n            \n            class\n            Category\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/category/category.model.ts\n            \n            interface\n            CategoryDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/category/category.service.ts\n            \n            injectable\n            CategoryService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/currency/currency.controller.ts\n            \n            controller\n            CurrencyController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/currency/currency.entity.ts\n            \n            class\n            Currency\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/currency/currency.model.ts\n            \n            class\n            CurrencyModel\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/currency/currency.service.ts\n            \n            injectable\n            CurrencyService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/cyclic/cyclic.entity.ts\n            \n            class\n            Cyclic\n            \n                84 %\n                (11/13)\n            \n        \n        \n            \n                \n                src/event/event.entity.ts\n            \n            class\n            Event\n            \n                92 %\n                (12/13)\n            \n        \n        \n            \n                \n                src/instalment/instalment.entity.ts\n            \n            class\n            Instalment\n            \n                76 %\n                (10/13)\n            \n        \n        \n            \n                \n                src/instalmentdate/instalmentdate.entity.ts\n            \n            class\n            InstalmentDate\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/message/message.entity.ts\n            \n            class\n            Message\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/notification/notification.entity.ts\n            \n            class\n            Notification\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/operation/operation.controller.ts\n            \n            controller\n            OperationController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/operation/operation.entity.ts\n            \n            class\n            Operation\n            \n                83 %\n                (10/12)\n            \n        \n        \n            \n                \n                src/operation/operation.service.ts\n            \n            injectable\n            OperationService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/report/report.entity.ts\n            \n            class\n            Report\n            \n                92 %\n                (13/14)\n            \n        \n        \n            \n                \n                src/setting/setting.controller.ts\n            \n            controller\n            SettingController\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/setting/setting.entity.ts\n            \n            class\n            Setting\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/setting/setting.service.ts\n            \n            injectable\n            SettingService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shared/http-error-filter.ts\n            \n            class\n            HttpErrorFilter\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/shared/validation.pipe.ts\n            \n            injectable\n            ValidationPipe\n            \n                60 %\n                (3/5)\n            \n        \n        \n            \n                \n                src/subcategory/subcategory.entity.ts\n            \n            class\n            Subcategory\n            \n                57 %\n                (4/7)\n            \n        \n        \n            \n                \n                src/task/task.entity.ts\n            \n            class\n            Task\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/template/template.entity.ts\n            \n            class\n            Template\n            \n                77 %\n                (7/9)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/user/user.dto.ts\n            \n            class\n            UserDto\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            User\n            \n                58 %\n                (14/24)\n            \n        \n        \n            \n                \n                src/user/user.model.ts\n            \n            class\n            UserModel\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                85 %\n                (6/7)\n            \n        \n        \n            \n                \n                src/userstasks/userstasks.entity.ts\n            \n            class\n            Userstasks\n            \n                66 %\n                (4/6)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById(\'coverage-table\'));\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'dependencies.html': {
      'url': 'dependencies.html',
      'title': 'package-dependencies - dependencies',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.10.12\n        \n            @nestjs/core : ^6.10.12\n        \n            @nestjs/passport : ^6.1.1\n        \n            @nestjs/platform-express : ^6.10.12\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            @types/jsonwebtoken : ^8.3.5\n        \n            argon2 : ^0.25.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.0\n        \n            jsonwebtoken : ^8.5.1\n        \n            mysql : ^2.17.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.0\n        \n            rxjs : ^6.5.3\n        \n            typeorm : ^0.2.21\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/enumerations.html': {
      'url': 'miscellaneous/enumerations.html',
      'title': 'miscellaneous-enumerations - enumerations',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Color   (src/.../utils.ts)\n                        \n                        \n                            Sex   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utilities/utils.ts\n    \n        \n            \n                \n                    \n                        \n                        Color\n                    \n                \n                    \n                        \n                            Model of the color.\n\n                        \n                    \n                        \n                            \n                                 RED\n                            \n                        \n                        \n                            \n                                Value : red\n                            \n                        \n                        \n                            \n                                 GREEN\n                            \n                        \n                        \n                            \n                                Value : green\n                            \n                        \n                        \n                            \n                                 BLUE\n                            \n                        \n                        \n                            \n                                Value : blue\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                    \n                        \n                            Model of the sexes.\n\n                        \n                    \n                        \n                            \n                                 MALE\n                            \n                        \n                        \n                            \n                                 FEMALE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'miscellaneous/functions.html': {
      'url': 'miscellaneous/functions.html',
      'title': 'miscellaneous-functions - functions',
      'body': '\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'index.html': {
      'url': 'index.html',
      'title': 'getting-started - index',
      'body': '\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you\'d like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'modules.html': {
      'url': 'modules.html',
      'title': 'modules - modules',
      'body': '\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AccountModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoryModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CurrencyModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        OperationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SettingModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
    'overview.html': {
      'url': 'overview.html',
      'title': 'overview - overview',
      'body': '\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AccountModule\n\n\n\ncluster_AccountModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoryModule\n\n\n\ncluster_CategoryModule_providers\n\n\n\ncluster_CurrencyModule\n\n\n\ncluster_CurrencyModule_providers\n\n\n\ncluster_OperationModule\n\n\n\ncluster_OperationModule_providers\n\n\n\ncluster_SettingModule\n\n\n\ncluster_SettingModule_providers\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_exports\n\n\n\ncluster_SharedModule_providers\n\n\n\n\nAccountService\n\nAccountService\n\n\n\nAccountModule\n\nAccountModule\n\nAccountModule -->\n\nAccountService->AccountModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAccountModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoryModule\n\nCategoryModule\n\nAppModule -->\n\nCategoryModule->AppModule\n\n\n\n\n\nCurrencyModule\n\nCurrencyModule\n\nAppModule -->\n\nCurrencyModule->AppModule\n\n\n\n\n\nOperationModule\n\nOperationModule\n\nAppModule -->\n\nOperationModule->AppModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nAuthModule -->\n\nSharedModule->AuthModule\n\n\n\nAppModule -->\n\nSharedModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nSharedModule->UserService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoryService\n\nCategoryService\n\nCategoryModule -->\n\nCategoryService->CategoryModule\n\n\n\n\n\nCurrencyService\n\nCurrencyService\n\nCurrencyModule -->\n\nCurrencyService->CurrencyModule\n\n\n\n\n\nOperationService\n\nOperationService\n\nOperationModule -->\n\nOperationService->OperationModule\n\n\n\n\n\nSettingService\n\nSettingService\n\n\n\nSettingModule\n\nSettingModule\n\nSettingModule -->\n\nSettingService->SettingModule\n\n\n\n\n\nUserService\n\nUserService\n\nSharedModule -->\n\nUserService->SharedModule\n\n\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        9 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    25 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching ""\n        \n    \n    \n        No results matching ""\n    \n\n',
    },
  },
};
